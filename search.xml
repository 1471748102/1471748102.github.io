<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>语法速查表</title>
    <url>/2020/02/28/markdown-emoji-biao-qing-yu-fa-su-cha-biao/</url>
    <content><![CDATA[<p>[这也是一测试]： 😆 😊 😃 🤣 😋 😍 😅 😎 😜 😆</p>
<p><strong>这是一篇关于markdown中快速插入Emoji表情的语法速查表，以后写markdown想要插入emoji表情忘记语法了，可以快速查看，挺方便的。</strong></p>
<table>
<thead>
<tr>
<th>ico</th>
<th>emoji</th>
<th>ico</th>
<th>emoji</th>
</tr>
</thead>
<tbody><tr>
<td>🤣</td>
<td><code>:rofl:</code></td>
<td>😄</td>
<td><code>:smile:</code></td>
</tr>
<tr>
<td>😆</td>
<td><code>:laughing:</code></td>
<td>😊</td>
<td><code>:blush:</code></td>
</tr>
<tr>
<td>😃</td>
<td><code>:smiley:</code></td>
<td>☺</td>
<td><code>:relaxed:</code></td>
</tr>
<tr>
<td>😏</td>
<td><code>:smirk:</code></td>
<td>😍</td>
<td><code>:heart_eyes:</code></td>
</tr>
<tr>
<td>😘</td>
<td><code>:kissing_heart:</code></td>
<td>😚</td>
<td><code>:kissing_closed_eyes:</code></td>
</tr>
<tr>
<td>😳</td>
<td><code>:flushed:</code></td>
<td>😌</td>
<td><code>:relieved:</code></td>
</tr>
<tr>
<td>🙄</td>
<td><code>:roll_eyes:</code></td>
<td>🙃</td>
<td><code>:upside_down_face:</code></td>
</tr>
<tr>
<td>😆</td>
<td><code>:satisfied:</code></td>
<td>😁</td>
<td><code>:grin:</code></td>
</tr>
<tr>
<td>😉</td>
<td><code>:wink:</code></td>
<td>😜</td>
<td><code>:stuck_out_tongue_winking_eye:</code></td>
</tr>
<tr>
<td>😝</td>
<td><code>:stuck_out_tongue_closed_eyes:</code></td>
<td>😀</td>
<td><code>:grinning:</code></td>
</tr>
<tr>
<td>🙁</td>
<td><code>:slightly_frowning_face:</code></td>
<td>🙂</td>
<td><code>:slightly_smiling_face:</code></td>
</tr>
<tr>
<td>😗</td>
<td><code>:kissing:</code></td>
<td>😙</td>
<td><code>:kissing_smiling_eyes:</code></td>
</tr>
<tr>
<td>😛</td>
<td><code>:stuck_out_tongue:</code></td>
<td>😴</td>
<td><code>:sleeping:</code></td>
</tr>
<tr>
<td>😟</td>
<td><code>:worried:</code></td>
<td>😦</td>
<td><code>:frowning:</code></td>
</tr>
<tr>
<td>😧</td>
<td><code>:anguished:</code></td>
<td>😮</td>
<td><code>:open_mouth:</code></td>
</tr>
<tr>
<td>😬</td>
<td><code>:grimacing:</code></td>
<td>😕</td>
<td><code>:confused:</code></td>
</tr>
<tr>
<td>😯</td>
<td><code>:hushed:</code></td>
<td>😑</td>
<td><code>:expressionless:</code></td>
</tr>
<tr>
<td>😒</td>
<td><code>:unamused:</code></td>
<td>😅</td>
<td><code>:sweat_smile:</code></td>
</tr>
<tr>
<td>😓</td>
<td><code>:sweat:</code></td>
<td>😥</td>
<td><code>:disappointed_relieved:</code></td>
</tr>
<tr>
<td>😩</td>
<td><code>:weary:</code></td>
<td>😔</td>
<td><code>:pensive:</code></td>
</tr>
<tr>
<td>😞</td>
<td><code>:disappointed:</code></td>
<td>😖</td>
<td><code>:confounded:</code></td>
</tr>
<tr>
<td>😨</td>
<td><code>:fearful:</code></td>
<td>😰</td>
<td><code>:cold_sweat:</code></td>
</tr>
<tr>
<td>😣</td>
<td><code>:persevere:</code></td>
<td>😢</td>
<td><code>:cry:</code></td>
</tr>
<tr>
<td>😭</td>
<td><code>:sob:</code></td>
<td>😂</td>
<td><code>:joy:</code></td>
</tr>
<tr>
<td>😲</td>
<td><code>:astonished:</code></td>
<td>😱</td>
<td><code>:scream:</code></td>
</tr>
<tr>
<td></td>
<td><code>:neckbeard:</code></td>
<td>😫</td>
<td><code>:tired_face:</code></td>
</tr>
<tr>
<td>😠</td>
<td><code>:angry:</code></td>
<td>😡</td>
<td><code>:rage:</code></td>
</tr>
<tr>
<td>🤔</td>
<td><code>:thinking:</code></td>
<td>🤐</td>
<td><code>:zipper_mouth_face:</code></td>
</tr>
<tr>
<td>😤</td>
<td><code>:triumph:</code></td>
<td>😪</td>
<td><code>:sleepy:</code></td>
</tr>
<tr>
<td>😋</td>
<td><code>:yum:</code></td>
<td>😷</td>
<td><code>:mask:</code></td>
</tr>
<tr>
<td>😎</td>
<td><code>:sunglasses:</code></td>
<td>😵</td>
<td><code>:dizzy_face:</code></td>
</tr>
<tr>
<td>👿</td>
<td><code>:imp:</code></td>
<td>😈</td>
<td><code>:smiling_imp:</code></td>
</tr>
<tr>
<td>😐</td>
<td><code>:neutral_face:</code></td>
<td>😶</td>
<td><code>:no_mouth:</code></td>
</tr>
<tr>
<td>😇</td>
<td><code>:innocent:</code></td>
<td>👽</td>
<td><code>:alien:</code></td>
</tr>
<tr>
<td>💛</td>
<td><code>:yellow_heart:</code></td>
<td>💙</td>
<td><code>:blue_heart:</code></td>
</tr>
<tr>
<td>💜</td>
<td><code>:purple_heart:</code></td>
<td>❤</td>
<td><code>:heart:</code></td>
</tr>
<tr>
<td>💚</td>
<td><code>:green_heart:</code></td>
<td>💔</td>
<td><code>:broken_heart:</code></td>
</tr>
<tr>
<td>💓</td>
<td><code>:heartbeat:</code></td>
<td>💗</td>
<td><code>:heartpulse:</code></td>
</tr>
<tr>
<td>💕</td>
<td><code>:two_hearts:</code></td>
<td>💞</td>
<td><code>:revolving_hearts:</code></td>
</tr>
<tr>
<td>💘</td>
<td><code>:cupid:</code></td>
<td>💖</td>
<td><code>:sparkling_heart:</code></td>
</tr>
<tr>
<td>✨</td>
<td><code>:sparkles:</code></td>
<td>⭐</td>
<td><code>:star:</code></td>
</tr>
<tr>
<td>🌟</td>
<td><code>:star2:</code></td>
<td>💫</td>
<td><code>:dizzy:</code></td>
</tr>
<tr>
<td>💥</td>
<td><code>:boom:</code></td>
<td>💥</td>
<td><code>:collision:</code></td>
</tr>
<tr>
<td>💢</td>
<td><code>:anger:</code></td>
<td>❗</td>
<td><code>:exclamation:</code></td>
</tr>
<tr>
<td>❓</td>
<td><code>:question:</code></td>
<td>❕</td>
<td><code>:grey_exclamation:</code></td>
</tr>
<tr>
<td>❔</td>
<td><code>:grey_question:</code></td>
<td>💤</td>
<td><code>:zzz:</code></td>
</tr>
<tr>
<td>💨</td>
<td><code>:dash:</code></td>
<td>💦</td>
<td><code>:sweat_drops:</code></td>
</tr>
<tr>
<td>🎶</td>
<td><code>:notes:</code></td>
<td>🎵</td>
<td><code>:musical_note:</code></td>
</tr>
<tr>
<td>🔥</td>
<td><code>:fire:</code></td>
<td>💩</td>
<td><code>:hankey:</code></td>
</tr>
<tr>
<td>💩</td>
<td><code>:poop:</code></td>
<td>💩</td>
<td><code>:shit:</code></td>
</tr>
<tr>
<td>:+1:</td>
<td><code>:+1:</code></td>
<td>👍</td>
<td><code>:thumbsup:</code></td>
</tr>
<tr>
<td>:-1:</td>
<td><code>:-1:</code></td>
<td>👎</td>
<td><code>:thumbsdown:</code></td>
</tr>
<tr>
<td>👌</td>
<td><code>:ok_hand:</code></td>
<td>👊</td>
<td><code>:punch:</code></td>
</tr>
<tr>
<td>👊</td>
<td><code>:facepunch:</code></td>
<td>✊</td>
<td><code>:fist:</code></td>
</tr>
<tr>
<td>✌</td>
<td><code>:v:</code></td>
<td>👋</td>
<td><code>:wave:</code></td>
</tr>
<tr>
<td>✋</td>
<td><code>:hand:</code></td>
<td>✋</td>
<td><code>:raised_hand:</code></td>
</tr>
<tr>
<td>👐</td>
<td><code>:open_hands:</code></td>
<td>☝</td>
<td><code>:point_up:</code></td>
</tr>
<tr>
<td>👇</td>
<td><code>:point_down:</code></td>
<td>👈</td>
<td><code>:point_left:</code></td>
</tr>
<tr>
<td>👉</td>
<td><code>:point_right:</code></td>
<td>🙌</td>
<td><code>:raised_hands:</code></td>
</tr>
<tr>
<td>🙏</td>
<td><code>:pray:</code></td>
<td>👆</td>
<td><code>:point_up_2:</code></td>
</tr>
<tr>
<td>👏</td>
<td><code>:clap:</code></td>
<td>💪</td>
<td><code>:muscle:</code></td>
</tr>
<tr>
<td>🤘</td>
<td><code>:metal:</code></td>
<td>🖕</td>
<td><code>:fu:</code></td>
</tr>
<tr>
<td>🏃</td>
<td><code>:runner:</code></td>
<td>🏃</td>
<td><code>:running:</code></td>
</tr>
<tr>
<td>👫</td>
<td><code>:couple:</code></td>
<td>👪</td>
<td><code>:family:</code></td>
</tr>
<tr>
<td>👬</td>
<td><code>:two_men_holding_hands:</code></td>
<td>👭</td>
<td><code>:two_women_holding_hands:</code></td>
</tr>
<tr>
<td>💃</td>
<td><code>:dancer:</code></td>
<td>👯</td>
<td><code>:dancers:</code></td>
</tr>
<tr>
<td>🙆</td>
<td><code>:ok_woman:</code></td>
<td>🙅</td>
<td><code>:no_good:</code></td>
</tr>
<tr>
<td>💁</td>
<td><code>:information_desk_person:</code></td>
<td>🙋</td>
<td><code>:raising_hand:</code></td>
</tr>
<tr>
<td>👰</td>
<td><code>:bride_with_veil:</code></td>
<td>🙎</td>
<td><code>:person_with_pouting_face:</code></td>
</tr>
<tr>
<td>🙍</td>
<td><code>:person_frowning:</code></td>
<td>🙇</td>
<td><code>:bow:</code></td>
</tr>
<tr>
<td>💑</td>
<td><code>:couple_with_heart:</code></td>
<td>💆</td>
<td><code>:massage:</code></td>
</tr>
<tr>
<td>💇</td>
<td><code>:haircut:</code></td>
<td>💅</td>
<td><code>:nail_care:</code></td>
</tr>
<tr>
<td>👦</td>
<td><code>:boy:</code></td>
<td>👧</td>
<td><code>:girl:</code></td>
</tr>
<tr>
<td>👩</td>
<td><code>:woman:</code></td>
<td>👨</td>
<td><code>:man:</code></td>
</tr>
<tr>
<td>👶</td>
<td><code>:baby:</code></td>
<td>👵</td>
<td><code>:older_woman:</code></td>
</tr>
<tr>
<td>👴</td>
<td><code>:older_man:</code></td>
<td>👱</td>
<td><code>:person_with_blond_hair:</code></td>
</tr>
<tr>
<td>👲</td>
<td><code>:man_with_gua_pi_mao:</code></td>
<td>👳</td>
<td><code>:man_with_turban:</code></td>
</tr>
<tr>
<td>👷</td>
<td><code>:construction_worker:</code></td>
<td>👮</td>
<td><code>:cop:</code></td>
</tr>
<tr>
<td>👼</td>
<td><code>:angel:</code></td>
<td>👸</td>
<td><code>:princess:</code></td>
</tr>
<tr>
<td>😺</td>
<td><code>:smiley_cat:</code></td>
<td>😸</td>
<td><code>:smile_cat:</code></td>
</tr>
<tr>
<td>😻</td>
<td><code>:heart_eyes_cat:</code></td>
<td>😽</td>
<td><code>:kissing_cat:</code></td>
</tr>
<tr>
<td>😼</td>
<td><code>:smirk_cat:</code></td>
<td>🙀</td>
<td><code>:scream_cat:</code></td>
</tr>
<tr>
<td>😿</td>
<td><code>:crying_cat_face:</code></td>
<td>😹</td>
<td><code>:joy_cat:</code></td>
</tr>
<tr>
<td>😾</td>
<td><code>:pouting_cat:</code></td>
<td>👹</td>
<td><code>:japanese_ogre:</code></td>
</tr>
<tr>
<td>👺</td>
<td><code>:japanese_goblin:</code></td>
<td>🙈</td>
<td><code>:see_no_evil:</code></td>
</tr>
<tr>
<td>🙉</td>
<td><code>:hear_no_evil:</code></td>
<td>🙊</td>
<td><code>:speak_no_evil:</code></td>
</tr>
<tr>
<td>💂</td>
<td><code>:guardsman:</code></td>
<td>💀</td>
<td><code>:skull:</code></td>
</tr>
<tr>
<td>🐾</td>
<td><code>:feet:</code></td>
<td>👄</td>
<td><code>:lips:</code></td>
</tr>
<tr>
<td>💋</td>
<td><code>:kiss:</code></td>
<td>💧</td>
<td><code>:droplet:</code></td>
</tr>
<tr>
<td>👂</td>
<td><code>:ear:</code></td>
<td>👀</td>
<td><code>:eyes:</code></td>
</tr>
<tr>
<td>👃</td>
<td><code>:nose:</code></td>
<td>👅</td>
<td><code>:tongue:</code></td>
</tr>
<tr>
<td>💌</td>
<td><code>:love_letter:</code></td>
<td>👤</td>
<td><code>:bust_in_silhouette:</code></td>
</tr>
<tr>
<td>👥</td>
<td><code>:busts_in_silhouette:</code></td>
<td>💬</td>
<td><code>:speech_balloon:</code></td>
</tr>
<tr>
<td>💭</td>
<td><code>:thought_balloon:</code></td>
<td></td>
<td><code>:feelsgood:</code></td>
</tr>
<tr>
<td></td>
<td><code>:finnadie:</code></td>
<td></td>
<td><code>:goberserk:</code></td>
</tr>
<tr>
<td></td>
<td><code>:godmode:</code></td>
<td></td>
<td><code>:hurtrealbad:</code></td>
</tr>
<tr>
<td></td>
<td><code>:rage1:</code></td>
<td></td>
<td><code>:rage2:</code></td>
</tr>
<tr>
<td></td>
<td><code>:rage3:</code></td>
<td></td>
<td><code>:rage4:</code></td>
</tr>
<tr>
<td></td>
<td><code>:suspect:</code></td>
<td></td>
<td><code>:trollface:</code></td>
</tr>
</tbody></table>
<h3 id="Nature"><a href="#Nature" class="headerlink" title="Nature"></a>Nature</h3><hr>
<table>
<thead>
<tr>
<th>ico</th>
<th>emoji</th>
<th>ico</th>
<th>emoji</th>
</tr>
</thead>
<tbody><tr>
<td>☀</td>
<td><code>:sunny:</code></td>
<td>☔</td>
<td><code>:umbrella:</code></td>
</tr>
<tr>
<td>☁</td>
<td><code>:cloud:</code></td>
<td>❄</td>
<td><code>:snowflake:</code></td>
</tr>
<tr>
<td>⛄</td>
<td><code>:snowman:</code></td>
<td>⚡</td>
<td><code>:zap:</code></td>
</tr>
<tr>
<td>🌀</td>
<td><code>:cyclone:</code></td>
<td>🌁</td>
<td><code>:foggy:</code></td>
</tr>
<tr>
<td>🌊</td>
<td><code>:ocean:</code></td>
<td>🐱</td>
<td><code>:cat:</code></td>
</tr>
<tr>
<td>🐶</td>
<td><code>:dog:</code></td>
<td>🐭</td>
<td><code>:mouse:</code></td>
</tr>
<tr>
<td>🐹</td>
<td><code>:hamster:</code></td>
<td>🐰</td>
<td><code>:rabbit:</code></td>
</tr>
<tr>
<td>🐺</td>
<td><code>:wolf:</code></td>
<td>🐸</td>
<td><code>:frog:</code></td>
</tr>
<tr>
<td>🐯</td>
<td><code>:tiger:</code></td>
<td>🐨</td>
<td><code>:koala:</code></td>
</tr>
<tr>
<td>🐻</td>
<td><code>:bear:</code></td>
<td>🐷</td>
<td><code>:pig:</code></td>
</tr>
<tr>
<td>🐽</td>
<td><code>:pig_nose:</code></td>
<td>🐮</td>
<td><code>:cow:</code></td>
</tr>
<tr>
<td>🐗</td>
<td><code>:boar:</code></td>
<td>🐵</td>
<td><code>:monkey_face:</code></td>
</tr>
<tr>
<td>🐒</td>
<td><code>:monkey:</code></td>
<td>🐴</td>
<td><code>:horse:</code></td>
</tr>
<tr>
<td>🐎</td>
<td><code>:racehorse:</code></td>
<td>🐫</td>
<td><code>:camel:</code></td>
</tr>
<tr>
<td>🐑</td>
<td><code>:sheep:</code></td>
<td>🐘</td>
<td><code>:elephant:</code></td>
</tr>
<tr>
<td>🐼</td>
<td><code>:panda_face:</code></td>
<td>🐍</td>
<td><code>:snake:</code></td>
</tr>
<tr>
<td>🐦</td>
<td><code>:bird:</code></td>
<td>🐤</td>
<td><code>:baby_chick:</code></td>
</tr>
<tr>
<td>🐥</td>
<td><code>:hatched_chick:</code></td>
<td>🐣</td>
<td><code>:hatching_chick:</code></td>
</tr>
<tr>
<td>🐔</td>
<td><code>:chicken:</code></td>
<td>🐧</td>
<td><code>:penguin:</code></td>
</tr>
<tr>
<td>🐢</td>
<td><code>:turtle:</code></td>
<td>🐛</td>
<td><code>:bug:</code></td>
</tr>
<tr>
<td>🐝</td>
<td><code>:honeybee:</code></td>
<td>🐜</td>
<td><code>:ant:</code></td>
</tr>
<tr>
<td>🐞</td>
<td><code>:beetle:</code></td>
<td>🐌</td>
<td><code>:snail:</code></td>
</tr>
<tr>
<td>🐙</td>
<td><code>:octopus:</code></td>
<td>🐠</td>
<td><code>:tropical_fish:</code></td>
</tr>
<tr>
<td>🐟</td>
<td><code>:fish:</code></td>
<td>🐳</td>
<td><code>:whale:</code></td>
</tr>
<tr>
<td>🐋</td>
<td><code>:whale2:</code></td>
<td>🐬</td>
<td><code>:dolphin:</code></td>
</tr>
<tr>
<td>🐄</td>
<td><code>:cow2:</code></td>
<td>🐏</td>
<td><code>:ram:</code></td>
</tr>
<tr>
<td>🐀</td>
<td><code>:rat:</code></td>
<td>🐃</td>
<td><code>:water_buffalo:</code></td>
</tr>
<tr>
<td>🐅</td>
<td><code>:tiger2:</code></td>
<td>🐇</td>
<td><code>:rabbit2:</code></td>
</tr>
<tr>
<td>🐉</td>
<td><code>:dragon:</code></td>
<td>🐐</td>
<td><code>:goat:</code></td>
</tr>
<tr>
<td>🐓</td>
<td><code>:rooster:</code></td>
<td>🐕</td>
<td><code>:dog2:</code></td>
</tr>
<tr>
<td>🐖</td>
<td><code>:pig2:</code></td>
<td>🐁</td>
<td><code>:mouse2:</code></td>
</tr>
<tr>
<td>🐂</td>
<td><code>:ox:</code></td>
<td>🐲</td>
<td><code>:dragon_face:</code></td>
</tr>
<tr>
<td>🐡</td>
<td><code>:blowfish:</code></td>
<td>🐊</td>
<td><code>:crocodile:</code></td>
</tr>
<tr>
<td>🐪</td>
<td><code>:dromedary_camel:</code></td>
<td>🐆</td>
<td><code>:leopard:</code></td>
</tr>
<tr>
<td>🐈</td>
<td><code>:cat2:</code></td>
<td>🐩</td>
<td><code>:poodle:</code></td>
</tr>
<tr>
<td>🐾</td>
<td><code>:paw_prints:</code></td>
<td>💐</td>
<td><code>:bouquet:</code></td>
</tr>
<tr>
<td>🌸</td>
<td><code>:cherry_blossom:</code></td>
<td>🌷</td>
<td><code>:tulip:</code></td>
</tr>
<tr>
<td>🍀</td>
<td><code>:four_leaf_clover:</code></td>
<td>🌹</td>
<td><code>:rose:</code></td>
</tr>
<tr>
<td>🌻</td>
<td><code>:sunflower:</code></td>
<td>🌺</td>
<td><code>:hibiscus:</code></td>
</tr>
<tr>
<td>🍁</td>
<td><code>:maple_leaf:</code></td>
<td>🍃</td>
<td><code>:leaves:</code></td>
</tr>
<tr>
<td>🍂</td>
<td><code>:fallen_leaf:</code></td>
<td>🌿</td>
<td><code>:herb:</code></td>
</tr>
<tr>
<td>🍄</td>
<td><code>:mushroom:</code></td>
<td>🌵</td>
<td><code>:cactus:</code></td>
</tr>
<tr>
<td>🌴</td>
<td><code>:palm_tree:</code></td>
<td>🌲</td>
<td><code>:evergreen_tree:</code></td>
</tr>
<tr>
<td>🌳</td>
<td><code>:deciduous_tree:</code></td>
<td>🌰</td>
<td><code>:chestnut:</code></td>
</tr>
<tr>
<td>🌱</td>
<td><code>:seedling:</code></td>
<td>🌼</td>
<td><code>:blossom:</code></td>
</tr>
<tr>
<td>🌾</td>
<td><code>:ear_of_rice:</code></td>
<td>🐚</td>
<td><code>:shell:</code></td>
</tr>
<tr>
<td>🌐</td>
<td><code>:globe_with_meridians:</code></td>
<td>🌞</td>
<td><code>:sun_with_face:</code></td>
</tr>
<tr>
<td>🌝</td>
<td><code>:full_moon_with_face:</code></td>
<td>🌚</td>
<td><code>:new_moon_with_face:</code></td>
</tr>
<tr>
<td>🌑</td>
<td><code>:new_moon:</code></td>
<td>🌒</td>
<td><code>:waxing_crescent_moon:</code></td>
</tr>
<tr>
<td>🌓</td>
<td><code>:first_quarter_moon:</code></td>
<td>🌔</td>
<td><code>:waxing_gibbous_moon:</code></td>
</tr>
<tr>
<td>🌕</td>
<td><code>:full_moon:</code></td>
<td>🌖</td>
<td><code>:waning_gibbous_moon:</code></td>
</tr>
<tr>
<td>🌗</td>
<td><code>:last_quarter_moon:</code></td>
<td>🌘</td>
<td><code>:waning_crescent_moon:</code></td>
</tr>
<tr>
<td>🌜</td>
<td><code>:last_quarter_moon_with_face:</code></td>
<td>🌛</td>
<td><code>:first_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td>🌙</td>
<td><code>:crescent_moon:</code></td>
<td>🌍</td>
<td><code>:earth_africa:</code></td>
</tr>
<tr>
<td>🌎</td>
<td><code>:earth_americas:</code></td>
<td>🌏</td>
<td><code>:earth_asia:</code></td>
</tr>
<tr>
<td>🌋</td>
<td><code>:volcano:</code></td>
<td>🌌</td>
<td><code>:milky_way:</code></td>
</tr>
<tr>
<td>⛅</td>
<td><code>:partly_sunny:</code></td>
<td></td>
<td><code>:octocat:</code></td>
</tr>
<tr>
<td></td>
<td><code>:squirrel:</code></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><hr>
<table>
<thead>
<tr>
<th>ico</th>
<th>emoji</th>
<th>ico</th>
<th>emoji</th>
</tr>
</thead>
<tbody><tr>
<td>🎍</td>
<td><code>:bamboo:</code></td>
<td>💝</td>
<td><code>:gift_heart:</code></td>
</tr>
<tr>
<td>🎎</td>
<td><code>:dolls:</code></td>
<td>🎒</td>
<td><code>:school_satchel:</code></td>
</tr>
<tr>
<td>🎓</td>
<td><code>:mortar_board:</code></td>
<td>🎏</td>
<td><code>:flags:</code></td>
</tr>
<tr>
<td>🎆</td>
<td><code>:fireworks:</code></td>
<td>🎇</td>
<td><code>:sparkler:</code></td>
</tr>
<tr>
<td>🎐</td>
<td><code>:wind_chime:</code></td>
<td>🎑</td>
<td><code>:rice_scene:</code></td>
</tr>
<tr>
<td>🎃</td>
<td><code>:jack_o_lantern:</code></td>
<td>👻</td>
<td><code>:ghost:</code></td>
</tr>
<tr>
<td>🎅</td>
<td><code>:santa:</code></td>
<td>🎄</td>
<td><code>:christmas_tree:</code></td>
</tr>
<tr>
<td>🎁</td>
<td><code>:gift:</code></td>
<td>🔔</td>
<td><code>:bell:</code></td>
</tr>
<tr>
<td>🔕</td>
<td><code>:no_bell:</code></td>
<td>🎋</td>
<td><code>:tanabata_tree:</code></td>
</tr>
<tr>
<td>🎉</td>
<td><code>:tada:</code></td>
<td>🎊</td>
<td><code>:confetti_ball:</code></td>
</tr>
<tr>
<td>🎈</td>
<td><code>:balloon:</code></td>
<td>🔮</td>
<td><code>:crystal_ball:</code></td>
</tr>
<tr>
<td>💿</td>
<td><code>:cd:</code></td>
<td>📀</td>
<td><code>:dvd:</code></td>
</tr>
<tr>
<td>💾</td>
<td><code>:floppy_disk:</code></td>
<td>📷</td>
<td><code>:camera:</code></td>
</tr>
<tr>
<td>📹</td>
<td><code>:video_camera:</code></td>
<td>🎥</td>
<td><code>:movie_camera:</code></td>
</tr>
<tr>
<td>💻</td>
<td><code>:computer:</code></td>
<td>📺</td>
<td><code>:tv:</code></td>
</tr>
<tr>
<td>📱</td>
<td><code>:iphone:</code></td>
<td>☎</td>
<td><code>:phone:</code></td>
</tr>
<tr>
<td>☎</td>
<td><code>:telephone:</code></td>
<td>📞</td>
<td><code>:telephone_receiver:</code></td>
</tr>
<tr>
<td>📟</td>
<td><code>:pager:</code></td>
<td>📠</td>
<td><code>:fax:</code></td>
</tr>
<tr>
<td>💽</td>
<td><code>:minidisc:</code></td>
<td>📼</td>
<td><code>:vhs:</code></td>
</tr>
<tr>
<td>🔉</td>
<td><code>:sound:</code></td>
<td>🔈</td>
<td><code>:speaker:</code></td>
</tr>
<tr>
<td>🔇</td>
<td><code>:mute:</code></td>
<td>📢</td>
<td><code>:loudspeaker:</code></td>
</tr>
<tr>
<td>📣</td>
<td><code>:mega:</code></td>
<td>⌛</td>
<td><code>:hourglass:</code></td>
</tr>
<tr>
<td>⏳</td>
<td><code>:hourglass_flowing_sand:</code></td>
<td>⏰</td>
<td><code>:alarm_clock:</code></td>
</tr>
<tr>
<td>⌚</td>
<td><code>:watch:</code></td>
<td>📻</td>
<td><code>:radio:</code></td>
</tr>
<tr>
<td>📡</td>
<td><code>:satellite:</code></td>
<td>➿</td>
<td><code>:loop:</code></td>
</tr>
<tr>
<td>🔍</td>
<td><code>:mag:</code></td>
<td>🔎</td>
<td><code>:mag_right:</code></td>
</tr>
<tr>
<td>🔓</td>
<td><code>:unlock:</code></td>
<td>🔒</td>
<td><code>:lock:</code></td>
</tr>
<tr>
<td>🔏</td>
<td><code>:lock_with_ink_pen:</code></td>
<td>🔐</td>
<td><code>:closed_lock_with_key:</code></td>
</tr>
<tr>
<td>🔑</td>
<td><code>:key:</code></td>
<td>💡</td>
<td><code>:bulb:</code></td>
</tr>
<tr>
<td>🔦</td>
<td><code>:flashlight:</code></td>
<td>🔆</td>
<td><code>:high_brightness:</code></td>
</tr>
<tr>
<td>🔅</td>
<td><code>:low_brightness:</code></td>
<td>🔌</td>
<td><code>:electric_plug:</code></td>
</tr>
<tr>
<td>🔋</td>
<td><code>:battery:</code></td>
<td>📲</td>
<td><code>:calling:</code></td>
</tr>
<tr>
<td>✉</td>
<td><code>:email:</code></td>
<td>📫</td>
<td><code>:mailbox:</code></td>
</tr>
<tr>
<td>📮</td>
<td><code>:postbox:</code></td>
<td>🛀</td>
<td><code>:bath:</code></td>
</tr>
<tr>
<td>🛁</td>
<td><code>:bathtub:</code></td>
<td>🚿</td>
<td><code>:shower:</code></td>
</tr>
<tr>
<td>🚽</td>
<td><code>:toilet:</code></td>
<td>🔧</td>
<td><code>:wrench:</code></td>
</tr>
<tr>
<td>🔩</td>
<td><code>:nut_and_bolt:</code></td>
<td>🔨</td>
<td><code>:hammer:</code></td>
</tr>
<tr>
<td>💺</td>
<td><code>:seat:</code></td>
<td>💰</td>
<td><code>:moneybag:</code></td>
</tr>
<tr>
<td>💴</td>
<td><code>:yen:</code></td>
<td>💵</td>
<td><code>:dollar:</code></td>
</tr>
<tr>
<td>💷</td>
<td><code>:pound:</code></td>
<td>💶</td>
<td><code>:euro:</code></td>
</tr>
<tr>
<td>💳</td>
<td><code>:credit_card:</code></td>
<td>💸</td>
<td><code>:money_with_wings:</code></td>
</tr>
<tr>
<td>:e-mail:</td>
<td><code>:e-mail:</code></td>
<td>📥</td>
<td><code>:inbox_tray:</code></td>
</tr>
<tr>
<td>📤</td>
<td><code>:outbox_tray:</code></td>
<td>✉</td>
<td><code>:envelope:</code></td>
</tr>
<tr>
<td>📨</td>
<td><code>:incoming_envelope:</code></td>
<td>📯</td>
<td><code>:postal_horn:</code></td>
</tr>
<tr>
<td>📪</td>
<td><code>:mailbox_closed:</code></td>
<td>📬</td>
<td><code>:mailbox_with_mail:</code></td>
</tr>
<tr>
<td>📭</td>
<td><code>:mailbox_with_no_mail:</code></td>
<td>📦</td>
<td><code>:package:</code></td>
</tr>
<tr>
<td>🚪</td>
<td><code>:door:</code></td>
<td>🚬</td>
<td><code>:smoking:</code></td>
</tr>
<tr>
<td>💣</td>
<td><code>:bomb:</code></td>
<td>🔫</td>
<td><code>:gun:</code></td>
</tr>
<tr>
<td>🔪</td>
<td><code>:hocho:</code></td>
<td>💊</td>
<td><code>:pill:</code></td>
</tr>
<tr>
<td>💉</td>
<td><code>:syringe:</code></td>
<td>📄</td>
<td><code>:page_facing_up:</code></td>
</tr>
<tr>
<td>📃</td>
<td><code>:page_with_curl:</code></td>
<td>📑</td>
<td><code>:bookmark_tabs:</code></td>
</tr>
<tr>
<td>📊</td>
<td><code>:bar_chart:</code></td>
<td>📈</td>
<td><code>:chart_with_upwards_trend:</code></td>
</tr>
<tr>
<td>📉</td>
<td><code>:chart_with_downwards_trend:</code></td>
<td>📜</td>
<td><code>:scroll:</code></td>
</tr>
<tr>
<td>📋</td>
<td><code>:clipboard:</code></td>
<td>📆</td>
<td><code>:calendar:</code></td>
</tr>
<tr>
<td>📅</td>
<td><code>:date:</code></td>
<td>📇</td>
<td><code>:card_index:</code></td>
</tr>
<tr>
<td>📁</td>
<td><code>:file_folder:</code></td>
<td>📂</td>
<td><code>:open_file_folder:</code></td>
</tr>
<tr>
<td>✂</td>
<td><code>:scissors:</code></td>
<td>📌</td>
<td><code>:pushpin:</code></td>
</tr>
<tr>
<td>📎</td>
<td><code>:paperclip:</code></td>
<td>✒</td>
<td><code>:black_nib:</code></td>
</tr>
<tr>
<td>✏</td>
<td><code>:pencil2:</code></td>
<td>📏</td>
<td><code>:straight_ruler:</code></td>
</tr>
<tr>
<td>📐</td>
<td><code>:triangular_ruler:</code></td>
<td>📕</td>
<td><code>:closed_book:</code></td>
</tr>
<tr>
<td>📗</td>
<td><code>:green_book:</code></td>
<td>📘</td>
<td><code>:blue_book:</code></td>
</tr>
<tr>
<td>📙</td>
<td><code>:orange_book:</code></td>
<td>📓</td>
<td><code>:notebook:</code></td>
</tr>
<tr>
<td>📔</td>
<td><code>:notebook_with_decorative_cover:</code></td>
<td>📒</td>
<td><code>:ledger:</code></td>
</tr>
<tr>
<td>📚</td>
<td><code>:books:</code></td>
<td>🔖</td>
<td><code>:bookmark:</code></td>
</tr>
<tr>
<td>📛</td>
<td><code>:name_badge:</code></td>
<td>🔬</td>
<td><code>:microscope:</code></td>
</tr>
<tr>
<td>🔭</td>
<td><code>:telescope:</code></td>
<td>📰</td>
<td><code>:newspaper:</code></td>
</tr>
<tr>
<td>🏈</td>
<td><code>:football:</code></td>
<td>🏀</td>
<td><code>:basketball:</code></td>
</tr>
<tr>
<td>⚽</td>
<td><code>:soccer:</code></td>
<td>⚾</td>
<td><code>:baseball:</code></td>
</tr>
<tr>
<td>🎾</td>
<td><code>:tennis:</code></td>
<td>🎱</td>
<td><code>:8ball:</code></td>
</tr>
<tr>
<td>🏉</td>
<td><code>:rugby_football:</code></td>
<td>🎳</td>
<td><code>:bowling:</code></td>
</tr>
<tr>
<td>⛳</td>
<td><code>:golf:</code></td>
<td>🚵</td>
<td><code>:mountain_bicyclist:</code></td>
</tr>
<tr>
<td>🚴</td>
<td><code>:bicyclist:</code></td>
<td>🏇</td>
<td><code>:horse_racing:</code></td>
</tr>
<tr>
<td>🏂</td>
<td><code>:snowboarder:</code></td>
<td>🏊</td>
<td><code>:swimmer:</code></td>
</tr>
<tr>
<td>🏄</td>
<td><code>:surfer:</code></td>
<td>🎿</td>
<td><code>:ski:</code></td>
</tr>
<tr>
<td>♠</td>
<td><code>:spades:</code></td>
<td>♥</td>
<td><code>:hearts:</code></td>
</tr>
<tr>
<td>♣</td>
<td><code>:clubs:</code></td>
<td>♦</td>
<td><code>:diamonds:</code></td>
</tr>
<tr>
<td>💎</td>
<td><code>:gem:</code></td>
<td>💍</td>
<td><code>:ring:</code></td>
</tr>
<tr>
<td>🏆</td>
<td><code>:trophy:</code></td>
<td>🎼</td>
<td><code>:musical_score:</code></td>
</tr>
<tr>
<td>🎹</td>
<td><code>:musical_keyboard:</code></td>
<td>🎻</td>
<td><code>:violin:</code></td>
</tr>
<tr>
<td>👾</td>
<td><code>:space_invader:</code></td>
<td>🎮</td>
<td><code>:video_game:</code></td>
</tr>
<tr>
<td>🃏</td>
<td><code>:black_joker:</code></td>
<td>🎴</td>
<td><code>:flower_playing_cards:</code></td>
</tr>
<tr>
<td>🎲</td>
<td><code>:game_die:</code></td>
<td>🎯</td>
<td><code>:dart:</code></td>
</tr>
<tr>
<td>🀄</td>
<td><code>:mahjong:</code></td>
<td>🎬</td>
<td><code>:clapper:</code></td>
</tr>
<tr>
<td>📝</td>
<td><code>:memo:</code></td>
<td>📝</td>
<td><code>:pencil:</code></td>
</tr>
<tr>
<td>📖</td>
<td><code>:book:</code></td>
<td>🎨</td>
<td><code>:art:</code></td>
</tr>
<tr>
<td>🎤</td>
<td><code>:microphone:</code></td>
<td>🎧</td>
<td><code>:headphones:</code></td>
</tr>
<tr>
<td>🎺</td>
<td><code>:trumpet:</code></td>
<td>🎷</td>
<td><code>:saxophone:</code></td>
</tr>
<tr>
<td>🎸</td>
<td><code>:guitar:</code></td>
<td>👞</td>
<td><code>:shoe:</code></td>
</tr>
<tr>
<td>👡</td>
<td><code>:sandal:</code></td>
<td>👠</td>
<td><code>:high_heel:</code></td>
</tr>
<tr>
<td>💄</td>
<td><code>:lipstick:</code></td>
<td>👢</td>
<td><code>:boot:</code></td>
</tr>
<tr>
<td>👕</td>
<td><code>:shirt:</code></td>
<td>👕</td>
<td><code>:tshirt:</code></td>
</tr>
<tr>
<td>👔</td>
<td><code>:necktie:</code></td>
<td>👚</td>
<td><code>:womans_clothes:</code></td>
</tr>
<tr>
<td>👗</td>
<td><code>:dress:</code></td>
<td>🎽</td>
<td><code>:running_shirt_with_sash:</code></td>
</tr>
<tr>
<td>👖</td>
<td><code>:jeans:</code></td>
<td>👘</td>
<td><code>:kimono:</code></td>
</tr>
<tr>
<td>👙</td>
<td><code>:bikini:</code></td>
<td>🎀</td>
<td><code>:ribbon:</code></td>
</tr>
<tr>
<td>🎩</td>
<td><code>:tophat:</code></td>
<td>👑</td>
<td><code>:crown:</code></td>
</tr>
<tr>
<td>👒</td>
<td><code>:womans_hat:</code></td>
<td>👞</td>
<td><code>:mans_shoe:</code></td>
</tr>
<tr>
<td>🌂</td>
<td><code>:closed_umbrella:</code></td>
<td>💼</td>
<td><code>:briefcase:</code></td>
</tr>
<tr>
<td>👜</td>
<td><code>:handbag:</code></td>
<td>👝</td>
<td><code>:pouch:</code></td>
</tr>
<tr>
<td>👛</td>
<td><code>:purse:</code></td>
<td>👓</td>
<td><code>:eyeglasses:</code></td>
</tr>
<tr>
<td>🎣</td>
<td><code>:fishing_pole_and_fish:</code></td>
<td>☕</td>
<td><code>:coffee:</code></td>
</tr>
<tr>
<td>🍵</td>
<td><code>:tea:</code></td>
<td>🍶</td>
<td><code>:sake:</code></td>
</tr>
<tr>
<td>🍼</td>
<td><code>:baby_bottle:</code></td>
<td>🍺</td>
<td><code>:beer:</code></td>
</tr>
<tr>
<td>🍻</td>
<td><code>:beers:</code></td>
<td>🍸</td>
<td><code>:cocktail:</code></td>
</tr>
<tr>
<td>🍹</td>
<td><code>:tropical_drink:</code></td>
<td>🍷</td>
<td><code>:wine_glass:</code></td>
</tr>
<tr>
<td>🍴</td>
<td><code>:fork_and_knife:</code></td>
<td>🍕</td>
<td><code>:pizza:</code></td>
</tr>
<tr>
<td>🍔</td>
<td><code>:hamburger:</code></td>
<td>🍟</td>
<td><code>:fries:</code></td>
</tr>
<tr>
<td>🍗</td>
<td><code>:poultry_leg:</code></td>
<td>🍖</td>
<td><code>:meat_on_bone:</code></td>
</tr>
<tr>
<td>🍝</td>
<td><code>:spaghetti:</code></td>
<td>🍛</td>
<td><code>:curry:</code></td>
</tr>
<tr>
<td>🍤</td>
<td><code>:fried_shrimp:</code></td>
<td>🍱</td>
<td><code>:bento:</code></td>
</tr>
<tr>
<td>🍣</td>
<td><code>:sushi:</code></td>
<td>🍥</td>
<td><code>:fish_cake:</code></td>
</tr>
<tr>
<td>🍙</td>
<td><code>:rice_ball:</code></td>
<td>🍘</td>
<td><code>:rice_cracker:</code></td>
</tr>
<tr>
<td>🍚</td>
<td><code>:rice:</code></td>
<td>🍜</td>
<td><code>:ramen:</code></td>
</tr>
<tr>
<td>🍲</td>
<td><code>:stew:</code></td>
<td>🍢</td>
<td><code>:oden:</code></td>
</tr>
<tr>
<td>🍡</td>
<td><code>:dango:</code></td>
<td>🥚</td>
<td><code>:egg:</code></td>
</tr>
<tr>
<td>🍞</td>
<td><code>:bread:</code></td>
<td>🍩</td>
<td><code>:doughnut:</code></td>
</tr>
<tr>
<td>🍮</td>
<td><code>:custard:</code></td>
<td>🍦</td>
<td><code>:icecream:</code></td>
</tr>
<tr>
<td>🍨</td>
<td><code>:ice_cream:</code></td>
<td>🍧</td>
<td><code>:shaved_ice:</code></td>
</tr>
<tr>
<td>🎂</td>
<td><code>:birthday:</code></td>
<td>🍰</td>
<td><code>:cake:</code></td>
</tr>
<tr>
<td>🍪</td>
<td><code>:cookie:</code></td>
<td>🍫</td>
<td><code>:chocolate_bar:</code></td>
</tr>
<tr>
<td>🍬</td>
<td><code>:candy:</code></td>
<td>🍭</td>
<td><code>:lollipop:</code></td>
</tr>
<tr>
<td>🍯</td>
<td><code>:honey_pot:</code></td>
<td>🍎</td>
<td><code>:apple:</code></td>
</tr>
<tr>
<td>🍏</td>
<td><code>:green_apple:</code></td>
<td>🍊</td>
<td><code>:tangerine:</code></td>
</tr>
<tr>
<td>🍋</td>
<td><code>:lemon:</code></td>
<td>🍒</td>
<td><code>:cherries:</code></td>
</tr>
<tr>
<td>🍇</td>
<td><code>:grapes:</code></td>
<td>🍉</td>
<td><code>:watermelon:</code></td>
</tr>
<tr>
<td>🍓</td>
<td><code>:strawberry:</code></td>
<td>🍑</td>
<td><code>:peach:</code></td>
</tr>
<tr>
<td>🍈</td>
<td><code>:melon:</code></td>
<td>🍌</td>
<td><code>:banana:</code></td>
</tr>
<tr>
<td>🍐</td>
<td><code>:pear:</code></td>
<td>🍍</td>
<td><code>:pineapple:</code></td>
</tr>
<tr>
<td>🍠</td>
<td><code>:sweet_potato:</code></td>
<td>🍆</td>
<td><code>:eggplant:</code></td>
</tr>
<tr>
<td>🍅</td>
<td><code>:tomato:</code></td>
<td>🌽</td>
<td><code>:corn:</code></td>
</tr>
</tbody></table>
<h3 id="Places"><a href="#Places" class="headerlink" title="Places"></a>Places</h3><hr>
<table>
<thead>
<tr>
<th>ico</th>
<th>emoji</th>
<th>ico</th>
<th>emoji</th>
</tr>
</thead>
<tbody><tr>
<td>🏠</td>
<td><code>:house:</code></td>
<td>🏡</td>
<td><code>:house_with_garden:</code></td>
</tr>
<tr>
<td>🏫</td>
<td><code>:school:</code></td>
<td>🏢</td>
<td><code>:office:</code></td>
</tr>
<tr>
<td>🏣</td>
<td><code>:post_office:</code></td>
<td>🏥</td>
<td><code>:hospital:</code></td>
</tr>
<tr>
<td>🏦</td>
<td><code>:bank:</code></td>
<td>🏪</td>
<td><code>:convenience_store:</code></td>
</tr>
<tr>
<td>🏩</td>
<td><code>:love_hotel:</code></td>
<td>🏨</td>
<td><code>:hotel:</code></td>
</tr>
<tr>
<td>💒</td>
<td><code>:wedding:</code></td>
<td>⛪</td>
<td><code>:church:</code></td>
</tr>
<tr>
<td>🏬</td>
<td><code>:department_store:</code></td>
<td>🏤</td>
<td><code>:european_post_office:</code></td>
</tr>
<tr>
<td>🌇</td>
<td><code>:city_sunrise:</code></td>
<td>🌆</td>
<td><code>:city_sunset:</code></td>
</tr>
<tr>
<td>🏯</td>
<td><code>:japanese_castle:</code></td>
<td>🏰</td>
<td><code>:european_castle:</code></td>
</tr>
<tr>
<td>⛺</td>
<td><code>:tent:</code></td>
<td>🏭</td>
<td><code>:factory:</code></td>
</tr>
<tr>
<td>🗼</td>
<td><code>:tokyo_tower:</code></td>
<td>🗾</td>
<td><code>:japan:</code></td>
</tr>
<tr>
<td>🗻</td>
<td><code>:mount_fuji:</code></td>
<td>🌄</td>
<td><code>:sunrise_over_mountains:</code></td>
</tr>
<tr>
<td>🌅</td>
<td><code>:sunrise:</code></td>
<td>🌠</td>
<td><code>:stars:</code></td>
</tr>
<tr>
<td>🗽</td>
<td><code>:statue_of_liberty:</code></td>
<td>🌉</td>
<td><code>:bridge_at_night:</code></td>
</tr>
<tr>
<td>🎠</td>
<td><code>:carousel_horse:</code></td>
<td>🌈</td>
<td><code>:rainbow:</code></td>
</tr>
<tr>
<td>🎡</td>
<td><code>:ferris_wheel:</code></td>
<td>⛲</td>
<td><code>:fountain:</code></td>
</tr>
<tr>
<td>🎢</td>
<td><code>:roller_coaster:</code></td>
<td>🚢</td>
<td><code>:ship:</code></td>
</tr>
<tr>
<td>🚤</td>
<td><code>:speedboat:</code></td>
<td>⛵</td>
<td><code>:boat:</code></td>
</tr>
<tr>
<td>⛵</td>
<td><code>:sailboat:</code></td>
<td>🚣</td>
<td><code>:rowboat:</code></td>
</tr>
<tr>
<td>⚓</td>
<td><code>:anchor:</code></td>
<td>🚀</td>
<td><code>:rocket:</code></td>
</tr>
<tr>
<td>✈</td>
<td><code>:airplane:</code></td>
<td>🚁</td>
<td><code>:helicopter:</code></td>
</tr>
<tr>
<td>🚂</td>
<td><code>:steam_locomotive:</code></td>
<td>🚊</td>
<td><code>:tram:</code></td>
</tr>
<tr>
<td>🚞</td>
<td><code>:mountain_railway:</code></td>
<td>🚲</td>
<td><code>:bike:</code></td>
</tr>
<tr>
<td>🚡</td>
<td><code>:aerial_tramway:</code></td>
<td>🚟</td>
<td><code>:suspension_railway:</code></td>
</tr>
<tr>
<td>🚠</td>
<td><code>:mountain_cableway:</code></td>
<td>🚜</td>
<td><code>:tractor:</code></td>
</tr>
<tr>
<td>🚙</td>
<td><code>:blue_car:</code></td>
<td>🚘</td>
<td><code>:oncoming_automobile:</code></td>
</tr>
<tr>
<td>🚗</td>
<td><code>:car:</code></td>
<td>🚗</td>
<td><code>:red_car:</code></td>
</tr>
<tr>
<td>🚕</td>
<td><code>:taxi:</code></td>
<td>🚖</td>
<td><code>:oncoming_taxi:</code></td>
</tr>
<tr>
<td>🚛</td>
<td><code>:articulated_lorry:</code></td>
<td>🚌</td>
<td><code>:bus:</code></td>
</tr>
<tr>
<td>🚍</td>
<td><code>:oncoming_bus:</code></td>
<td>🚨</td>
<td><code>:rotating_light:</code></td>
</tr>
<tr>
<td>🚓</td>
<td><code>:police_car:</code></td>
<td>🚔</td>
<td><code>:oncoming_police_car:</code></td>
</tr>
<tr>
<td>🚒</td>
<td><code>:fire_engine:</code></td>
<td>🚑</td>
<td><code>:ambulance:</code></td>
</tr>
<tr>
<td>🚐</td>
<td><code>:minibus:</code></td>
<td>🚚</td>
<td><code>:truck:</code></td>
</tr>
<tr>
<td>🚋</td>
<td><code>:train:</code></td>
<td>🚉</td>
<td><code>:station:</code></td>
</tr>
<tr>
<td>🚆</td>
<td><code>:train2:</code></td>
<td>🚅</td>
<td><code>:bullettrain_front:</code></td>
</tr>
<tr>
<td>🚄</td>
<td><code>:bullettrain_side:</code></td>
<td>🚈</td>
<td><code>:light_rail:</code></td>
</tr>
<tr>
<td>🚝</td>
<td><code>:monorail:</code></td>
<td>🚃</td>
<td><code>:railway_car:</code></td>
</tr>
<tr>
<td>🚎</td>
<td><code>:trolleybus:</code></td>
<td>🎫</td>
<td><code>:ticket:</code></td>
</tr>
<tr>
<td>⛽</td>
<td><code>:fuelpump:</code></td>
<td>🚦</td>
<td><code>:vertical_traffic_light:</code></td>
</tr>
<tr>
<td>🚥</td>
<td><code>:traffic_light:</code></td>
<td>⚠</td>
<td><code>:warning:</code></td>
</tr>
<tr>
<td>🚧</td>
<td><code>:construction:</code></td>
<td>🔰</td>
<td><code>:beginner:</code></td>
</tr>
<tr>
<td>🏧</td>
<td><code>:atm:</code></td>
<td>🎰</td>
<td><code>:slot_machine:</code></td>
</tr>
<tr>
<td>🚏</td>
<td><code>:busstop:</code></td>
<td>💈</td>
<td><code>:barber:</code></td>
</tr>
<tr>
<td>♨</td>
<td><code>:hotsprings:</code></td>
<td>🏁</td>
<td><code>:checkered_flag:</code></td>
</tr>
<tr>
<td>🎌</td>
<td><code>:crossed_flags:</code></td>
<td>🏮</td>
<td><code>:izakaya_lantern:</code></td>
</tr>
<tr>
<td>🗿</td>
<td><code>:moyai:</code></td>
<td>🎪</td>
<td><code>:circus_tent:</code></td>
</tr>
<tr>
<td>🎭</td>
<td><code>:performing_arts:</code></td>
<td>📍</td>
<td><code>:round_pushpin:</code></td>
</tr>
<tr>
<td>🚩</td>
<td><code>:triangular_flag_on_post:</code></td>
<td>🇯🇵</td>
<td><code>:jp:</code></td>
</tr>
<tr>
<td>🇰🇷</td>
<td><code>:kr:</code></td>
<td>🇨🇳</td>
<td><code>:cn:</code></td>
</tr>
<tr>
<td>🇺🇸</td>
<td><code>:us:</code></td>
<td>🇫🇷</td>
<td><code>:fr:</code></td>
</tr>
<tr>
<td>🇪🇸</td>
<td><code>:es:</code></td>
<td>🇮🇹</td>
<td><code>:it:</code></td>
</tr>
<tr>
<td>🇷🇺</td>
<td><code>:ru:</code></td>
<td>🇬🇧</td>
<td><code>:gb:</code></td>
</tr>
<tr>
<td>🇬🇧</td>
<td><code>:uk:</code></td>
<td>🇩🇪</td>
<td><code>:de:</code></td>
</tr>
</tbody></table>
<h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><hr>
<table>
<thead>
<tr>
<th>ico</th>
<th>emoji</th>
<th>ico</th>
<th>emoji</th>
</tr>
</thead>
<tbody><tr>
<td>1⃣</td>
<td><code>:one:</code></td>
<td>2⃣</td>
<td><code>:two:</code></td>
</tr>
<tr>
<td>3⃣</td>
<td><code>:three:</code></td>
<td>4⃣</td>
<td><code>:four:</code></td>
</tr>
<tr>
<td>5⃣</td>
<td><code>:five:</code></td>
<td>6⃣</td>
<td><code>:six:</code></td>
</tr>
<tr>
<td>7⃣</td>
<td><code>:seven:</code></td>
<td>8⃣</td>
<td><code>:eight:</code></td>
</tr>
<tr>
<td>9⃣</td>
<td><code>:nine:</code></td>
<td>🔟</td>
<td><code>:keycap_ten:</code></td>
</tr>
<tr>
<td>🔢</td>
<td><code>:1234:</code></td>
<td>0⃣</td>
<td><code>:zero:</code></td>
</tr>
<tr>
<td>#⃣</td>
<td><code>:hash:</code></td>
<td>🔣</td>
<td><code>:symbols:</code></td>
</tr>
<tr>
<td>◀</td>
<td><code>:arrow_backward:</code></td>
<td>⬇</td>
<td><code>:arrow_down:</code></td>
</tr>
<tr>
<td>▶</td>
<td><code>:arrow_forward:</code></td>
<td>⬅</td>
<td><code>:arrow_left:</code></td>
</tr>
<tr>
<td>🔠</td>
<td><code>:capital_abcd:</code></td>
<td>🔡</td>
<td><code>:abcd:</code></td>
</tr>
<tr>
<td>🔤</td>
<td><code>:abc:</code></td>
<td>↙</td>
<td><code>:arrow_lower_left:</code></td>
</tr>
<tr>
<td>↘</td>
<td><code>:arrow_lower_right:</code></td>
<td>➡</td>
<td><code>:arrow_right:</code></td>
</tr>
<tr>
<td>⬆</td>
<td><code>:arrow_up:</code></td>
<td>↖</td>
<td><code>:arrow_upper_left:</code></td>
</tr>
<tr>
<td>↗</td>
<td><code>:arrow_upper_right:</code></td>
<td>⏬</td>
<td><code>:arrow_double_down:</code></td>
</tr>
<tr>
<td>⏫</td>
<td><code>:arrow_double_up:</code></td>
<td>🔽</td>
<td><code>:arrow_down_small:</code></td>
</tr>
<tr>
<td>⤵</td>
<td><code>:arrow_heading_down:</code></td>
<td>⤴</td>
<td><code>:arrow_heading_up:</code></td>
</tr>
<tr>
<td>↩</td>
<td><code>:leftwards_arrow_with_hook:</code></td>
<td>↪</td>
<td><code>:arrow_right_hook:</code></td>
</tr>
<tr>
<td>↔</td>
<td><code>:left_right_arrow:</code></td>
<td>↕</td>
<td><code>:arrow_up_down:</code></td>
</tr>
<tr>
<td>🔼</td>
<td><code>:arrow_up_small:</code></td>
<td>🔃</td>
<td><code>:arrows_clockwise:</code></td>
</tr>
<tr>
<td>🔄</td>
<td><code>:arrows_counterclockwise:</code></td>
<td>⏪</td>
<td><code>:rewind:</code></td>
</tr>
<tr>
<td>⏩</td>
<td><code>:fast_forward:</code></td>
<td>ℹ</td>
<td><code>:information_source:</code></td>
</tr>
<tr>
<td>🆗</td>
<td><code>:ok:</code></td>
<td>🔀</td>
<td><code>:twisted_rightwards_arrows:</code></td>
</tr>
<tr>
<td>🔁</td>
<td><code>:repeat:</code></td>
<td>🔂</td>
<td><code>:repeat_one:</code></td>
</tr>
<tr>
<td>🆕</td>
<td><code>:new:</code></td>
<td>🔝</td>
<td><code>:top:</code></td>
</tr>
<tr>
<td>🆙</td>
<td><code>:up:</code></td>
<td>🆒</td>
<td><code>:cool:</code></td>
</tr>
<tr>
<td>🆓</td>
<td><code>:free:</code></td>
<td>🆖</td>
<td><code>:ng:</code></td>
</tr>
<tr>
<td>🎦</td>
<td><code>:cinema:</code></td>
<td>🈁</td>
<td><code>:koko:</code></td>
</tr>
<tr>
<td>📶</td>
<td><code>:signal_strength:</code></td>
<td>🈹</td>
<td><code>:u5272:</code></td>
</tr>
<tr>
<td>🈴</td>
<td><code>:u5408:</code></td>
<td>🈺</td>
<td><code>:u55b6:</code></td>
</tr>
<tr>
<td>🈯</td>
<td><code>:u6307:</code></td>
<td>🈷</td>
<td><code>:u6708:</code></td>
</tr>
<tr>
<td>🈶</td>
<td><code>:u6709:</code></td>
<td>🈵</td>
<td><code>:u6e80:</code></td>
</tr>
<tr>
<td>🈚</td>
<td><code>:u7121:</code></td>
<td>🈸</td>
<td><code>:u7533:</code></td>
</tr>
<tr>
<td>🈳</td>
<td><code>:u7a7a:</code></td>
<td>🈲</td>
<td><code>:u7981:</code></td>
</tr>
<tr>
<td>🈂</td>
<td><code>:sa:</code></td>
<td>🚻</td>
<td><code>:restroom:</code></td>
</tr>
<tr>
<td>🚹</td>
<td><code>:mens:</code></td>
<td>🚺</td>
<td><code>:womens:</code></td>
</tr>
<tr>
<td>🚼</td>
<td><code>:baby_symbol:</code></td>
<td>🚭</td>
<td><code>:no_smoking:</code></td>
</tr>
<tr>
<td>🅿</td>
<td><code>:parking:</code></td>
<td>♿</td>
<td><code>:wheelchair:</code></td>
</tr>
<tr>
<td>🚇</td>
<td><code>:metro:</code></td>
<td>🛄</td>
<td><code>:baggage_claim:</code></td>
</tr>
<tr>
<td>🉑</td>
<td><code>:accept:</code></td>
<td>🚾</td>
<td><code>:wc:</code></td>
</tr>
<tr>
<td>🚰</td>
<td><code>:potable_water:</code></td>
<td>🚮</td>
<td><code>:put_litter_in_its_place:</code></td>
</tr>
<tr>
<td>㊙</td>
<td><code>:secret:</code></td>
<td>㊗</td>
<td><code>:congratulations:</code></td>
</tr>
<tr>
<td>Ⓜ</td>
<td><code>:m:</code></td>
<td>🛂</td>
<td><code>:passport_control:</code></td>
</tr>
<tr>
<td>🛅</td>
<td><code>:left_luggage:</code></td>
<td>🛃</td>
<td><code>:customs:</code></td>
</tr>
<tr>
<td>🉐</td>
<td><code>:ideograph_advantage:</code></td>
<td>🆑</td>
<td><code>:cl:</code></td>
</tr>
<tr>
<td>🆘</td>
<td><code>:sos:</code></td>
<td>🆔</td>
<td><code>:id:</code></td>
</tr>
<tr>
<td>🚫</td>
<td><code>:no_entry_sign:</code></td>
<td>🔞</td>
<td><code>:underage:</code></td>
</tr>
<tr>
<td>📵</td>
<td><code>:no_mobile_phones:</code></td>
<td>🚯</td>
<td><code>:do_not_litter:</code></td>
</tr>
<tr>
<td>:non-potable_water:</td>
<td><code>:non-potable_water:</code></td>
<td>🚳</td>
<td><code>:no_bicycles:</code></td>
</tr>
<tr>
<td>🚷</td>
<td><code>:no_pedestrians:</code></td>
<td>🚸</td>
<td><code>:children_crossing:</code></td>
</tr>
<tr>
<td>⛔</td>
<td><code>:no_entry:</code></td>
<td>✳</td>
<td><code>:eight_spoked_asterisk:</code></td>
</tr>
<tr>
<td>❇</td>
<td><code>:sparkle:</code></td>
<td>✴</td>
<td><code>:eight_pointed_black_star:</code></td>
</tr>
<tr>
<td>💟</td>
<td><code>:heart_decoration:</code></td>
<td>🆚</td>
<td><code>:vs:</code></td>
</tr>
<tr>
<td>📳</td>
<td><code>:vibration_mode:</code></td>
<td>📴</td>
<td><code>:mobile_phone_off:</code></td>
</tr>
<tr>
<td>💹</td>
<td><code>:chart:</code></td>
<td>💱</td>
<td><code>:currency_exchange:</code></td>
</tr>
<tr>
<td>♈</td>
<td><code>:aries:</code></td>
<td>♉</td>
<td><code>:taurus:</code></td>
</tr>
<tr>
<td>♊</td>
<td><code>:gemini:</code></td>
<td>♋</td>
<td><code>:cancer:</code></td>
</tr>
<tr>
<td>♌</td>
<td><code>:leo:</code></td>
<td>♍</td>
<td><code>:virgo:</code></td>
</tr>
<tr>
<td>♎</td>
<td><code>:libra:</code></td>
<td>♏</td>
<td><code>:scorpius:</code></td>
</tr>
<tr>
<td>♐</td>
<td><code>:sagittarius:</code></td>
<td>♑</td>
<td><code>:capricorn:</code></td>
</tr>
<tr>
<td>♒</td>
<td><code>:aquarius:</code></td>
<td>♓</td>
<td><code>:pisces:</code></td>
</tr>
<tr>
<td>⛎</td>
<td><code>:ophiuchus:</code></td>
<td>🔯</td>
<td><code>:six_pointed_star:</code></td>
</tr>
<tr>
<td>❎</td>
<td><code>:negative_squared_cross_mark:</code></td>
<td>🅰</td>
<td><code>:a:</code></td>
</tr>
<tr>
<td>🅱</td>
<td><code>:b:</code></td>
<td>🆎</td>
<td><code>:ab:</code></td>
</tr>
<tr>
<td>🅾</td>
<td><code>:o2:</code></td>
<td>💠</td>
<td><code>:diamond_shape_with_a_dot_inside:</code></td>
</tr>
<tr>
<td>♻</td>
<td><code>:recycle:</code></td>
<td>🔚</td>
<td><code>:end:</code></td>
</tr>
<tr>
<td>🔙</td>
<td><code>:back:</code></td>
<td>🔛</td>
<td><code>:on:</code></td>
</tr>
<tr>
<td>🔜</td>
<td><code>:soon:</code></td>
<td>🕐</td>
<td><code>:clock1:</code></td>
</tr>
<tr>
<td>🕜</td>
<td><code>:clock130:</code></td>
<td>🕙</td>
<td><code>:clock10:</code></td>
</tr>
<tr>
<td>🕥</td>
<td><code>:clock1030:</code></td>
<td>🕚</td>
<td><code>:clock11:</code></td>
</tr>
<tr>
<td>🕦</td>
<td><code>:clock1130:</code></td>
<td>🕛</td>
<td><code>:clock12:</code></td>
</tr>
<tr>
<td>🕧</td>
<td><code>:clock1230:</code></td>
<td>🕑</td>
<td><code>:clock2:</code></td>
</tr>
<tr>
<td>🕝</td>
<td><code>:clock230:</code></td>
<td>🕒</td>
<td><code>:clock3:</code></td>
</tr>
<tr>
<td>🕞</td>
<td><code>:clock330:</code></td>
<td>🕓</td>
<td><code>:clock4:</code></td>
</tr>
<tr>
<td>🕟</td>
<td><code>:clock430:</code></td>
<td>🕔</td>
<td><code>:clock5:</code></td>
</tr>
<tr>
<td>🕠</td>
<td><code>:clock530:</code></td>
<td>🕕</td>
<td><code>:clock6:</code></td>
</tr>
<tr>
<td>🕡</td>
<td><code>:clock630:</code></td>
<td>🕖</td>
<td><code>:clock7:</code></td>
</tr>
<tr>
<td>🕢</td>
<td><code>:clock730:</code></td>
<td>🕗</td>
<td><code>:clock8:</code></td>
</tr>
<tr>
<td>🕣</td>
<td><code>:clock830:</code></td>
<td>🕘</td>
<td><code>:clock9:</code></td>
</tr>
<tr>
<td>🕤</td>
<td><code>:clock930:</code></td>
<td>💲</td>
<td><code>:heavy_dollar_sign:</code></td>
</tr>
<tr>
<td>©</td>
<td><code>:copyright:</code></td>
<td>®</td>
<td><code>:registered:</code></td>
</tr>
<tr>
<td>™</td>
<td><code>:tm:</code></td>
<td>❌</td>
<td><code>:x:</code></td>
</tr>
<tr>
<td>❗</td>
<td><code>:heavy_exclamation_mark:</code></td>
<td>‼</td>
<td><code>:bangbang:</code></td>
</tr>
<tr>
<td>⁉</td>
<td><code>:interrobang:</code></td>
<td>⭕</td>
<td><code>:o:</code></td>
</tr>
<tr>
<td>✖</td>
<td><code>:heavy_multiplication_x:</code></td>
<td>➕</td>
<td><code>:heavy_plus_sign:</code></td>
</tr>
<tr>
<td>➖</td>
<td><code>:heavy_minus_sign:</code></td>
<td>➗</td>
<td><code>:heavy_division_sign:</code></td>
</tr>
<tr>
<td>💮</td>
<td><code>:white_flower:</code></td>
<td>💯</td>
<td><code>:100:</code></td>
</tr>
<tr>
<td>✔</td>
<td><code>:heavy_check_mark:</code></td>
<td>☑</td>
<td><code>:ballot_box_with_check:</code></td>
</tr>
<tr>
<td>🔘</td>
<td><code>:radio_button:</code></td>
<td>🔗</td>
<td><code>:link:</code></td>
</tr>
<tr>
<td>➰</td>
<td><code>:curly_loop:</code></td>
<td>〰</td>
<td><code>:wavy_dash:</code></td>
</tr>
<tr>
<td>〽</td>
<td><code>:part_alternation_mark:</code></td>
<td>🔱</td>
<td><code>:trident:</code></td>
</tr>
<tr>
<td>▪</td>
<td><code>:black_small_square:</code></td>
<td>▫</td>
<td><code>:white_small_square:</code></td>
</tr>
<tr>
<td>◾</td>
<td><code>:black_medium_small_square:</code></td>
<td>◽</td>
<td><code>:white_medium_small_square:</code></td>
</tr>
<tr>
<td>◼</td>
<td><code>:black_medium_square:</code></td>
<td>◻</td>
<td><code>:white_medium_square:</code></td>
</tr>
<tr>
<td>⬛</td>
<td><code>:black_large_square:</code></td>
<td>⬜</td>
<td><code>:white_large_square:</code></td>
</tr>
<tr>
<td>✅</td>
<td><code>:white_check_mark:</code></td>
<td>🔲</td>
<td><code>:black_square_button:</code></td>
</tr>
<tr>
<td>🔳</td>
<td><code>:white_square_button:</code></td>
<td>⚫</td>
<td><code>:black_circle:</code></td>
</tr>
<tr>
<td>⚪</td>
<td><code>:white_circle:</code></td>
<td>🔴</td>
<td><code>:red_circle:</code></td>
</tr>
<tr>
<td>🔵</td>
<td><code>:large_blue_circle:</code></td>
<td>🔷</td>
<td><code>:large_blue_diamond:</code></td>
</tr>
<tr>
<td>🔶</td>
<td><code>:large_orange_diamond:</code></td>
<td>🔹</td>
<td><code>:small_blue_diamond:</code></td>
</tr>
<tr>
<td>🔸</td>
<td><code>:small_orange_diamond:</code></td>
<td>🔺</td>
<td><code>:small_red_triangle:</code></td>
</tr>
<tr>
<td>🔻</td>
<td><code>:small_red_triangle_down:</code></td>
<td></td>
<td><code>:shipit:</code></td>
</tr>
</tbody></table>
<h3 id="Uncategorized"><a href="#Uncategorized" class="headerlink" title="Uncategorized"></a>Uncategorized</h3><hr>
<table>
<thead>
<tr>
<th>ico</th>
<th>emoji</th>
<th>ico</th>
<th>emoji</th>
</tr>
</thead>
<tbody><tr>
<td>🥇</td>
<td><code>:1st_place_medal:</code></td>
<td>🥈</td>
<td><code>:2nd_place_medal:</code></td>
</tr>
<tr>
<td>🥉</td>
<td><code>:3rd_place_medal:</code></td>
<td>🇦🇫</td>
<td><code>:afghanistan:</code></td>
</tr>
<tr>
<td>🇦🇽</td>
<td><code>:aland_islands:</code></td>
<td>🇦🇱</td>
<td><code>:albania:</code></td>
</tr>
<tr>
<td>⚗</td>
<td><code>:alembic:</code></td>
<td>🇩🇿</td>
<td><code>:algeria:</code></td>
</tr>
<tr>
<td>🇦🇸</td>
<td><code>:american_samoa:</code></td>
<td>🏺</td>
<td><code>:amphora:</code></td>
</tr>
<tr>
<td>🇦🇩</td>
<td><code>:andorra:</code></td>
<td>🇦🇴</td>
<td><code>:angola:</code></td>
</tr>
<tr>
<td>🇦🇮</td>
<td><code>:anguilla:</code></td>
<td>🇦🇶</td>
<td><code>:antarctica:</code></td>
</tr>
<tr>
<td>🇦🇬</td>
<td><code>:antigua_barbuda:</code></td>
<td>🇦🇷</td>
<td><code>:argentina:</code></td>
</tr>
<tr>
<td>🇦🇲</td>
<td><code>:armenia:</code></td>
<td>🛰</td>
<td><code>:artificial_satellite:</code></td>
</tr>
<tr>
<td>🇦🇼</td>
<td><code>:aruba:</code></td>
<td>*⃣</td>
<td><code>:asterisk:</code></td>
</tr>
<tr>
<td>👟</td>
<td><code>:athletic_shoe:</code></td>
<td></td>
<td><code>:atom:</code></td>
</tr>
<tr>
<td>⚛</td>
<td><code>:atom_symbol:</code></td>
<td>🇦🇺</td>
<td><code>:australia:</code></td>
</tr>
<tr>
<td>🇦🇹</td>
<td><code>:austria:</code></td>
<td>🥑</td>
<td><code>:avocado:</code></td>
</tr>
<tr>
<td>🇦🇿</td>
<td><code>:azerbaijan:</code></td>
<td>🥓</td>
<td><code>:bacon:</code></td>
</tr>
<tr>
<td>🏸</td>
<td><code>:badminton:</code></td>
<td>🥖</td>
<td><code>:baguette_bread:</code></td>
</tr>
<tr>
<td>🇧🇸</td>
<td><code>:bahamas:</code></td>
<td>🇧🇭</td>
<td><code>:bahrain:</code></td>
</tr>
<tr>
<td>⚖</td>
<td><code>:balance_scale:</code></td>
<td>🗳</td>
<td><code>:ballot_box:</code></td>
</tr>
<tr>
<td>🇧🇩</td>
<td><code>:bangladesh:</code></td>
<td>🇧🇧</td>
<td><code>:barbados:</code></td>
</tr>
<tr>
<td>⛹</td>
<td><code>:basketball_man:</code></td>
<td>⛹♀</td>
<td><code>:basketball_woman:</code></td>
</tr>
<tr>
<td>🦇</td>
<td><code>:bat:</code></td>
<td>🏖</td>
<td><code>:beach_umbrella:</code></td>
</tr>
<tr>
<td>🛏</td>
<td><code>:bed:</code></td>
<td>🐝</td>
<td><code>:bee:</code></td>
</tr>
<tr>
<td>🇧🇾</td>
<td><code>:belarus:</code></td>
<td>🇧🇪</td>
<td><code>:belgium:</code></td>
</tr>
<tr>
<td>🇧🇿</td>
<td><code>:belize:</code></td>
<td>🛎</td>
<td><code>:bellhop_bell:</code></td>
</tr>
<tr>
<td>🇧🇯</td>
<td><code>:benin:</code></td>
<td>🇧🇲</td>
<td><code>:bermuda:</code></td>
</tr>
<tr>
<td>🇧🇹</td>
<td><code>:bhutan:</code></td>
<td>🚴</td>
<td><code>:biking_man:</code></td>
</tr>
<tr>
<td>🚴♀</td>
<td><code>:biking_woman:</code></td>
<td>☣</td>
<td><code>:biohazard:</code></td>
</tr>
<tr>
<td>🏴</td>
<td><code>:black_flag:</code></td>
<td>🖤</td>
<td><code>:black_heart:</code></td>
</tr>
<tr>
<td>👱</td>
<td><code>:blonde_man:</code></td>
<td>👱♀</td>
<td><code>:blonde_woman:</code></td>
</tr>
<tr>
<td>🇧🇴</td>
<td><code>:bolivia:</code></td>
<td>🇧🇦</td>
<td><code>:bosnia_herzegovina:</code></td>
</tr>
<tr>
<td>🇧🇼</td>
<td><code>:botswana:</code></td>
<td>🏹</td>
<td><code>:bow_and_arrow:</code></td>
</tr>
<tr>
<td>🙇</td>
<td><code>:bowing_man:</code></td>
<td>🙇♀</td>
<td><code>:bowing_woman:</code></td>
</tr>
<tr>
<td>🥊</td>
<td><code>:boxing_glove:</code></td>
<td>🇧🇷</td>
<td><code>:brazil:</code></td>
</tr>
<tr>
<td>🇮🇴</td>
<td><code>:british_indian_ocean_territory:</code></td>
<td>🇻🇬</td>
<td><code>:british_virgin_islands:</code></td>
</tr>
<tr>
<td>🇧🇳</td>
<td><code>:brunei:</code></td>
<td>🏗</td>
<td><code>:building_construction:</code></td>
</tr>
<tr>
<td>🇧🇬</td>
<td><code>:bulgaria:</code></td>
<td>🇧🇫</td>
<td><code>:burkina_faso:</code></td>
</tr>
<tr>
<td>🌯</td>
<td><code>:burrito:</code></td>
<td>🇧🇮</td>
<td><code>:burundi:</code></td>
</tr>
<tr>
<td>🕴</td>
<td><code>:business_suit_levitating:</code></td>
<td>🦋</td>
<td><code>:butterfly:</code></td>
</tr>
<tr>
<td>🤙</td>
<td><code>:call_me_hand:</code></td>
<td>🇰🇭</td>
<td><code>:cambodia:</code></td>
</tr>
<tr>
<td>📸</td>
<td><code>:camera_flash:</code></td>
<td>🇨🇲</td>
<td><code>:cameroon:</code></td>
</tr>
<tr>
<td>🏕</td>
<td><code>:camping:</code></td>
<td>🇨🇦</td>
<td><code>:canada:</code></td>
</tr>
<tr>
<td>🇮🇨</td>
<td><code>:canary_islands:</code></td>
<td>🕯</td>
<td><code>:candle:</code></td>
</tr>
<tr>
<td>🛶</td>
<td><code>:canoe:</code></td>
<td>🇨🇻</td>
<td><code>:cape_verde:</code></td>
</tr>
<tr>
<td>🗃</td>
<td><code>:card_file_box:</code></td>
<td>🗂</td>
<td><code>:card_index_dividers:</code></td>
</tr>
<tr>
<td>🇧🇶</td>
<td><code>:caribbean_netherlands:</code></td>
<td>🥕</td>
<td><code>:carrot:</code></td>
</tr>
<tr>
<td>🇰🇾</td>
<td><code>:cayman_islands:</code></td>
<td>🇨🇫</td>
<td><code>:central_african_republic:</code></td>
</tr>
<tr>
<td>🇹🇩</td>
<td><code>:chad:</code></td>
<td>⛓</td>
<td><code>:chains:</code></td>
</tr>
<tr>
<td>🍾</td>
<td><code>:champagne:</code></td>
<td>🧀</td>
<td><code>:cheese:</code></td>
</tr>
<tr>
<td>🇨🇱</td>
<td><code>:chile:</code></td>
<td>🐿</td>
<td><code>:chipmunk:</code></td>
</tr>
<tr>
<td>🇨🇽</td>
<td><code>:christmas_island:</code></td>
<td>🏙</td>
<td><code>:cityscape:</code></td>
</tr>
<tr>
<td>🗜</td>
<td><code>:clamp:</code></td>
<td>🏛</td>
<td><code>:classical_building:</code></td>
</tr>
<tr>
<td>🥂</td>
<td><code>:clinking_glasses:</code></td>
<td>🌩</td>
<td><code>:cloud_with_lightning:</code></td>
</tr>
<tr>
<td>⛈</td>
<td><code>:cloud_with_lightning_and_rain:</code></td>
<td>🌧</td>
<td><code>:cloud_with_rain:</code></td>
</tr>
<tr>
<td>🌨</td>
<td><code>:cloud_with_snow:</code></td>
<td>🤡</td>
<td><code>:clown_face:</code></td>
</tr>
<tr>
<td>🇨🇨</td>
<td><code>:cocos_islands:</code></td>
<td>⚰</td>
<td><code>:coffin:</code></td>
</tr>
<tr>
<td>🇨🇴</td>
<td><code>:colombia:</code></td>
<td>☄</td>
<td><code>:comet:</code></td>
</tr>
<tr>
<td>🇰🇲</td>
<td><code>:comoros:</code></td>
<td>🖱</td>
<td><code>:computer_mouse:</code></td>
</tr>
<tr>
<td>🇨🇬</td>
<td><code>:congo_brazzaville:</code></td>
<td>🇨🇩</td>
<td><code>:congo_kinshasa:</code></td>
</tr>
<tr>
<td>👷</td>
<td><code>:construction_worker_man:</code></td>
<td>👷♀</td>
<td><code>:construction_worker_woman:</code></td>
</tr>
<tr>
<td>🎛</td>
<td><code>:control_knobs:</code></td>
<td>🇨🇰</td>
<td><code>:cook_islands:</code></td>
</tr>
<tr>
<td>🇨🇷</td>
<td><code>:costa_rica:</code></td>
<td>🇨🇮</td>
<td><code>:cote_divoire:</code></td>
</tr>
<tr>
<td>🛋</td>
<td><code>:couch_and_lamp:</code></td>
<td>👨❤👨</td>
<td><code>:couple_with_heart_man_man:</code></td>
</tr>
<tr>
<td>💑</td>
<td><code>:couple_with_heart_woman_man:</code></td>
<td>👩❤👩</td>
<td><code>:couple_with_heart_woman_woman:</code></td>
</tr>
<tr>
<td>👨❤💋👨</td>
<td><code>:couplekiss_man_man:</code></td>
<td>💏</td>
<td><code>:couplekiss_man_woman:</code></td>
</tr>
<tr>
<td>👩❤💋👩</td>
<td><code>:couplekiss_woman_woman:</code></td>
<td>🤠</td>
<td><code>:cowboy_hat_face:</code></td>
</tr>
<tr>
<td>🦀</td>
<td><code>:crab:</code></td>
<td>🖍</td>
<td><code>:crayon:</code></td>
</tr>
<tr>
<td>🏏</td>
<td><code>:cricket:</code></td>
<td>🇭🇷</td>
<td><code>:croatia:</code></td>
</tr>
<tr>
<td>🥐</td>
<td><code>:croissant:</code></td>
<td>🤞</td>
<td><code>:crossed_fingers:</code></td>
</tr>
<tr>
<td>⚔</td>
<td><code>:crossed_swords:</code></td>
<td>🇨🇺</td>
<td><code>:cuba:</code></td>
</tr>
<tr>
<td>🥒</td>
<td><code>:cucumber:</code></td>
<td>🇨🇼</td>
<td><code>:curacao:</code></td>
</tr>
<tr>
<td>🇨🇾</td>
<td><code>:cyprus:</code></td>
<td>🇨🇿</td>
<td><code>:czech_republic:</code></td>
</tr>
<tr>
<td>🗡</td>
<td><code>:dagger:</code></td>
<td>👯♂</td>
<td><code>:dancing_men:</code></td>
</tr>
<tr>
<td>👯</td>
<td><code>:dancing_women:</code></td>
<td>🕶</td>
<td><code>:dark_sunglasses:</code></td>
</tr>
<tr>
<td>🦌</td>
<td><code>:deer:</code></td>
<td>🇩🇰</td>
<td><code>:denmark:</code></td>
</tr>
<tr>
<td>🏚</td>
<td><code>:derelict_house:</code></td>
<td>🏜</td>
<td><code>:desert:</code></td>
</tr>
<tr>
<td>🏝</td>
<td><code>:desert_island:</code></td>
<td>🖥</td>
<td><code>:desktop_computer:</code></td>
</tr>
<tr>
<td>🕵</td>
<td><code>:detective:</code></td>
<td>🇩🇯</td>
<td><code>:djibouti:</code></td>
</tr>
<tr>
<td>🇩🇲</td>
<td><code>:dominica:</code></td>
<td>🇩🇴</td>
<td><code>:dominican_republic:</code></td>
</tr>
<tr>
<td>🕊</td>
<td><code>:dove:</code></td>
<td>🤤</td>
<td><code>:drooling_face:</code></td>
</tr>
<tr>
<td>🥁</td>
<td><code>:drum:</code></td>
<td>🦆</td>
<td><code>:duck:</code></td>
</tr>
<tr>
<td>🦅</td>
<td><code>:eagle:</code></td>
<td>🇪🇨</td>
<td><code>:ecuador:</code></td>
</tr>
<tr>
<td>🇪🇬</td>
<td><code>:egypt:</code></td>
<td>🇸🇻</td>
<td><code>:el_salvador:</code></td>
</tr>
<tr>
<td></td>
<td><code>:electron:</code></td>
<td>📩</td>
<td><code>:envelope_with_arrow:</code></td>
</tr>
<tr>
<td>🇬🇶</td>
<td><code>:equatorial_guinea:</code></td>
<td>🇪🇷</td>
<td><code>:eritrea:</code></td>
</tr>
<tr>
<td>🇪🇪</td>
<td><code>:estonia:</code></td>
<td>🇪🇹</td>
<td><code>:ethiopia:</code></td>
</tr>
<tr>
<td>🇪🇺</td>
<td><code>:eu:</code></td>
<td>🇪🇺</td>
<td><code>:european_union:</code></td>
</tr>
<tr>
<td>👁</td>
<td><code>:eye:</code></td>
<td>👁🗨</td>
<td><code>:eye_speech_bubble:</code></td>
</tr>
<tr>
<td>🤕</td>
<td><code>:face_with_head_bandage:</code></td>
<td>🤒</td>
<td><code>:face_with_thermometer:</code></td>
</tr>
<tr>
<td>🇫🇰</td>
<td><code>:falkland_islands:</code></td>
<td>👨👦</td>
<td><code>:family_man_boy:</code></td>
</tr>
<tr>
<td>👨👦👦</td>
<td><code>:family_man_boy_boy:</code></td>
<td>👨👧</td>
<td><code>:family_man_girl:</code></td>
</tr>
<tr>
<td>👨👧👦</td>
<td><code>:family_man_girl_boy:</code></td>
<td>👨👧👧</td>
<td><code>:family_man_girl_girl:</code></td>
</tr>
<tr>
<td>👨👨👦</td>
<td><code>:family_man_man_boy:</code></td>
<td>👨👨👦👦</td>
<td><code>:family_man_man_boy_boy:</code></td>
</tr>
<tr>
<td>👨👨👧</td>
<td><code>:family_man_man_girl:</code></td>
<td>👨👨👧👦</td>
<td><code>:family_man_man_girl_boy:</code></td>
</tr>
<tr>
<td>👨👨👧👧</td>
<td><code>:family_man_man_girl_girl:</code></td>
<td>👪</td>
<td><code>:family_man_woman_boy:</code></td>
</tr>
<tr>
<td>👨👩👦👦</td>
<td><code>:family_man_woman_boy_boy:</code></td>
<td>👨👩👧</td>
<td><code>:family_man_woman_girl:</code></td>
</tr>
<tr>
<td>👨👩👧👦</td>
<td><code>:family_man_woman_girl_boy:</code></td>
<td>👨👩👧👧</td>
<td><code>:family_man_woman_girl_girl:</code></td>
</tr>
<tr>
<td>👩👦</td>
<td><code>:family_woman_boy:</code></td>
<td>👩👦👦</td>
<td><code>:family_woman_boy_boy:</code></td>
</tr>
<tr>
<td>👩👧</td>
<td><code>:family_woman_girl:</code></td>
<td>👩👧👦</td>
<td><code>:family_woman_girl_boy:</code></td>
</tr>
<tr>
<td>👩👧👧</td>
<td><code>:family_woman_girl_girl:</code></td>
<td>👩👩👦</td>
<td><code>:family_woman_woman_boy:</code></td>
</tr>
<tr>
<td>👩👩👦👦</td>
<td><code>:family_woman_woman_boy_boy:</code></td>
<td>👩👩👧</td>
<td><code>:family_woman_woman_girl:</code></td>
</tr>
<tr>
<td>👩👩👧👦</td>
<td><code>:family_woman_woman_girl_boy:</code></td>
<td>👩👩👧👧</td>
<td><code>:family_woman_woman_girl_girl:</code></td>
</tr>
<tr>
<td>🇫🇴</td>
<td><code>:faroe_islands:</code></td>
<td>🕵♀</td>
<td><code>:female_detective:</code></td>
</tr>
<tr>
<td>⛴</td>
<td><code>:ferry:</code></td>
<td>🏑</td>
<td><code>:field_hockey:</code></td>
</tr>
<tr>
<td>🇫🇯</td>
<td><code>:fiji:</code></td>
<td>🗄</td>
<td><code>:file_cabinet:</code></td>
</tr>
<tr>
<td>📽</td>
<td><code>:film_projector:</code></td>
<td>🎞</td>
<td><code>:film_strip:</code></td>
</tr>
<tr>
<td>🇫🇮</td>
<td><code>:finland:</code></td>
<td>🤛</td>
<td><code>:fist_left:</code></td>
</tr>
<tr>
<td>👊</td>
<td><code>:fist_oncoming:</code></td>
<td>✊</td>
<td><code>:fist_raised:</code></td>
</tr>
<tr>
<td>🤜</td>
<td><code>:fist_right:</code></td>
<td>⚜</td>
<td><code>:fleur_de_lis:</code></td>
</tr>
<tr>
<td>🛬</td>
<td><code>:flight_arrival:</code></td>
<td>🛫</td>
<td><code>:flight_departure:</code></td>
</tr>
<tr>
<td>🐬</td>
<td><code>:flipper:</code></td>
<td>🌫</td>
<td><code>:fog:</code></td>
</tr>
<tr>
<td>👣</td>
<td><code>:footprints:</code></td>
<td>🖋</td>
<td><code>:fountain_pen:</code></td>
</tr>
<tr>
<td>🦊</td>
<td><code>:fox_face:</code></td>
<td>🖼</td>
<td><code>:framed_picture:</code></td>
</tr>
<tr>
<td>🇬🇫</td>
<td><code>:french_guiana:</code></td>
<td>🇵🇫</td>
<td><code>:french_polynesia:</code></td>
</tr>
<tr>
<td>🇹🇫</td>
<td><code>:french_southern_territories:</code></td>
<td>🍳</td>
<td><code>:fried_egg:</code></td>
</tr>
<tr>
<td>☹</td>
<td><code>:frowning_face:</code></td>
<td>🙍♂</td>
<td><code>:frowning_man:</code></td>
</tr>
<tr>
<td>🙍</td>
<td><code>:frowning_woman:</code></td>
<td>⚱</td>
<td><code>:funeral_urn:</code></td>
</tr>
<tr>
<td>🇬🇦</td>
<td><code>:gabon:</code></td>
<td>🇬🇲</td>
<td><code>:gambia:</code></td>
</tr>
<tr>
<td>⚙</td>
<td><code>:gear:</code></td>
<td>🇬🇪</td>
<td><code>:georgia:</code></td>
</tr>
<tr>
<td>🇬🇭</td>
<td><code>:ghana:</code></td>
<td>🇬🇮</td>
<td><code>:gibraltar:</code></td>
</tr>
<tr>
<td>🥅</td>
<td><code>:goal_net:</code></td>
<td>🏌</td>
<td><code>:golfing_man:</code></td>
</tr>
<tr>
<td>🏌♀</td>
<td><code>:golfing_woman:</code></td>
<td>🦍</td>
<td><code>:gorilla:</code></td>
</tr>
<tr>
<td>🇬🇷</td>
<td><code>:greece:</code></td>
<td>🥗</td>
<td><code>:green_salad:</code></td>
</tr>
<tr>
<td>🇬🇱</td>
<td><code>:greenland:</code></td>
<td>🇬🇩</td>
<td><code>:grenada:</code></td>
</tr>
<tr>
<td>🇬🇵</td>
<td><code>:guadeloupe:</code></td>
<td>🇬🇺</td>
<td><code>:guam:</code></td>
</tr>
<tr>
<td>💂♀</td>
<td><code>:guardswoman:</code></td>
<td>🇬🇹</td>
<td><code>:guatemala:</code></td>
</tr>
<tr>
<td>🇬🇬</td>
<td><code>:guernsey:</code></td>
<td>🇬🇳</td>
<td><code>:guinea:</code></td>
</tr>
<tr>
<td>🇬🇼</td>
<td><code>:guinea_bissau:</code></td>
<td>🇬🇾</td>
<td><code>:guyana:</code></td>
</tr>
<tr>
<td>💇♂</td>
<td><code>:haircut_man:</code></td>
<td>💇</td>
<td><code>:haircut_woman:</code></td>
</tr>
<tr>
<td>🇭🇹</td>
<td><code>:haiti:</code></td>
<td>⚒</td>
<td><code>:hammer_and_pick:</code></td>
</tr>
<tr>
<td>🛠</td>
<td><code>:hammer_and_wrench:</code></td>
<td>🤝</td>
<td><code>:handshake:</code></td>
</tr>
<tr>
<td>❣</td>
<td><code>:heavy_heart_exclamation:</code></td>
<td>🕳</td>
<td><code>:hole:</code></td>
</tr>
<tr>
<td>🇭🇳</td>
<td><code>:honduras:</code></td>
<td>🇭🇰</td>
<td><code>:hong_kong:</code></td>
</tr>
<tr>
<td>🌶</td>
<td><code>:hot_pepper:</code></td>
<td>🌭</td>
<td><code>:hotdog:</code></td>
</tr>
<tr>
<td>🏘</td>
<td><code>:houses:</code></td>
<td>🤗</td>
<td><code>:hugs:</code></td>
</tr>
<tr>
<td>🇭🇺</td>
<td><code>:hungary:</code></td>
<td>🏒</td>
<td><code>:ice_hockey:</code></td>
</tr>
<tr>
<td>⛸</td>
<td><code>:ice_skate:</code></td>
<td>🇮🇸</td>
<td><code>:iceland:</code></td>
</tr>
<tr>
<td>🇮🇳</td>
<td><code>:india:</code></td>
<td>🇮🇩</td>
<td><code>:indonesia:</code></td>
</tr>
<tr>
<td>🇮🇷</td>
<td><code>:iran:</code></td>
<td>🇮🇶</td>
<td><code>:iraq:</code></td>
</tr>
<tr>
<td>🇮🇪</td>
<td><code>:ireland:</code></td>
<td>🇮🇲</td>
<td><code>:isle_of_man:</code></td>
</tr>
<tr>
<td>🇮🇱</td>
<td><code>:israel:</code></td>
<td>🇯🇲</td>
<td><code>:jamaica:</code></td>
</tr>
<tr>
<td>🇯🇪</td>
<td><code>:jersey:</code></td>
<td>🇯🇴</td>
<td><code>:jordan:</code></td>
</tr>
<tr>
<td>🕹</td>
<td><code>:joystick:</code></td>
<td>🕋</td>
<td><code>:kaaba:</code></td>
</tr>
<tr>
<td>🇰🇿</td>
<td><code>:kazakhstan:</code></td>
<td>🇰🇪</td>
<td><code>:kenya:</code></td>
</tr>
<tr>
<td>⌨</td>
<td><code>:keyboard:</code></td>
<td>🛴</td>
<td><code>:kick_scooter:</code></td>
</tr>
<tr>
<td>🇰🇮</td>
<td><code>:kiribati:</code></td>
<td>🥝</td>
<td><code>:kiwi_fruit:</code></td>
</tr>
<tr>
<td>🔪</td>
<td><code>:knife:</code></td>
<td>🇽🇰</td>
<td><code>:kosovo:</code></td>
</tr>
<tr>
<td>🇰🇼</td>
<td><code>:kuwait:</code></td>
<td>🇰🇬</td>
<td><code>:kyrgyzstan:</code></td>
</tr>
<tr>
<td>🏷</td>
<td><code>:label:</code></td>
<td>🏮</td>
<td><code>:lantern:</code></td>
</tr>
<tr>
<td>🇱🇦</td>
<td><code>:laos:</code></td>
<td>✝</td>
<td><code>:latin_cross:</code></td>
</tr>
<tr>
<td>🇱🇻</td>
<td><code>:latvia:</code></td>
<td>🇱🇧</td>
<td><code>:lebanon:</code></td>
</tr>
<tr>
<td>🇱🇸</td>
<td><code>:lesotho:</code></td>
<td>🎚</td>
<td><code>:level_slider:</code></td>
</tr>
<tr>
<td>🇱🇷</td>
<td><code>:liberia:</code></td>
<td>🇱🇾</td>
<td><code>:libya:</code></td>
</tr>
<tr>
<td>🇱🇮</td>
<td><code>:liechtenstein:</code></td>
<td>🦁</td>
<td><code>:lion:</code></td>
</tr>
<tr>
<td>🇱🇹</td>
<td><code>:lithuania:</code></td>
<td>🦎</td>
<td><code>:lizard:</code></td>
</tr>
<tr>
<td>🔊</td>
<td><code>:loud_sound:</code></td>
<td>🇱🇺</td>
<td><code>:luxembourg:</code></td>
</tr>
<tr>
<td>🤥</td>
<td><code>:lying_face:</code></td>
<td>🇲🇴</td>
<td><code>:macau:</code></td>
</tr>
<tr>
<td>🇲🇰</td>
<td><code>:macedonia:</code></td>
<td>🇲🇬</td>
<td><code>:madagascar:</code></td>
</tr>
<tr>
<td>🇲🇼</td>
<td><code>:malawi:</code></td>
<td>🇲🇾</td>
<td><code>:malaysia:</code></td>
</tr>
<tr>
<td>🇲🇻</td>
<td><code>:maldives:</code></td>
<td>🕵</td>
<td><code>:male_detective:</code></td>
</tr>
<tr>
<td>🇲🇱</td>
<td><code>:mali:</code></td>
<td>🇲🇹</td>
<td><code>:malta:</code></td>
</tr>
<tr>
<td>👨🎨</td>
<td><code>:man_artist:</code></td>
<td>👨🚀</td>
<td><code>:man_astronaut:</code></td>
</tr>
<tr>
<td>🤸♂</td>
<td><code>:man_cartwheeling:</code></td>
<td>👨🍳</td>
<td><code>:man_cook:</code></td>
</tr>
<tr>
<td>🕺</td>
<td><code>:man_dancing:</code></td>
<td>🤦♂</td>
<td><code>:man_facepalming:</code></td>
</tr>
<tr>
<td>👨🏭</td>
<td><code>:man_factory_worker:</code></td>
<td>👨🌾</td>
<td><code>:man_farmer:</code></td>
</tr>
<tr>
<td>👨🚒</td>
<td><code>:man_firefighter:</code></td>
<td>👨⚕</td>
<td><code>:man_health_worker:</code></td>
</tr>
<tr>
<td>🤵</td>
<td><code>:man_in_tuxedo:</code></td>
<td>👨⚖</td>
<td><code>:man_judge:</code></td>
</tr>
<tr>
<td>🤹♂</td>
<td><code>:man_juggling:</code></td>
<td>👨🔧</td>
<td><code>:man_mechanic:</code></td>
</tr>
<tr>
<td>👨💼</td>
<td><code>:man_office_worker:</code></td>
<td>👨✈</td>
<td><code>:man_pilot:</code></td>
</tr>
<tr>
<td>🤾♂</td>
<td><code>:man_playing_handball:</code></td>
<td>🤽♂</td>
<td><code>:man_playing_water_polo:</code></td>
</tr>
<tr>
<td>👨🔬</td>
<td><code>:man_scientist:</code></td>
<td>🤷♂</td>
<td><code>:man_shrugging:</code></td>
</tr>
<tr>
<td>👨🎤</td>
<td><code>:man_singer:</code></td>
<td>👨🎓</td>
<td><code>:man_student:</code></td>
</tr>
<tr>
<td>👨🏫</td>
<td><code>:man_teacher:</code></td>
<td>👨💻</td>
<td><code>:man_technologist:</code></td>
</tr>
<tr>
<td>🍊</td>
<td><code>:mandarin:</code></td>
<td>🕰</td>
<td><code>:mantelpiece_clock:</code></td>
</tr>
<tr>
<td>🇲🇭</td>
<td><code>:marshall_islands:</code></td>
<td>🥋</td>
<td><code>:martial_arts_uniform:</code></td>
</tr>
<tr>
<td>🇲🇶</td>
<td><code>:martinique:</code></td>
<td>💆♂</td>
<td><code>:massage_man:</code></td>
</tr>
<tr>
<td>💆</td>
<td><code>:massage_woman:</code></td>
<td>🇲🇷</td>
<td><code>:mauritania:</code></td>
</tr>
<tr>
<td>🇲🇺</td>
<td><code>:mauritius:</code></td>
<td>🇾🇹</td>
<td><code>:mayotte:</code></td>
</tr>
<tr>
<td>🎖</td>
<td><code>:medal_military:</code></td>
<td>🏅</td>
<td><code>:medal_sports:</code></td>
</tr>
<tr>
<td>🤼♂</td>
<td><code>:men_wrestling:</code></td>
<td>🕎</td>
<td><code>:menorah:</code></td>
</tr>
<tr>
<td>🇲🇽</td>
<td><code>:mexico:</code></td>
<td>🇫🇲</td>
<td><code>:micronesia:</code></td>
</tr>
<tr>
<td>🖕</td>
<td><code>:middle_finger:</code></td>
<td>🥛</td>
<td><code>:milk_glass:</code></td>
</tr>
<tr>
<td>🇲🇩</td>
<td><code>:moldova:</code></td>
<td>🇲🇨</td>
<td><code>:monaco:</code></td>
</tr>
<tr>
<td>🤑</td>
<td><code>:money_mouth_face:</code></td>
<td>🇲🇳</td>
<td><code>:mongolia:</code></td>
</tr>
<tr>
<td>🇲🇪</td>
<td><code>:montenegro:</code></td>
<td>🇲🇸</td>
<td><code>:montserrat:</code></td>
</tr>
<tr>
<td>🌔</td>
<td><code>:moon:</code></td>
<td>🇲🇦</td>
<td><code>:morocco:</code></td>
</tr>
<tr>
<td>🕌</td>
<td><code>:mosque:</code></td>
<td>🛥</td>
<td><code>:motor_boat:</code></td>
</tr>
<tr>
<td>🛵</td>
<td><code>:motor_scooter:</code></td>
<td>🏍</td>
<td><code>:motorcycle:</code></td>
</tr>
<tr>
<td>🛣</td>
<td><code>:motorway:</code></td>
<td>⛰</td>
<td><code>:mountain:</code></td>
</tr>
<tr>
<td>🚵</td>
<td><code>:mountain_biking_man:</code></td>
<td>🚵♀</td>
<td><code>:mountain_biking_woman:</code></td>
</tr>
<tr>
<td>🏔</td>
<td><code>:mountain_snow:</code></td>
<td>🇲🇿</td>
<td><code>:mozambique:</code></td>
</tr>
<tr>
<td>🤶</td>
<td><code>:mrs_claus:</code></td>
<td>🇲🇲</td>
<td><code>:myanmar:</code></td>
</tr>
<tr>
<td>🇳🇦</td>
<td><code>:namibia:</code></td>
<td>🏞</td>
<td><code>:national_park:</code></td>
</tr>
<tr>
<td>🇳🇷</td>
<td><code>:nauru:</code></td>
<td>🤢</td>
<td><code>:nauseated_face:</code></td>
</tr>
<tr>
<td>🇳🇵</td>
<td><code>:nepal:</code></td>
<td>🤓</td>
<td><code>:nerd_face:</code></td>
</tr>
<tr>
<td>🇳🇱</td>
<td><code>:netherlands:</code></td>
<td>🇳🇨</td>
<td><code>:new_caledonia:</code></td>
</tr>
<tr>
<td>🇳🇿</td>
<td><code>:new_zealand:</code></td>
<td>🗞</td>
<td><code>:newspaper_roll:</code></td>
</tr>
<tr>
<td>⏭</td>
<td><code>:next_track_button:</code></td>
<td>🙅♂</td>
<td><code>:ng_man:</code></td>
</tr>
<tr>
<td>🙅</td>
<td><code>:ng_woman:</code></td>
<td>🇳🇮</td>
<td><code>:nicaragua:</code></td>
</tr>
<tr>
<td>🇳🇪</td>
<td><code>:niger:</code></td>
<td>🇳🇬</td>
<td><code>:nigeria:</code></td>
</tr>
<tr>
<td>🌃</td>
<td><code>:night_with_stars:</code></td>
<td>🇳🇺</td>
<td><code>:niue:</code></td>
</tr>
<tr>
<td>🙅♂</td>
<td><code>:no_good_man:</code></td>
<td>🙅</td>
<td><code>:no_good_woman:</code></td>
</tr>
<tr>
<td>🇳🇫</td>
<td><code>:norfolk_island:</code></td>
<td>🇰🇵</td>
<td><code>:north_korea:</code></td>
</tr>
<tr>
<td>🇲🇵</td>
<td><code>:northern_mariana_islands:</code></td>
<td>🇳🇴</td>
<td><code>:norway:</code></td>
</tr>
<tr>
<td>🛢</td>
<td><code>:oil_drum:</code></td>
<td>🙆♂</td>
<td><code>:ok_man:</code></td>
</tr>
<tr>
<td>🗝</td>
<td><code>:old_key:</code></td>
<td>🕉</td>
<td><code>:om:</code></td>
</tr>
<tr>
<td>🇴🇲</td>
<td><code>:oman:</code></td>
<td>📖</td>
<td><code>:open_book:</code></td>
</tr>
<tr>
<td>☂</td>
<td><code>:open_umbrella:</code></td>
<td>🍊</td>
<td><code>:orange:</code></td>
</tr>
<tr>
<td>☦</td>
<td><code>:orthodox_cross:</code></td>
<td>🦉</td>
<td><code>:owl:</code></td>
</tr>
<tr>
<td>🖌</td>
<td><code>:paintbrush:</code></td>
<td>🇵🇰</td>
<td><code>:pakistan:</code></td>
</tr>
<tr>
<td>🇵🇼</td>
<td><code>:palau:</code></td>
<td>🇵🇸</td>
<td><code>:palestinian_territories:</code></td>
</tr>
<tr>
<td>🇵🇦</td>
<td><code>:panama:</code></td>
<td>🥞</td>
<td><code>:pancakes:</code></td>
</tr>
<tr>
<td>🖇</td>
<td><code>:paperclips:</code></td>
<td>🇵🇬</td>
<td><code>:papua_new_guinea:</code></td>
</tr>
<tr>
<td>🇵🇾</td>
<td><code>:paraguay:</code></td>
<td>⛱</td>
<td><code>:parasol_on_ground:</code></td>
</tr>
<tr>
<td>🛳</td>
<td><code>:passenger_ship:</code></td>
<td>⏸</td>
<td><code>:pause_button:</code></td>
</tr>
<tr>
<td>☮</td>
<td><code>:peace_symbol:</code></td>
<td>🥜</td>
<td><code>:peanuts:</code></td>
</tr>
<tr>
<td>🖊</td>
<td><code>:pen:</code></td>
<td>🤺</td>
<td><code>:person_fencing:</code></td>
</tr>
<tr>
<td>🇵🇪</td>
<td><code>:peru:</code></td>
<td>🇵🇭</td>
<td><code>:philippines:</code></td>
</tr>
<tr>
<td>⛏</td>
<td><code>:pick:</code></td>
<td>🏓</td>
<td><code>:ping_pong:</code></td>
</tr>
<tr>
<td>🇵🇳</td>
<td><code>:pitcairn_islands:</code></td>
<td>🛐</td>
<td><code>:place_of_worship:</code></td>
</tr>
<tr>
<td>🍽</td>
<td><code>:plate_with_cutlery:</code></td>
<td>⏯</td>
<td><code>:play_or_pause_button:</code></td>
</tr>
<tr>
<td>🇵🇱</td>
<td><code>:poland:</code></td>
<td>👮</td>
<td><code>:policeman:</code></td>
</tr>
<tr>
<td>👮♀</td>
<td><code>:policewoman:</code></td>
<td>🍿</td>
<td><code>:popcorn:</code></td>
</tr>
<tr>
<td>🇵🇹</td>
<td><code>:portugal:</code></td>
<td>🥔</td>
<td><code>:potato:</code></td>
</tr>
<tr>
<td>😡</td>
<td><code>:pout:</code></td>
<td>🙎♂</td>
<td><code>:pouting_man:</code></td>
</tr>
<tr>
<td>🙎</td>
<td><code>:pouting_woman:</code></td>
<td>📿</td>
<td><code>:prayer_beads:</code></td>
</tr>
<tr>
<td>🤰</td>
<td><code>:pregnant_woman:</code></td>
<td>⏮</td>
<td><code>:previous_track_button:</code></td>
</tr>
<tr>
<td>🤴</td>
<td><code>:prince:</code></td>
<td>🖨</td>
<td><code>:printer:</code></td>
</tr>
<tr>
<td>🇵🇷</td>
<td><code>:puerto_rico:</code></td>
<td>🇶🇦</td>
<td><code>:qatar:</code></td>
</tr>
<tr>
<td>🏎</td>
<td><code>:racing_car:</code></td>
<td>☢</td>
<td><code>:radioactive:</code></td>
</tr>
<tr>
<td>🛤</td>
<td><code>:railway_track:</code></td>
<td>🏳🌈</td>
<td><code>:rainbow_flag:</code></td>
</tr>
<tr>
<td>🤚</td>
<td><code>:raised_back_of_hand:</code></td>
<td>🖐</td>
<td><code>:raised_hand_with_fingers_splayed:</code></td>
</tr>
<tr>
<td>🙋♂</td>
<td><code>:raising_hand_man:</code></td>
<td>🙋</td>
<td><code>:raising_hand_woman:</code></td>
</tr>
<tr>
<td>⏺</td>
<td><code>:record_button:</code></td>
<td>🎗</td>
<td><code>:reminder_ribbon:</code></td>
</tr>
<tr>
<td>⛑</td>
<td><code>:rescue_worker_helmet:</code></td>
<td>🇷🇪</td>
<td><code>:reunion:</code></td>
</tr>
<tr>
<td>🦏</td>
<td><code>:rhinoceros:</code></td>
<td>🗯</td>
<td><code>:right_anger_bubble:</code></td>
</tr>
<tr>
<td>🤖</td>
<td><code>:robot:</code></td>
<td>🇷🇴</td>
<td><code>:romania:</code></td>
</tr>
<tr>
<td>🏵</td>
<td><code>:rosette:</code></td>
<td>🚣</td>
<td><code>:rowing_man:</code></td>
</tr>
<tr>
<td>🚣♀</td>
<td><code>:rowing_woman:</code></td>
<td>🏃</td>
<td><code>:running_man:</code></td>
</tr>
<tr>
<td>🏃♀</td>
<td><code>:running_woman:</code></td>
<td>🇷🇼</td>
<td><code>:rwanda:</code></td>
</tr>
<tr>
<td>🇼🇸</td>
<td><code>:samoa:</code></td>
<td>🇸🇲</td>
<td><code>:san_marino:</code></td>
</tr>
<tr>
<td>🇸🇹</td>
<td><code>:sao_tome_principe:</code></td>
<td>💁♂</td>
<td><code>:sassy_man:</code></td>
</tr>
<tr>
<td>💁</td>
<td><code>:sassy_woman:</code></td>
<td>🇸🇦</td>
<td><code>:saudi_arabia:</code></td>
</tr>
<tr>
<td>🦂</td>
<td><code>:scorpion:</code></td>
<td>🤳</td>
<td><code>:selfie:</code></td>
</tr>
<tr>
<td>🇸🇳</td>
<td><code>:senegal:</code></td>
<td>🇷🇸</td>
<td><code>:serbia:</code></td>
</tr>
<tr>
<td>🇸🇨</td>
<td><code>:seychelles:</code></td>
<td>🥘</td>
<td><code>:shallow_pan_of_food:</code></td>
</tr>
<tr>
<td>☘</td>
<td><code>:shamrock:</code></td>
<td>🦈</td>
<td><code>:shark:</code></td>
</tr>
<tr>
<td>🛡</td>
<td><code>:shield:</code></td>
<td>⛩</td>
<td><code>:shinto_shrine:</code></td>
</tr>
<tr>
<td>🛍</td>
<td><code>:shopping:</code></td>
<td>🛒</td>
<td><code>:shopping_cart:</code></td>
</tr>
<tr>
<td>🦐</td>
<td><code>:shrimp:</code></td>
<td>🇸🇱</td>
<td><code>:sierra_leone:</code></td>
</tr>
<tr>
<td>🇸🇬</td>
<td><code>:singapore:</code></td>
<td>🇸🇽</td>
<td><code>:sint_maarten:</code></td>
</tr>
<tr>
<td>⛷</td>
<td><code>:skier:</code></td>
<td>☠</td>
<td><code>:skull_and_crossbones:</code></td>
</tr>
<tr>
<td>🛌</td>
<td><code>:sleeping_bed:</code></td>
<td>🇸🇰</td>
<td><code>:slovakia:</code></td>
</tr>
<tr>
<td>🇸🇮</td>
<td><code>:slovenia:</code></td>
<td>🛩</td>
<td><code>:small_airplane:</code></td>
</tr>
<tr>
<td>🤧</td>
<td><code>:sneezing_face:</code></td>
<td>☃</td>
<td><code>:snowman_with_snow:</code></td>
</tr>
<tr>
<td>🇸🇧</td>
<td><code>:solomon_islands:</code></td>
<td>🇸🇴</td>
<td><code>:somalia:</code></td>
</tr>
<tr>
<td>🇿🇦</td>
<td><code>:south_africa:</code></td>
<td>🇬🇸</td>
<td><code>:south_georgia_south_sandwich_islands:</code></td>
</tr>
<tr>
<td>🇸🇸</td>
<td><code>:south_sudan:</code></td>
<td>🗣</td>
<td><code>:speaking_head:</code></td>
</tr>
<tr>
<td>🕷</td>
<td><code>:spider:</code></td>
<td>🕸</td>
<td><code>:spider_web:</code></td>
</tr>
<tr>
<td>🗓</td>
<td><code>:spiral_calendar:</code></td>
<td>🗒</td>
<td><code>:spiral_notepad:</code></td>
</tr>
<tr>
<td>🥄</td>
<td><code>:spoon:</code></td>
<td>🦑</td>
<td><code>:squid:</code></td>
</tr>
<tr>
<td>🇱🇰</td>
<td><code>:sri_lanka:</code></td>
<td>🇧🇱</td>
<td><code>:st_barthelemy:</code></td>
</tr>
<tr>
<td>🇸🇭</td>
<td><code>:st_helena:</code></td>
<td>🇰🇳</td>
<td><code>:st_kitts_nevis:</code></td>
</tr>
<tr>
<td>🇱🇨</td>
<td><code>:st_lucia:</code></td>
<td>🇵🇲</td>
<td><code>:st_pierre_miquelon:</code></td>
</tr>
<tr>
<td>🇻🇨</td>
<td><code>:st_vincent_grenadines:</code></td>
<td>🏟</td>
<td><code>:stadium:</code></td>
</tr>
<tr>
<td>☪</td>
<td><code>:star_and_crescent:</code></td>
<td>✡</td>
<td><code>:star_of_david:</code></td>
</tr>
<tr>
<td>⏹</td>
<td><code>:stop_button:</code></td>
<td>🛑</td>
<td><code>:stop_sign:</code></td>
</tr>
<tr>
<td>⏱</td>
<td><code>:stopwatch:</code></td>
<td>🎙</td>
<td><code>:studio_microphone:</code></td>
</tr>
<tr>
<td>🥙</td>
<td><code>:stuffed_flatbread:</code></td>
<td>🇸🇩</td>
<td><code>:sudan:</code></td>
</tr>
<tr>
<td>🌥</td>
<td><code>:sun_behind_large_cloud:</code></td>
<td>🌦</td>
<td><code>:sun_behind_rain_cloud:</code></td>
</tr>
<tr>
<td>🌤</td>
<td><code>:sun_behind_small_cloud:</code></td>
<td>🏄</td>
<td><code>:surfing_man:</code></td>
</tr>
<tr>
<td>🏄♀</td>
<td><code>:surfing_woman:</code></td>
<td>🇸🇷</td>
<td><code>:suriname:</code></td>
</tr>
<tr>
<td>🇸🇿</td>
<td><code>:swaziland:</code></td>
<td>🇸🇪</td>
<td><code>:sweden:</code></td>
</tr>
<tr>
<td>🏊</td>
<td><code>:swimming_man:</code></td>
<td>🏊♀</td>
<td><code>:swimming_woman:</code></td>
</tr>
<tr>
<td>🇨🇭</td>
<td><code>:switzerland:</code></td>
<td>🕍</td>
<td><code>:synagogue:</code></td>
</tr>
<tr>
<td>🇸🇾</td>
<td><code>:syria:</code></td>
<td>🌮</td>
<td><code>:taco:</code></td>
</tr>
<tr>
<td>🇹🇼</td>
<td><code>:taiwan:</code></td>
<td>🇹🇯</td>
<td><code>:tajikistan:</code></td>
</tr>
<tr>
<td>🇹🇿</td>
<td><code>:tanzania:</code></td>
<td>🇹🇭</td>
<td><code>:thailand:</code></td>
</tr>
<tr>
<td>🌡</td>
<td><code>:thermometer:</code></td>
<td>🇺🇾</td>
<td><code>:uruguay:</code></td>
</tr>
<tr>
<td>🎟</td>
<td><code>:tickets:</code></td>
<td>⏲</td>
<td><code>:timer_clock:</code></td>
</tr>
<tr>
<td>🇹🇱</td>
<td><code>:timor_leste:</code></td>
<td>💁♂</td>
<td><code>:tipping_hand_man:</code></td>
</tr>
<tr>
<td>💁</td>
<td><code>:tipping_hand_woman:</code></td>
<td>🇹🇬</td>
<td><code>:togo:</code></td>
</tr>
<tr>
<td>🇹🇰</td>
<td><code>:tokelau:</code></td>
<td>🇹🇴</td>
<td><code>:tonga:</code></td>
</tr>
<tr>
<td>🌪</td>
<td><code>:tornado:</code></td>
<td>🇹🇷</td>
<td><code>:tr:</code></td>
</tr>
<tr>
<td>🖲</td>
<td><code>:trackball:</code></td>
<td>🇹🇹</td>
<td><code>:trinidad_tobago:</code></td>
</tr>
<tr>
<td>🥃</td>
<td><code>:tumbler_glass:</code></td>
<td>🇹🇳</td>
<td><code>:tunisia:</code></td>
</tr>
<tr>
<td>🦃</td>
<td><code>:turkey:</code></td>
<td>🇹🇲</td>
<td><code>:turkmenistan:</code></td>
</tr>
<tr>
<td>🇹🇨</td>
<td><code>:turks_caicos_islands:</code></td>
<td>🇹🇻</td>
<td><code>:tuvalu:</code></td>
</tr>
<tr>
<td>🇺🇬</td>
<td><code>:uganda:</code></td>
<td>🇺🇦</td>
<td><code>:ukraine:</code></td>
</tr>
<tr>
<td>🦄</td>
<td><code>:unicorn:</code></td>
<td>🇦🇪</td>
<td><code>:united_arab_emirates:</code></td>
</tr>
<tr>
<td>🇻🇮</td>
<td><code>:us_virgin_islands:</code></td>
<td>🇺🇿</td>
<td><code>:uzbekistan:</code></td>
</tr>
<tr>
<td>🇻🇺</td>
<td><code>:vanuatu:</code></td>
<td>🇻🇦</td>
<td><code>:vatican_city:</code></td>
</tr>
<tr>
<td>🇻🇪</td>
<td><code>:venezuela:</code></td>
<td>🇻🇳</td>
<td><code>:vietnam:</code></td>
</tr>
<tr>
<td>🏐</td>
<td><code>:volleyball:</code></td>
<td>🖖</td>
<td><code>:vulcan_salute:</code></td>
</tr>
<tr>
<td>🚶</td>
<td><code>:walking:</code></td>
<td>🚶</td>
<td><code>:walking_man:</code></td>
</tr>
<tr>
<td>🚶♀</td>
<td><code>:walking_woman:</code></td>
<td>🇼🇫</td>
<td><code>:wallis_futuna:</code></td>
</tr>
<tr>
<td>🗑</td>
<td><code>:wastebasket:</code></td>
<td>🏋</td>
<td><code>:weight_lifting_man:</code></td>
</tr>
<tr>
<td>🏋♀</td>
<td><code>:weight_lifting_woman:</code></td>
<td>🇪🇭</td>
<td><code>:western_sahara:</code></td>
</tr>
<tr>
<td>☸</td>
<td><code>:wheel_of_dharma:</code></td>
<td>🏳</td>
<td><code>:white_flag:</code></td>
</tr>
<tr>
<td>🥀</td>
<td><code>:wilted_flower:</code></td>
<td>🌬</td>
<td><code>:wind_face:</code></td>
</tr>
<tr>
<td>👩🎨</td>
<td><code>:woman_artist:</code></td>
<td>👩🚀</td>
<td><code>:woman_astronaut:</code></td>
</tr>
<tr>
<td>🤸♀</td>
<td><code>:woman_cartwheeling:</code></td>
<td>👩🍳</td>
<td><code>:woman_cook:</code></td>
</tr>
<tr>
<td>🤦♀</td>
<td><code>:woman_facepalming:</code></td>
<td>👩🏭</td>
<td><code>:woman_factory_worker:</code></td>
</tr>
<tr>
<td>👩🌾</td>
<td><code>:woman_farmer:</code></td>
<td>👩🚒</td>
<td><code>:woman_firefighter:</code></td>
</tr>
<tr>
<td>👩⚕</td>
<td><code>:woman_health_worker:</code></td>
<td>👩⚖</td>
<td><code>:woman_judge:</code></td>
</tr>
<tr>
<td>🤹♀</td>
<td><code>:woman_juggling:</code></td>
<td>👩🔧</td>
<td><code>:woman_mechanic:</code></td>
</tr>
<tr>
<td>👩💼</td>
<td><code>:woman_office_worker:</code></td>
<td>👩✈</td>
<td><code>:woman_pilot:</code></td>
</tr>
<tr>
<td>🤾♀</td>
<td><code>:woman_playing_handball:</code></td>
<td>🤽♀</td>
<td><code>:woman_playing_water_polo:</code></td>
</tr>
<tr>
<td>👩🔬</td>
<td><code>:woman_scientist:</code></td>
<td>🤷♀</td>
<td><code>:woman_shrugging:</code></td>
</tr>
<tr>
<td>👩🎤</td>
<td><code>:woman_singer:</code></td>
<td>👩🎓</td>
<td><code>:woman_student:</code></td>
</tr>
<tr>
<td>👩🏫</td>
<td><code>:woman_teacher:</code></td>
<td>👩💻</td>
<td><code>:woman_technologist:</code></td>
</tr>
<tr>
<td>👳♀</td>
<td><code>:woman_with_turban:</code></td>
<td>🤼♀</td>
<td><code>:women_wrestling:</code></td>
</tr>
<tr>
<td>🗺</td>
<td><code>:world_map:</code></td>
<td>✍</td>
<td><code>:writing_hand:</code></td>
</tr>
<tr>
<td>🇾🇪</td>
<td><code>:yemen:</code></td>
<td>☯</td>
<td><code>:yin_yang:</code></td>
</tr>
<tr>
<td>🇿🇲</td>
<td><code>:zambia:</code></td>
<td>🇿🇼</td>
<td><code>:zimbabwe:</code></td>
</tr>
</tbody></table>
<p>原文链接链接: <a href="https://adkcss.coding-pages.com/posts/a927e90e.html#emoji-cheat-sheet" target="_blank" rel="noopener">https://adkcss.coding-pages.com/posts/a927e90e.html#emoji-cheat-sheet</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Emoj</tag>
      </tags>
  </entry>
  <entry>
    <title>三次握手</title>
    <url>/2020/02/27/san-ci-wo-shou/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>TCP作为一种可靠传输控制协议,其核心思想:既要保证数据可靠传输,又要提高传输的效率，而用三次恰恰可以满足以上两方面的需求。</p>
<p><strong>第一次握手：</strong>  客户端什么都不确定。服务端确认对方发送正常。<br><strong>第二次握手：</strong>  客户端发送/接受正常，对方发送接收正常。服务端确认自己发送正常，客户端发送正常。</p>
<p><strong>第三次握手：</strong>  客户端发送/接受正常，服务端发送接受正常。服务端确认自己发送/接受正常，客户端发送接受正常。</p>
<h2 id="TCP报文"><a href="#TCP报文" class="headerlink" title="TCP报文"></a>TCP报文</h2><p>随着对计算机网络的理解深入，我们实际上开始明白TCP报文是交由IP网络来负责运输，IP网络并不能保证TCP报文达到目的地，那么既然IP网络指望不上了，TCP就只能自己自力更生了，TCP必须依赖自身的努力来保证数据传输的可靠性。</p>
<p>TCP看似复杂，其实可以归纳为以下五种报文：</p>
<ol>
<li>SYN</li>
<li>Data（唯一携带用户数据）</li>
<li>FIN</li>
<li>Reset</li>
<li>ACK</li>
</ol>
<p>其中1、2、3分别为<strong>建立连接</strong>、<strong>数据传输</strong>、<strong>断开连接</strong>，这三种报文对方接收到一定要ACK确认，为何要确认，因为这就是可靠传输的依赖的机制。如果对方在超时时间内不确认，发送方会一直重发，直到对方确认为止、或达到重传上线次数而Reset连接。</p>
<h3 id="为何Reset报文不需要ACK确认？"><a href="#为何Reset报文不需要ACK确认？" class="headerlink" title="为何Reset报文不需要ACK确认？"></a>为何Reset报文不需要ACK确认？</h3><p>因为发送Reset报文的一端，在发送完这个报文之后，和该TCP Session有关的内存结构瞬间全部释放，无论对方收到或者没收到，关系并不大。</p>
<p>如果对方收到了Reset报文，也会释放该TCP Session的相关内存结构体。</p>
<p>如果对方没有收到Reset报文，也能会继续发送让接收方弹射出Reset报文的报文，到最后对方一样会收到Reset报文，并最终释放内存。</p>
<h3 id="为何ACK报文不需要ACK确认？"><a href="#为何ACK报文不需要ACK确认？" class="headerlink" title="为何ACK报文不需要ACK确认？"></a>为何ACK报文不需要ACK确认？</h3><p>这里的ACK报文，是指没有携带任何数据的裸ACK报文，对方收到这样的ACK报文，自然也不需要ACK，否则，对方为了ACK己方的ACK，那么己方收到对方的ACK，也要ACK对方的ACK，这就是一个死循环，永无止息。</p>
<p>所以为了避免这个死循环，一律不允许ACK对方的裸ACK报文。</p>
<h3 id="四次握手的过程"><a href="#四次握手的过程" class="headerlink" title="四次握手的过程"></a>四次握手的过程</h3><p>有同学会说，按照这么说，TCP连接应该是四次信息交互啊</p>
<table>
<thead>
<tr>
<th align="center">顺序</th>
<th align="center">操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">A发送给SYN给B，这是第一次报文交互</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">B发送ACK确认A的SYN报文，这是第二次报文交互</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">B发送自己的SYN报文给A，这是第三次报文交互</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">A需要ACK确认B的SYN报文，这是第四次报文交互</td>
</tr>
</tbody></table>
<p>以上的演绎没有问题，但是报文2、3为什么要分开发送呢？增加了延迟不说，同时还白白浪费了网络的带宽，完全可以将2和3合并起来，不就是在报文2的ACK状态位置“1”不就完事了吗？</p>
<p>这就是三次消息交互的由来！</p>
<p>###　二次握手的过程：</p>
<p><strong>2.1</strong> A 发送同步信号<strong>SYN</strong> + <strong>A’sInitial sequence number</strong></p>
<p><strong>2.2</strong> B发送同步信号<strong>SYN</strong> + <strong>B’sInitial sequence number</strong> + <strong>B’s ACK sequence number</strong></p>
<p>这里有一个问题，A与B就A的初始序列号达成了一致，这里是1000。<strong>但是</strong>B无法知道A是否已经接收到自己的同步信号，如果这个同步信号丢失了，<strong>A和B就B的初始序列号将无法达成一致。</strong></p>
<p>于是TCP的设计者将<strong>SYN这个同步标志位SYN设计成占用一个字节的编号（FIN标志位也是）</strong>，既然是一个字节的数据，按照TCP对有数据的TCP segment 必须确认的原则，所以在这里A必须给B一个确认，以确认A已经接收到B的同步信号。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有人会说，如果A发给B的确认丢了，该如何？<br>A会超时重传这个ACK吗？不会！<strong>TCP不会为没有数据的ACK超时重传</strong>。</p>
<p>那该如何是好？<strong>B如果没有收到A的ACK，会超时重传自己的SYN同步信号，一直到收到A的ACK为止。</strong></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>第一个包，即A发给B的SYN 中途被丢，没有到达B</strong></p>
<p>答：A会周期性超时重传，直到收到B的确认</p>
<p><strong>第二个包，即B发给A的SYN +ACK 中途被丢，没有到达A</strong></p>
<p>答：B会周期性超时重传，直到收到A的确认</p>
<p><strong>第三个包，即A发给B的ACK 中途被丢，没有到达B</strong></p>
<p>答：A发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：</p>
<p>a. 假定此时双方都没有数据发送，B会周期性超时重传，直到收到A的确认，收到之后B的TCP 连接也为 Established状态，双向可以发包。</p>
<p>b. 假定此时A有数据发送，B收到A的 Data + ACK，自然会切换为established 状态，并接受A的Data。</p>
<p>c. 假定B有数据发送，数据发送不了，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>在网络数据传输中，传输层协议断开连接的过程我们称为四次挥手</p>
<p>第一次，A端像B端发送FIN结束报文段，准备关闭连接</p>
<p>第二次，B端确认A端的FIN，表示自己已经收到对方关闭连接的请求</p>
<p>中间这段时间，A端停止向B端发送数据，但是B端可以向A端发送数据，要将自己未处理完任务处理完</p>
<p>第三次，B端向A端发送FIN结束报文段，准备关闭连接</p>
<p>第四次，A端确认B端的FIN，进入TIME_WAIT状态，此时A端进程已经退出，但是连接还在</p>
<p>当B端收到A端的ACK之后，先断开连接</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis记录</title>
    <url>/2020/02/21/mybatis-ji-lu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前的时候，使用JDBC连接数据库，写着写着多了个连接池，之后又想到把连接信息放在资源文件里，当时想着这么做还挺厉害，现在发现有点LOW，前人早就做了，而且形成了现成的框架。</p>
<h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><blockquote>
<p>MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis。是一个基于Java的持久层框架</p>
</blockquote>
<h2 id="为什么我们要用Mybatis？"><a href="#为什么我们要用Mybatis？" class="headerlink" title="为什么我们要用Mybatis？"></a>为什么我们要用Mybatis？</h2><p>无论是Mybatis、Hibernate都是ORM的一种实现框架，都是对JDBC的一种封装！</p>
<p>Hibernate是一个比较老旧的框架，用过他的都知道，只要你会用，用起来十分舒服…啥sql代码都不用写…但是呢，它也是有的缺点：：<strong>处理复杂业务时，灵活度差, 复杂的HQL难写难理解，例如多表查询的HQL语句</strong></p>
<p>而JDBC很容易理解，就那么几个固定的步骤，就是开发起来太麻烦了，因为什么都要我们自己干..</p>
<p>而SpringDAO其实就是JDBC的一层封装，就类似于dbutils一样，没有特别出彩的地方….</p>
<p>我们可以认为，<strong>Mybatis就是jdbc和Hibernate之间的一个平衡点</strong>…毕竟现在业界都是用这个框架，也不能不学呀！</p>
<h2 id="Mybatis工作流程"><a href="#Mybatis工作流程" class="headerlink" title="Mybatis工作流程"></a>Mybatis工作流程</h2><ul>
<li><strong>通过Reader对象读取Mybatis配置文件</strong></li>
<li><strong>通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象</strong></li>
<li><strong>获取当前线程的SQLSession</strong></li>
<li><strong>事务默认开启</strong></li>
<li><strong>通过SQLSession读取映射文件中的操作编号，从而读取SQL语句</strong></li>
<li><strong>提交事务</strong></li>
<li><strong>关闭资源</strong></li>
</ul>
<h2 id="Mybatis快速入门"><a href="#Mybatis快速入门" class="headerlink" title="Mybatis快速入门"></a>Mybatis快速入门</h2><h3 id="导入开发包"><a href="#导入开发包" class="headerlink" title="导入开发包"></a>导入开发包</h3><p>导入Mybatis开发包</p>
<ul>
<li>mybatis-3.1.1.jar</li>
<li>commons-logging-1.1.1.jar</li>
<li>log4j-1.2.16.jar</li>
<li>cglib-2.2.2.jar</li>
<li>asm-3.3.1.jar</li>
</ul>
<p>导入mysql/oracle开发包</p>
<ul>
<li>mysql-connector-java-5.1.7-bin.jar</li>
<li>Oracle 11g 11.2.0.1.0 JDBC_ojdbc6.jar</li>
</ul>
<h3 id="准备测试工作"><a href="#准备测试工作" class="headerlink" title="准备测试工作"></a>准备测试工作</h3><p>创建一张表</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> students<span class="token punctuation">(</span>
  id  <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  sal <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>创建实体类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Double sal<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Double <span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSal</span><span class="token punctuation">(</span>Double sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="创建mybatis配置文件"><a href="#创建mybatis配置文件" class="headerlink" title="创建mybatis配置文件"></a>创建mybatis配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>


    <span class="token comment" spellcheck="true">&lt;!-- 加载类路径下的属性文件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 设置一个默认的连接环境信息 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql_developer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接环境信息，取一个任意唯一的名字 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql_developer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- mybatis使用jdbc事务管理方式 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- mybatis使用连接池方式来获取连接 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pooled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!-- 配置与数据库交互的4个必要属性 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>


        <span class="token comment" spellcheck="true">&lt;!-- 连接环境信息，取一个任意唯一的名字 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle_developer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- mybatis使用jdbc事务管理方式 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- mybatis使用连接池方式来获取连接 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pooled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!-- 配置与数据库交互的4个必要属性 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${oracle.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${oracle.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${oracle.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${oracle.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>
<h3 id="编写工具类测试是否获取到连接"><a href="#编写工具类测试是否获取到连接" class="headerlink" title="编写工具类测试是否获取到连接"></a>编写工具类测试是否获取到连接</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>javaee<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 工具类
 * @author AdminTC
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>SqlSession<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>SqlSession<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 加载位于src/mybatis.xml配置文件
     */</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Reader reader <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"mybatis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 禁止外界通过new方法创建 
     */</span>
    <span class="token keyword">private</span> <span class="token function">MybatisUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 获取SqlSession
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//从当前线程中获取SqlSession对象</span>
        SqlSession sqlSession <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//如果SqlSession对象为空</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//在SqlSessionFactory非空的情况下，获取SqlSession对象</span>
            sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//将SqlSession对象与当前线程绑定在一起</span>
            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//返回SqlSession对象</span>
        <span class="token keyword">return</span> sqlSession<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 关闭SqlSession与当前线程分开
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//从当前线程中获取SqlSession对象</span>
        SqlSession sqlSession <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//如果SqlSession对象非空</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//关闭SqlSession对象</span>
            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//分开当前线程与SqlSession对象的关系，目的是让GC尽早回收</span>
            threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>    
    <span class="token comment" spellcheck="true">/**
     * 测试
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Connection conn <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token operator">?</span><span class="token string">"连接成功"</span><span class="token operator">:</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="创建实体与映射关系文件"><a href="#创建实体与映射关系文件" class="headerlink" title="创建实体与映射关系文件"></a>创建实体与映射关系文件</h3><pre class=" language-xml"><code class="language-xml">
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>

<span class="token comment" spellcheck="true">&lt;!-- namespace属性是名称空间，必须唯一 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.javaee.mybatis.app04.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    

    <span class="token comment" spellcheck="true">&lt;!-- resultMap标签:映射实体与表 
         type属性：表示实体全路径名
         id属性：为实体与表的映射取一个任意的唯一的名字
    --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- id标签:映射主键属性
             result标签：映射非主键属性
             property属性:实体的属性名
             column属性：表的字段名     
        --></span>                            
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<p>现在我们已经有了Mybatis的配置文件和表与实体之前的映射文件了，因此我们要将配置文件和映射文件关联起来</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring记录</title>
    <url>/2020/02/20/spring-ji-lu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>再看Spring的时候，发现很多博文（思否，知乎，CSDN等等）讲的内容都很不错，但是还可以互补，这里摘取一些我感觉比较有用的内容，归纳一下，方便自己理解。</p>
<h2 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h2><p>Spring诞生：</p>
<ul>
<li>创建Spring的目的就是用来<strong>替代更加重量级的的企业级Java技术</strong></li>
<li><strong>简化Java的开发</strong><ul>
<li>基于POJO轻量级和<strong>最小侵入式开发</strong></li>
<li>通过依赖注入和面向接口实现<strong>松耦合</strong></li>
<li><strong>基于切面</strong>和惯例进行声明式编程</li>
<li>通过切面和模板<strong>减少样板式代码</strong></li>
</ul>
</li>
</ul>
<h2 id="侵入式概念"><a href="#侵入式概念" class="headerlink" title="侵入式概念"></a>侵入式概念</h2><p><strong>Spring是一种非侵入式的框架</strong>…</p>
<p><strong>侵入式</strong></p>
<ul>
<li>对于Struts2等一些传统的框架，<strong>通常是要实现特定的接口，继承特定的类才能增强功能</strong><ul>
<li><strong>改变了java类的结构</strong></li>
</ul>
</li>
</ul>
<p><strong>非侵入式</strong></p>
<ul>
<li>对于Hibernate、Spring等框架，<strong>对现有的类结构没有影响，就能够增强JavaBean的功能</strong></li>
</ul>
<h2 id="松耦合"><a href="#松耦合" class="headerlink" title="松耦合"></a>松耦合</h2><p>前面我们在写程序的时候，都是<strong>面向接口编程，通过DaoFactroy等方法来实现松耦合</strong></p>
<p><strong>DAO层和Service层通过DaoFactory来实现松耦合</strong></p>
<ul>
<li><strong>如果Serivce层直接new DaoBook()，那么DAO和Service就紧耦合了【Service层依赖紧紧依赖于Dao】</strong>。</li>
</ul>
<p><strong>而Spring给我们更加合适的方法来实现松耦合，并且更加灵活、功能更加强大！—-&gt;IOC控制反转</strong></p>
<h2 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h2><p>切面编程也就是AOP编程，其实我们在之前也接触过…<strong>动态代理就是一种切面编程了</strong>…</p>
<p>当时我们使用<strong>动态代理+注解的方式给Service层的方法添加权限</strong>.</p>
<pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@permission</span><span class="token punctuation">(</span><span class="token string">"添加分类"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">/*添加分类*/</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCategory</span><span class="token punctuation">(</span>Category category<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        categoryDao<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/*查找分类*/</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findCategory</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        categoryDao<span class="token punctuation">.</span><span class="token function">findCategory</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@permission</span><span class="token punctuation">(</span><span class="token string">"查找分类"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">/*查看分类*/</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Category<span class="token operator">></span> <span class="token function">getAllCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> categoryDao<span class="token punctuation">.</span><span class="token function">getAllCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/*添加图书*/</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bookDao<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span></code></pre>
<ul>
<li>Controller调用Service的时候，Service返回的是一个代理对象</li>
<li>代理对象得到Controller想要调用的方法，通过反射来看看该方法上有没有注解</li>
<li>如果有注解的话，那么就判断该用户是否有权限来调用 此方法，如果没有权限，就抛出异常给Controller，Controller接收到异常，就可以提示用户没有权限了。</li>
</ul>
<p>AOP编程可以简单理解成：<strong>在执行某些代码前，执行另外的代码</strong></p>
<ul>
<li>Struts2的拦截器也是面向切面编程【在执行Action业务方法之前执行拦截器】</li>
</ul>
<p>Spring也为我们<strong>提供更好地方式来实现面向切面编程</strong>！</p>
<h2 id="引出Spring"><a href="#引出Spring" class="headerlink" title="引出Spring"></a>引出Spring</h2><p>我们试着回顾一下没学Spring的时候，是怎么开发Web项目的</p>
<ul>
<li><strong>1. 实体类—&gt;class User{ }</strong></li>
<li><strong>2. daoclass–&gt; UserDao{ .. 访问db}</strong></li>
<li><strong>3. service—&gt;class UserService{ UserDao userDao = new UserDao();}</strong></li>
<li><strong>4. actionclass UserAction{UserService userService = new UserService();}</strong></li>
</ul>
<p><strong>用户访问：</strong></p>
<ul>
<li><strong>Tomcat-&gt;action-&gt;service-&gt;dao</strong></li>
</ul>
<p>我们来思考几个问题：</p>
<ul>
<li>①：<strong>对象创建创建能否写死？</strong></li>
<li>②：对象创建细节<ul>
<li><strong>对象数量</strong><ul>
<li>action 多个 【维护成员变量】</li>
<li>service 一个 【不需要维护公共变量】</li>
<li>dao 一个 【不需要维护公共变量】</li>
</ul>
</li>
<li><strong>创建时间</strong><ul>
<li>action 访问时候创建</li>
<li>service 启动时候创建</li>
<li>dao 启动时候创建</li>
</ul>
</li>
</ul>
</li>
<li>③：对象的依赖关系<ul>
<li><strong>action 依赖 service</strong></li>
<li><strong>service依赖 dao</strong></li>
</ul>
</li>
</ul>
<p>对于第一个问题和第三个问题，<strong>我们可以通过DaoFactory解决掉(虽然不是比较好的解决方法)</strong></p>
<p>对于第二个问题，我们要<strong>控制对象的数量和创建时间就有点麻烦了</strong>….</p>
<p>而<strong>Spring框架通过IOC就很好地可以解决上面的问题</strong>….</p>
<h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>Spring的核心思想之一：<strong>Inversion of Control , 控制反转 IOC</strong></p>
<p>那么控制反转是什么意思呢？？？<strong>对象的创建交给外部容器完成，这个就做控制反转。</strong></p>
<ul>
<li><strong>Spring使用控制反转来实现对象不用在程序中写死</strong></li>
<li><strong>控制反转解决对象处理问题【把对象交给别人创建】</strong></li>
</ul>
<p>那么对象的对象之间的依赖关系Spring是怎么做的呢？？<strong>依赖注入，dependency injection.</strong></p>
<ul>
<li><strong>Spring使用依赖注入来实现对象之间的依赖关系</strong></li>
<li><strong>在创建完对象之后，对象的关系处理就是依赖注入</strong></li>
</ul>
<p>上面已经说了，控制反转是通过外部容器完成的，<strong>而Spring又为我们提供了这么一个容器，我们一般将这个容器叫做：IOC容器.</strong></p>
<p><strong>无论是创建对象、处理对象之间的依赖关系、对象创建的时间还是对象的数量，我们都是在Spring为我们提供的IOC容器上配置对象的信息就好了。</strong></p>
<ol>
<li>不用自己组装，拿来就用。</li>
<li>享受单例的好处，效率高，不浪费空间。</li>
<li>便于单元测试，方便切换mock组件。</li>
<li>便于进行AOP操作，对于使用者是透明的。</li>
<li>统一配置，便于修改。</li>
</ol>
<h2 id="等等…"><a href="#等等…" class="headerlink" title="等等….."></a>等等…..</h2><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC记录</title>
    <url>/2020/02/19/springmvc-ji-lu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在回顾之前的SSM项目的时候，发现对流程模糊了好多，开始对SpringMVC，Spring，Mybatis进行总结一下，参考思否，CSDN，以及从图书馆借的SSM+Redis整合这本书。</p>
<h2 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h2><p>参考之前的文章<a href="https://huangzhiwu98.top/2020/02/18/ssm-zheng-he-jian-jie/">Spring整合</a>,</p>
<p>SpringMVC是Spring家族的一员，Spring是将现在开发中流行的组件进行组合而成的一个框架！它用在<strong>基于MVC的表现层开发，类似于struts2框架</strong></p>
<h2 id="为什么用SpringMVC"><a href="#为什么用SpringMVC" class="headerlink" title="为什么用SpringMVC"></a>为什么用SpringMVC</h2><p>我们在之前已经学过了Struts2这么一个基于MVC的框架….那么我们已经学会了Struts2，为啥要要学习SpringMVC呢？？？</p>
<p>下面我们来看一下Struts2不足之处：</p>
<ul>
<li>有漏洞【详细可以去搜索】</li>
<li>运行速度较慢【比SpringMVC要慢】</li>
<li>配置的内容较多【需要使用Struts.xml文件】</li>
<li>比较重量级</li>
</ul>
<p>基于这么一些原因，并且业内现在SpringMVC已经逐渐把Struts2给替代了…因此我们<strong>学习SpringMVC一方面能够让我们跟上业界的潮流框架，一方面SpringMVC确实是非常好用</strong>！</p>
<p>可以这么说，<strong>Struts2能做的东西，SpringMVC也能够做</strong>….</p>
<h2 id="Struts2的工作流程"><a href="#Struts2的工作流程" class="headerlink" title="Struts2的工作流程"></a>Struts2的工作流程</h2><ul>
<li>Struts2接收到request请求</li>
<li>将请求转向我们的过滤分批器进行过滤</li>
<li>读取Struts2对应的配置文件</li>
<li>经过默认的拦截器之后创建对应的Action【多例】</li>
<li>执行完业务方法就返回给response对象</li>
</ul>
<h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><ul>
<li>用户发送请求</li>
<li>请求交由核心控制器处理</li>
<li>核心控制器找到映射器，映射器看看请求路径是什么</li>
<li>核心控制器再找到适配器，看看有哪些类实现了Controller接口或者对应的bean对象</li>
<li>将带过来的数据进行转换，格式化等等操作</li>
<li>找到我们的控制器Action，处理完业务之后返回一个ModelAndView对象</li>
<li>最后通过视图解析器来对ModelAndView进行解析</li>
<li>跳转到对应的JSP/html页面</li>
</ul>
<h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合简介</title>
    <url>/2020/02/18/ssm-zheng-he-jian-jie/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在大学的时候，学习了Struts2的知识，但是发现企业里好像对它不重视，快被淘汰了，SpringMVC更加受欢迎，而且SpringMVC和Spring更加契合。另外，MyBatis也可以替换Hibernate，正因为MyBatis的半自动特点，这会让有数据库经验的程序猿能开发出高效率的SQL语句（虽然我不是），而且XML配置管理起来也非常方便。</p>
<h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p><strong>SpringMVC</strong>：它用于web层，相当于controller（等价于传统的servlet和struts的action），用来处理用户请求。举个例子，用户在地址栏输入http://网站域名/login，那么springmvc就会拦截到这个请求，并且调用controller层中相应的方法，（中间可能包含验证用户名和密码的业务逻辑，以及查询数据库操作，但这些都不是springmvc的职责），最终把结果返回给用户，并且返回相应的页面（当然也可以只返回json/xml等格式数据）。springmvc就是做前面和后面过程的活，与用户打交道！！</p>
<h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p><strong>Spring</strong>：太强大了，以至于我无法用一个词或一句话来概括它。但与我们平时开发接触最多的估计就是IOC容器，它可以装载bean（也就是我们java中的类，当然也包括service dao里面的），有了这个机制，我们就不用在每次使用这个类的时候为它初始化，很少看到关键字new。另外spring的aop，事务管理等等都是我们经常用到的。</p>
<h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p><strong>MyBatis</strong>：如果你问我它跟鼎鼎大名的Hibernate有什么区别？第一，它能自由控制sql，这会让有数据库经验的人（当然不是说我）编写的代码能搞提升数据库访问的效率。第二，它可以使用xml的方式来组织管理我们的sql，因为一般程序出错很多情况下是sql出错，别人接手代码后能快速找到出错地方，甚至可以优化原来写的sql。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>根目录，没什么好说的，下面有main和test。</td>
</tr>
<tr>
<td>-main</td>
<td>主要目录，可以放java代码和一些资源文件。</td>
</tr>
<tr>
<td>–java</td>
<td>存放我们的java代码，这个文件夹要使用Build Path -&gt; Use as Source Folder，这样看包结构会方便很多，新建的包就相当于在这里新建文件夹咯。</td>
</tr>
<tr>
<td>–resource</td>
<td>存放资源文件，譬如各种的spring，mybatis，log配置文件。</td>
</tr>
<tr>
<td>—mapper</td>
<td>存放dao中每个方法对应的sql，在这里配置，无需写daoImpl。</td>
</tr>
<tr>
<td>—spring</td>
<td>这里当然是存放spring相关的配置文件，有dao service web三层。</td>
</tr>
<tr>
<td>—sql</td>
<td>其实这个可以没有，但是为了项目完整性还是加上吧。</td>
</tr>
<tr>
<td>—webapp</td>
<td>这个貌似是最熟悉的目录了，用来存放我们前端的静态资源，如jsp js css。</td>
</tr>
<tr>
<td>—resources</td>
<td>这里的资源是指项目的静态资源，如js css images等。</td>
</tr>
<tr>
<td>—WEB-INF</td>
<td>很重要的一个目录，外部浏览器无法访问，只有羡慕内部才能访问，可以把jsp放在这里，另外就是web.xml了。</td>
</tr>
<tr>
<td>-test</td>
<td>这里是测试分支。</td>
</tr>
<tr>
<td>–java</td>
<td>测试java代码，应遵循包名相同的原则，这个文件夹同样要使用Build Path -&gt; Use as Source Folder，这样看包结构会方便很多。</td>
</tr>
<tr>
<td>–resources</td>
<td>没什么好说的，好像也很少用到，但这个是maven的规范。</td>
</tr>
</tbody></table>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>新建好几个必要的包，理解一下每个包的作用，顺便理清一下后台的思路</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>dao</td>
<td>数据访问层（接口）</td>
<td>与数据打交道，可以是数据库操作，也可以是文件读写操作，甚至是redis缓存操作，总之与数据操作有关的都放在这里，也有人叫做dal或者数据持久层都差不多意思。为什么没有daoImpl，因为我们用的是mybatis，所以可以直接在配置文件中实现接口的每个方法。</td>
</tr>
<tr>
<td>entity</td>
<td>实体类</td>
<td>一般与数据库的表相对应，封装dao层取出来的数据为一个对象，也就是我们常说的pojo，一般只在dao层与service层之间传输。</td>
</tr>
<tr>
<td>service</td>
<td>业务逻辑（接口）</td>
<td>写我们的业务逻辑，也有人叫bll，在设计业务接口时候应该站在“使用者”的角度。</td>
</tr>
<tr>
<td>serviceImpl</td>
<td>业务逻辑（实现）</td>
<td>实现我们业务接口，一般事务控制是写在这里，没什么好说的。</td>
</tr>
<tr>
<td>web</td>
<td>控制层</td>
<td>springmvc就是在这里发挥作用的，一般人叫做controller控制器，相当于struts中的action。</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最后，代码就不往这里贴了，<a href="https://github.com/1471748102" target="_blank" rel="noopener">源码地址</a></p>
<p>还是要多写项目多练习</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩的注释</title>
    <url>/2020/02/17/hao-wan-de-zhu-shi/</url>
    <content><![CDATA[<blockquote>
<p>收集一些好玩有趣的注释，仅娱乐用！！！</p>
</blockquote>
<p><a href="http://www.asciiworld.com/" target="_blank" rel="noopener">最全的注释地址</a></p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//       __</span>
    <span class="token comment" spellcheck="true">// __   (__`\</span>
    <span class="token comment" spellcheck="true">//(__`\   \\`\</span>
    <span class="token comment" spellcheck="true">// `\\`\   \\ \</span>
    <span class="token comment" spellcheck="true">//   `\\`\  \\ \</span>
    <span class="token comment" spellcheck="true">//     `\\`\#\\ \#</span>
    <span class="token comment" spellcheck="true">//       \_ ##\_ |##</span>
    <span class="token comment" spellcheck="true">//       (___)(___)##</span>
    <span class="token comment" spellcheck="true">//        (0)  (0)`\##</span>
    <span class="token comment" spellcheck="true">//         |~   ~ , \##</span>
    <span class="token comment" spellcheck="true">//         |      |  \##</span>
    <span class="token comment" spellcheck="true">//         |     /\   \##         __..---'''''-.._.._</span>
    <span class="token comment" spellcheck="true">//         |     | \   `\##  _.--'                _  `.</span>
    <span class="token comment" spellcheck="true">//         Y     |  \    `##'                     \`\  \</span>
    <span class="token comment" spellcheck="true">//        /      |   \                             | `\ \</span>
    <span class="token comment" spellcheck="true">//       /_...___|    \                            |   `\\</span>
    <span class="token comment" spellcheck="true">//      /        `.    |                          /      ##</span>
    <span class="token comment" spellcheck="true">//     |          |    |                         /      ####</span>
    <span class="token comment" spellcheck="true">//     |          |    |                        /       ####</span>
    <span class="token comment" spellcheck="true">//     | () ()    |     \     |          |  _.-'         ##</span>
    <span class="token comment" spellcheck="true">//     `.        .'      `._. |______..| |-'|</span>
    <span class="token comment" spellcheck="true">//       `------'           | | | |    | || |</span>
    <span class="token comment" spellcheck="true">//                          | | | |    | || |</span>
    <span class="token comment" spellcheck="true">//                          | | | |    | || |</span>
    <span class="token comment" spellcheck="true">//                          | | | |    | || |     </span>
    <span class="token comment" spellcheck="true">//                    _____ | | | |____| || |</span>
    <span class="token comment" spellcheck="true">//                   /     `` |-`/     ` |` |</span>
    <span class="token comment" spellcheck="true">//                   \________\__\_______\__\</span>
    <span class="token comment" spellcheck="true">//                    """""""""   """""""'"""</span></code></pre>
<pre class=" language-java"><code class="language-java">                               <span class="token function">_</span><span class="token punctuation">(</span>\_<span class="token operator">/</span><span class="token punctuation">)</span> 
                             <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">^</span>`\
                            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token number">6</span> \ 
                          <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token punctuation">,</span>    \
      <span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span>_              <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>  <span class="token operator">/</span>"<span class="token punctuation">.</span>_  <span class="token punctuation">,</span>`<span class="token punctuation">,</span>
     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\\ <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>   <span class="token operator">/</span>    `<span class="token operator">-</span><span class="token punctuation">.</span>-'
     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token string">'    `"'</span><span class="token string">"'"</span>"<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>   <span class="token punctuation">(</span>      
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>  <span class="token operator">/</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>      \
     <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>                      <span class="token operator">|</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>  <span class="token operator">|</span>        <span class="token punctuation">.</span>       '     <span class="token operator">|</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>  \     _ <span class="token string">'      `t   ,.'</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>   <span class="token operator">|</span>   y<span class="token punctuation">;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token string">""</span>'"<span class="token operator">-</span><span class="token punctuation">.</span>\   \<span class="token operator">/</span>  
    <span class="token punctuation">)</span>   <span class="token operator">/</span> <span class="token punctuation">.</span>/  <span class="token punctuation">)</span> <span class="token operator">/</span>         `\  \
       <span class="token operator">|</span><span class="token punctuation">.</span>/   <span class="token punctuation">(</span> <span class="token punctuation">(</span>           <span class="token operator">/</span> <span class="token operator">/</span>'
       <span class="token operator">||</span>     \\          <span class="token comment" spellcheck="true">//'|</span>
       <span class="token operator">||</span>      \\       _<span class="token comment" spellcheck="true">//'||</span>
       <span class="token operator">||</span>       <span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token operator">|</span>_<span class="token operator">/</span>  <span class="token operator">||</span>
       \_\     <span class="token operator">|</span>_<span class="token operator">/</span>          <span class="token operator">||</span>
       `<span class="token string">'"                  \_\
                            `'</span>" </code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
                           _ooOoo_
                          o8888888o
                          88" . "88
                          (| -_- |)
                          O\  =  /O
                       ____/`---'\____
                     .'  \\|     |//  `.
                    /  \\|||  :  |||//  \
                   /  _||||| -:- |||||-  \
                   |   | \\\  -  /// |   |
                   | \_|  ''\---/''  |   |
                   \  .-\__  `-`  ___/-. /
                 ___`. .'  /--.--\  `. . __
              ."" '&lt;  `.___\_&lt;|>_/___.'  >'"".
             | | :  `- \`.;`\ _ /`;.`/ - ` : | |
             \  \ `-.   \_ __\ /__ _/   .-` /  /
        ======`-.____`-.___\_____/___.-`____.-'======
                           `=---='
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 佛祖保佑       永无BUG
        */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**                                                                          
 *          .,:,,,                                        .::,,,::.          
 *        .::::,,;;,                                  .,;;:,,....:i:         
 *        :i,.::::,;i:.      ....,,:::::::::,....   .;i:,.  ......;i.        
 *        :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i.        
 *        ;;..,::::;;;;ri,,,.                    ..,,:;s1s1ssrr;,.;r,        
 *        :;. ,::;ii;:,     . ...................     .;iirri;;;,,;i,        
 *        ,i. .;ri:.   ... ............................  .,,:;:,,,;i:        
 *        :s,.;r:... ....................................... .::;::s;        
 *        ,1r::. .............,,,.,,:,,........................,;iir;        
 *        ,s;...........     ..::.,;:,,.          ...............,;1s        
 *       :i,..,.              .,:,,::,.          .......... .......;1,       
 *      ir,....:rrssr;:,       ,,.,::.     .r5S9989398G95hr;. ....,.:s,      
 *     ;r,..,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r:     
 *    :r;..rGGh,  :SAG;;G@BS:.,,,,,,,,,.r83:      hHH1sXMBHHHM3..,,,,.ir.    
 *   ,si,.1GS,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH#X,.,,,,,,rr    
 *   ;1:,,SH:   .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,   
 *  .rr,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.  
 *  :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr.      ...,:rs.  
 *  ;s.     .:sS8G8GG889hi.        ....,,:;:,.:irssrriii:,.        ...,,i1,  
 *  ;1,         ..,....,,isssi;,        .,,.                      ....,.i1,  
 *  ;h:               i9HHBMBBHAX9:         .                     ...,,,rs,  
 *  ,1i..            :A#MBBBBMHB##s                             ....,,,;si.  
 *  .r1,..        ,..;3BMBBBHBB#Bh.     ..                    ....,,,,,i1;   
 *   :h;..       .,..;,1XBMMMMBXs,.,, .. :: ,.               ....,,,,,,ss.   
 *    ih: ..    .;;;, ;;:s58A3i,..    ,. ,.:,,.             ...,,,,,:,s1,    
 *    .s1,....   .,;sh,  ,iSAXs;.    ,.  ,,.i85            ...,,,,,,:i1;     
 *     .rh: ...     rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;      
 *      .s5: .....    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       ........,,,,:,,sh;       
 *      . ihr, ...  .         ..                    ........,,,,,;11:.       
 *         ,s1i. ...  ..,,,..,,,.,,.,,.,..       ........,,.,,.;s5i.         
 *          .:s1r,......................       ..............;shs,           
 *          . .:shr:.  ....                 ..............,ishs.             
 *              .,issr;,... ...........................,is1s;.               
 *                 .,is1si;:,....................,:;ir1sr;,                  
 *                    ..:isssssrrii;::::::;;iirsssssr;:..                    
 *                         .,::iiirsssssssssrri;;:.                      
 */</span>                      
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**                                                                    
 *            .,,       .,:;;iiiiiiiii;;:,,.     .,,                   
 *          rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,                
 *         r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,               
 *            .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:                  
 *          :rsriii;;r::::::::::::::::::::::;;,;;iiirsi,               
 *       .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.           
 *    ,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.       
 *   ,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@@s,,:::;;;::,,.   .;.      
 *    :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..       
 *   .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri         
 *   iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;        
 *  ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.       
 *  iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:       
 * .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri       
 * ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.      
 * ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.      
 * ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.      
 * .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri       
 *  ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:       
 *  .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri        
 *   ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,        
 *    irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:         
 *     irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:          
 *      ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:           
 *       :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,            
 *        .;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr:              
 *          .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.               
 *            .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,                  
 *               .:irrrriiiiii;;;;;;;;iiiiiirrrr;,.                    
 *                  .,:;iirrrrrrrrrrrrrrrrri;:.                        
 *                        ..,:::;;;;:::,,.                             
 */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐
 * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐
 * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐
 * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤
 * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │
 * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │
 * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤
 * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│> .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │
 * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││
 * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│
 * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘
 */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * _ooOoo_
 * o8888888o
 * 88" . "88
 * (| -_- |)
 *  O\ = /O
 * ___/`---'\____
 * .   ' \\| |// `.
 * / \\||| : |||// \
 * / _||||| -:- |||||- \
 * | | \\\ - /// | |
 * | \_| ''\---/'' | |
 * \ .-\__ `-` ___/-. /
 * ___`. .' /--.--\ `. . __
 * ."" '&lt; `.___\_&lt;|>_/___.' >'"".
 * | | : `- \`.;`\ _ /`;.`/ - ` : | |
 * \ \ `-. \_ __\ /__ _/ .-` / /
 * ======`-.____`-.___\_____/___.-`____.-'======
 * `=---='
 *          .............................................
 *           佛曰：bug泛滥，我已瘫痪！
 */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
*      
*          ┌─┐       ┌─┐
*       ┌──┘ ┴───────┘ ┴──┐
*       │                 │
*       │       ───       │
*       │  ─┬┘       └┬─  │
*       │                 │
*       │       ─┴─       │
*       │                 │
*       └───┐         ┌───┘
*           │         │
*           │         │
*           │         │
*           │         └──────────────┐
*           │                        │
*           │                        ├─┐
*           │                        ┌─┘    
*           │                        │
*           └─┐  ┐  ┌───────┬──┐  ┌──┘         
*             │ ─┤ ─┤       │ ─┤ ─┤         
*             └──┴──┘       └──┴──┘ 
*                 神兽保佑 
*                 代码无BUG! 
*/</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 *   ┏┓　　　┏┓
 * ┏┛┻━━━┛┻┓
 * ┃　　　　　　　┃
 * ┃　　　━　　　┃
 * ┃　┳┛　┗┳　┃
 * ┃　　　　　　　┃
 * ┃　　　┻　　　┃
 * ┃　　　　　　　┃
 * ┗━┓　　　┏━┛
 *    ┃　　　┃   
 *    ┃　　　┃   
 *    ┃　　　┗━━━┓
 *    ┃　　　　　　　┣┓
 *    ┃　　　　　　　┏┛
 *    ┗┓┓┏━┳┓┏┛
 *      ┃┫┫　┃┫┫
 *      ┗┻┛　┗┻┛
 *        神兽保佑 
 *        代码无BUG! 
 */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 *                  ___====-_  _-====___
 *            _--^^^#####//      \\#####^^^--_
 *         _-^##########// (    ) \\##########^-_
 *        -############//  |\^^/|  \\############-
 *      _/############//   (@::@)   \\############\_
 *     /#############((     \\//     ))#############\
 *    -###############\\    (oo)    //###############-
 *   -#################\\  / VV \  //#################-
 *  -###################\\/      \//###################-
 * _#/|##########/\######(   /\   )######/\##########|\#_
 * |/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|
 * `  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '
 *    `   `  `      `   / | |  | | \   '      '  '   '
 *                     (  | |  | |  )
 *                    __\ | |  | | /__
 *                   (vvv(VVV)(VVV)vvv)                
 *                        神兽保佑
 *                       代码无BUG!
 */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//                             _______________________________________  </span>
<span class="token comment" spellcheck="true">//                            /  ___________________________________  \</span>
<span class="token comment" spellcheck="true">//     _--""""--_            /  /_/_/_/_/_|_|_|_|_|_|_|_|_|_\_\_\_\_\  \</span>
<span class="token comment" spellcheck="true">//    /          \          /  /_/_/_/_J__L_L_L_|_|_|_J_J_J__L_\_\_\_\  \</span>
<span class="token comment" spellcheck="true">//   /\          /\        /  /_/_/_J__L_J__L_L_|_|_|_J_J__L_J__L_\_\_\  \</span>
<span class="token comment" spellcheck="true">//   L ""-____-"" J       /  /_/_J__L_J__L_J_J__L_|_J__L_L_J__L_J__L_\_\  \</span>
<span class="token comment" spellcheck="true">//   \            /      /  /_/__L_/__L_J__L_J__L_|_J__L_J__L_J__\_J__\_\  \</span>
<span class="token comment" spellcheck="true">//    \_        _/      /  /_J__/_J__/__L_J__|__L_|_J__|__L_J__\__L_\__L_\  \</span>
<span class="token comment" spellcheck="true">//  _--"""""--_"       /  /  F /  F J  J  |  F J  |  F J  |  F  F J  \ J  \  \</span>
<span class="token comment" spellcheck="true">// /           \      /  /--/-J--/--L--|--L-J--J--|--L--L-J--|--J--\--L-\--\  \</span>
<span class="token comment" spellcheck="true">///\           /\    /  /__/__L_J__J___L_J__J__|__|__|__L__L_J___L__L_J__\__\  \</span>
<span class="token comment" spellcheck="true">//L ""-_____-"" J   /  /  /  /  F  F  J  J  |  |  |  |  |  F  F  J  J  \  \  \  \</span>
<span class="token comment" spellcheck="true">//\             /  /  /--/--/--/--J---L--|--|--|--o--|--|--|--J---L--\--\--\--\  \</span>
<span class="token comment" spellcheck="true">// \_         _/  /  /__/__J__J___L__J___L__L__L__|__J__J__J___L__J___L__L__\__\  \</span>
<span class="token comment" spellcheck="true">//   "--___--"   /  /  /   F  F  J   F  J  J   F  |  J   F  F  J   F  J  J   \  \  \</span>
<span class="token comment" spellcheck="true">//              /  /--/---/--J---L--J---L--|--J---|---L--|--J---L--J---L--\---\--\  \</span>
<span class="token comment" spellcheck="true">//             /  /__J___/___L__/___L__J___L__J___|___L__J___L__J___\__J___\___L__\  \</span>
<span class="token comment" spellcheck="true">//            /  /   F  J   /  J   J   |  J   J   |   F   F  |   F   F  \   F  J   \  \</span>
<span class="token comment" spellcheck="true">//           /  /---/---L--J---L---L---L--|---|---|---|---|--J---J---J---L--J---\---\  \</span>
<span class="token comment" spellcheck="true">//          /  /___/___/___L__J___J___J___|___|___|___|___|___L___L___L__J___\___\___\  \</span>
<span class="token comment" spellcheck="true">//         /  /   /   /   /   F   F   F   F   F   |   J   J   J   J   J   \   \   \   \  \</span>
<span class="token comment" spellcheck="true">//        /  /___/___J___J___J___J___J____L___L___|___J___J____L___L___L___L___L___\___\  \</span>
<span class="token comment" spellcheck="true">//       /  /   /    F   F   F   |   |   J    F   |   J    F   |   |   J   J   J    \   \  \</span>
<span class="token comment" spellcheck="true">//      /  /___J____/___/___J____L___L___|___J____|____L___|___J___J____L___\___\____L___\  \</span>
<span class="token comment" spellcheck="true">//     /  /    F   /   J    F   J   J    |   J    |    F   |    F   F   J    F   \   J    \  \</span>
<span class="token comment" spellcheck="true">//    /  /____/___J____L___/____L___|____L___|____|____|___J____|___J____\___J____L___\____\  \</span>
<span class="token comment" spellcheck="true">//   /  /    /    F   /   J    J    F   J    F    |    J    F   J    F    F   \   J    \    \  \</span>
<span class="token comment" spellcheck="true">//  /  /____/____/___J____L____|____L___J____L____|____J____L___J____|____J____L___\____\____\  \</span>
<span class="token comment" spellcheck="true">// /                                                                                             \</span>
<span class="token comment" spellcheck="true">///_______________________________________________________________________________________________\</span>
<span class="token comment" spellcheck="true">//|                                                                                               |</span>
<span class="token comment" spellcheck="true">//| hs                                                                                            |</span>
<span class="token comment" spellcheck="true">//|_______________________________________________________________________________________________|</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * https://www.zhihu.com/
 *           _____                    _____                    _____                    _____          
 *          /\    \                  /\    \                  /\    \                  /\    \         
 *         /::\____\                /::\    \                /::\    \                /::\    \        
 *        /:::/    /                \:::\    \              /::::\    \              /::::\    \       
 *       /:::/    /                  \:::\    \            /::::::\    \            /::::::\    \      
 *      /:::/    /                    \:::\    \          /:::/\:::\    \          /:::/\:::\    \     
 *     /:::/____/                      \:::\    \        /:::/__\:::\    \        /:::/__\:::\    \    
 *    /::::\    \                      /::::\    \      /::::\   \:::\    \      /::::\   \:::\    \   
 *   /::::::\    \   _____    ____    /::::::\    \    /::::::\   \:::\    \    /::::::\   \:::\    \  
 *  /:::/\:::\    \ /\    \  /\   \  /:::/\:::\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \
 * /:::/  \:::\    /::\____\/::\   \/:::/  \:::\____\/:::/  \:::\   \:::|    |/:::/__\:::\   \:::\____\
 * \::/    \:::\  /:::/    /\:::\  /:::/    \::/    /\::/   |::::\  /:::|____|\:::\   \:::\   \::/    /
 *  \/____/ \:::\/:::/    /  \:::\/:::/    / \/____/  \/____|:::::\/:::/    /  \:::\   \:::\   \/____/
 *           \::::::/    /    \::::::/    /                 |:::::::::/    /    \:::\   \:::\    \     
 *            \::::/    /      \::::/____/                  |::|\::::/    /      \:::\   \:::\____\    
 *            /:::/    /        \:::\    \                  |::| \::/____/        \:::\   \::/    /    
 *           /:::/    /          \:::\    \                 |::|  ~|               \:::\   \/____/     
 *          /:::/    /            \:::\    \                |::|   |                \:::\    \         
 *         /:::/    /              \:::\____\               \::|   |                 \:::\____\        
 *         \::/    /                \::/    /                \:|   |                  \::/    /        
 *          \/____/                  \/____/                  \|___|                   \/____/         
 */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
                       _.---..._
                   ./^         ^-._
                 ./^C===.         ^\.   /\
                .|'     \\        _ ^|.^.|
           ___.--'_     ( )  .      ./ /||
          /.---^T\      ,     |     / /|||
         C'   ._`|  ._ /  __,-/    / /-,||
              \ \/    ;  /O  / _    |) )|,
               i \./^O\./_,-^/^    ,;-^,'
                \ |`--/ ..-^^      |_-^
                 `|  \^-           /|:
                  i.  .--         / '|.
                   i   =='       /'  |\._
                 _./`._        //    |.  ^-ooo.._
          _.oo../'  |  ^-.__./X/   . `|    |#######b
         d####     |'      ^^^^   /   |    _\#######
         #####b ^^^^^^^^--. ...--^--^^^^^^^_.d######
         ######b._         Y            _.d#########
         ##########b._     |        _.d#############

                                        "Piccolo" no. 2
                                           (from Dragonball Z)
                                                --- Steven J. Simmons
         */</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
                           _
                           \"-._ _.--"~~"--._
                            \   "            ^.    ___
                            /                  \.-~_.-~
                     .-----'     /\/"\ /~-._      /
                    /  __      _/\-.__\L_.-/\     "-.
                   /.-"  \    ( ` \_o>"&lt;o_/  \  .--._\
                  /'      \    \:     "     :/_/     "`
                          /  /\ "\    ~    /~"
                          \ I  \/]"-._ _.-"[
                       ___ \|___/ ./    l   \___   ___
                  .--v~   "v` ( `-.__   __.-' ) ~v"   ~v--.
               .-{   |     :   \_    "~"    _/   :     |   }-.
              /   \  |           ~-.,___,.-~           |  /   \
             ]     \ |                                 | /     [
             /\     \|     :                     :     |/     /\
            /  ^._  _K.___,^                     ^.___,K_  _.^  \
           /   /  "~/  "\                           /"  \~"  \   \
          /   /    /     \ _          :          _ /     \    \   \
        .^--./    /       Y___________l___________Y       \    \.--^.
        [    \   /        |        [/    ]        |        \   /    ]
        |     "v"         l________[____/]________j  -Row   }r"     /
        }------t          /                       \       /`-.     /
        |      |         Y                         Y     /    "-._/
        }-----v'         |         :               |     7-.     /
        |   |_|          |         l               |    / . "-._/
        l  .[_]          :          \              :  r[]/_.  /
         \_____]                     "--.             "-.____/

                                            "Dragonball Z"
                                                        ---Row

        */</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>注释</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中Mybatis的使用-注解</title>
    <url>/2020/02/16/spring-boot-zhong-mybatis-de-shi-yong-zhi-zhu-jie/</url>
    <content><![CDATA[<h3 id="Mybatis的两种使用方法："><a href="#Mybatis的两种使用方法：" class="headerlink" title="Mybatis的两种使用方法："></a>Mybatis的两种使用方法：</h3><ul>
<li>1.使用xml的方式</li>
<li>2.使用注解的方式</li>
</ul>
<p>之前记录了XML方式，这里介绍注解的方式。</p>
<h3 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a>主要步骤：</h3><ul>
<li>1.添加依赖</li>
<li>2.编写mybatis应用</li>
</ul>
<h4 id="Step-1-添加依赖"><a href="#Step-1-添加依赖" class="headerlink" title="Step 1 :添加依赖"></a>Step 1 :添加依赖</h4><p>在pom.xml添加以下依赖：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="Step-2：编写代码"><a href="#Step-2：编写代码" class="headerlink" title="Step 2：编写代码"></a>Step 2：编写代码</h4><p>1.实体类 Book</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>book<span class="token punctuation">.</span>model<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>

    <span class="token keyword">public</span> Double <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span>Double price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> Double price<span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> image<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImage</span><span class="token punctuation">(</span>String image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span>String description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> String image<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> author<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Book{"</span> <span class="token operator">+</span>
                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", author='"</span> <span class="token operator">+</span> author <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", price='"</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", image='"</span> <span class="token operator">+</span> image <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", description='"</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">'}'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>2.dao：BookDao</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>
    String table_name<span class="token operator">=</span><span class="token string">"book"</span><span class="token punctuation">;</span>
    String insert_filed<span class="token operator">=</span><span class="token string">"name,author,price,image,description"</span><span class="token punctuation">;</span>
    String select_field <span class="token operator">=</span> <span class="token string">" id, status, "</span> <span class="token operator">+</span> insert_filed<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//查询全部书籍</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"select * from"</span><span class="token punctuation">,</span>table_name<span class="token punctuation">}</span><span class="token punctuation">)</span>
    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//根据name查找id</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"select id from"</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">"where name=#{name}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    Book <span class="token function">selectBookByName</span><span class="token punctuation">(</span>String Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//根据id查找全部信息</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"select * from"</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">"where id=#{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    Book <span class="token function">selectBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//根据id删除指定书籍</span>
    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"delete "</span><span class="token punctuation">,</span><span class="token string">"from"</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">"where id=#{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//根据指定的书名删除书籍</span>
    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"delete "</span><span class="token punctuation">,</span><span class="token string">"from"</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">"where name=#{name}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">deleteBookByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//添加新的书籍</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"insert into"</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">"("</span><span class="token punctuation">,</span>insert_filed<span class="token punctuation">,</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"values(#{name},#{author},#{price},#{image},#{description})"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"update "</span><span class="token punctuation">,</span> table_name<span class="token punctuation">,</span> <span class="token string">" set name=#{name},author=#{author},price=#{price},image=#{image},description=#{description} where id=#{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">updateBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span> Double price<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span> String image<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span> String description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>3.cntroller：BookController</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">bookController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> BookDao bookDao<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> ModelAndView <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span>bookDao<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ModelAndView modelAndView <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"booklist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  modelAndView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/book/del/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer Id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>
       bookDao<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span>bookDao<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"books"</span> <span class="token punctuation">,</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"redirect:/book"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/book/predit/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">preUpdateBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer Id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Book book <span class="token operator">=</span>bookDao<span class="token punctuation">.</span><span class="token function">selectBookById</span><span class="token punctuation">(</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"book"</span> <span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"addbook"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复用代码</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/book/editok/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">UpdateBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer Id<span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span>String price<span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span> String image<span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span> String description<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Id<span class="token operator">+</span>name<span class="token operator">+</span>author<span class="token operator">+</span>price<span class="token operator">+</span>image<span class="token operator">+</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Double Price <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bookDao<span class="token punctuation">.</span><span class="token function">updateBookById</span><span class="token punctuation">(</span>Id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>author<span class="token punctuation">,</span>Price<span class="token punctuation">,</span>image<span class="token punctuation">,</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"editsuccess"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book/look/return"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">reBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"redirect:/book"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book/newbook"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">openAddBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"addbook"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/book/addbook"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">addBook</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span> String price<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span> String image<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span> String description<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Double Price <span class="token operator">=</span>Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
        book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        book<span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
        book<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bookDao<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"addsuccess"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/lookbook"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">queryAllbook</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span>bookDao<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"books"</span> <span class="token punctuation">,</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"lookbook"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>注解用的不多，用的比较多的是XML方式，但注解好像更方便一些，以后再慢慢使用.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Springboot框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown书写规范</title>
    <url>/2020/02/15/markdown-shu-xie-gui-fan/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Markdown是一种「标记语言」，通常为程序员群体所用.除此之外，Markdown也是国际杂志编辑以及许多写作者都广泛使用的标记语言.我们在写一些文档的时候就要方便易懂.</p>
<p>Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>
<h1 id="Markdown-的优点如下："><a href="#Markdown-的优点如下：" class="headerlink" title="Markdown 的优点如下："></a>Markdown 的优点如下：</h1><ul>
<li><p>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</p>
</li>
<li><p>让你专注于文字而不是排版。</p>
</li>
<li><p>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</p>
</li>
<li><p>Markdown 的标记语法有极好的可读性。</p>
</li>
</ul>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h2><p>***、—、___可以显示横线效果</p>
<hr>
<hr>
<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h3><p>这是一段普通的文本</p>
<h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><pre><code>Hello,大家好，我是 hzw。</code></pre><p>在一行开头加入 1 个 Tab 或者 4 个空格。</p>
<h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法 1"></a>语法 1</h4><p>在连续几行的文本开头加入 1 个 Tab 或者 4 个空格。</p>
<pre><code>欢迎到访
很高兴见到您</code></pre><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法 2"></a>语法 2</h4><p>使用一对各三个的反引号：</p>
<pre><code>欢迎到访
很高兴见到您</code></pre><p>该语法也可以实现代码高亮，见<a href="https://huangzhiwu98.top/posts/15814.html#代码高亮">代码高亮</a></p>
<h3 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h3><p>文字高亮功能能使行内部分文字高亮，使用一对反引号。</p>
<p>语法：</p>
<pre><code>`linux` `网络编程` `socket` `epoll` </code></pre><p>效果：<code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p>
<p>也适合做一篇文章的 tag</p>
<h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>直接回车不能换行，可以在上一行文本后面补两个空格，这样下一行的文本就换行了。</p>
<p>或者就是在两行文本直接加一个空行。</p>
<p>也能实现换行效果，不过这个行间距有点大。</p>
<h4 id="斜体、粗体、删除线"><a href="#斜体、粗体、删除线" class="headerlink" title="斜体、粗体、删除线"></a>斜体、粗体、删除线</h4><table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>*斜体1*</code></td>
<td align="left"><em>斜体1</em></td>
</tr>
<tr>
<td align="left"><code>_斜体2_</code></td>
<td align="left"><em>斜体2</em></td>
</tr>
<tr>
<td align="left"><code>**粗体1**</code></td>
<td align="left"><strong>粗体1</strong></td>
</tr>
<tr>
<td align="left"><code>__粗体2__</code></td>
<td align="left"><strong>粗体2</strong></td>
</tr>
<tr>
<td align="left"><code>这是一个 ~~删除线~~</code></td>
<td align="left">这是一个 <del>删除线</del></td>
</tr>
<tr>
<td align="left"><code>***斜粗体1***</code></td>
<td align="left"><strong><em>斜粗体1\</em></strong></td>
</tr>
<tr>
<td align="left"><code>___斜粗体2___</code></td>
<td align="left"><strong><em>斜粗体2\</em></strong></td>
</tr>
<tr>
<td align="left"><code>***~~斜粗体删除线1~~***</code></td>
<td align="left"><strong><em><del>斜粗体删除线1</del>\</em></strong></td>
</tr>
<tr>
<td align="left"><code>~~***斜粗体删除线2***~~</code></td>
<td align="left"><del><strong><em>斜粗体删除线2\</em></strong></del></td>
</tr>
</tbody></table>
<p>斜体、粗体、删除线可混合使用</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>基本格式：</p>
<pre><code>![alt](URL title)</code></pre><p><code>alt</code> 和 <code>title</code> 即对应 <code>HTML</code> 中的 <code>alt</code> 和 <code>title</code> 属性（都可省略）：</p>
<ul>
<li><code>alt</code> 表示图片显示失败时的替换文本</li>
<li><code>title</code> 表示鼠标悬停在图片时的显示文本（注意这里要加引号）</li>
</ul>
<p><code>URL</code> 即图片的 <code>url</code> 地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>就可了，如果引用其他 <code>github</code> 仓库中的图片要注意格式，即：<code>仓库地址/raw/分支名/图片路径</code>，如：</p>
<pre><code>https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif</code></pre><table>
<thead>
<tr>
<th align="left">#</th>
<th align="left">语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>![baidu](http://www.baidu.com/img/bdlogo.gif "百度logo")</code></td>
<td align="left"><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu"><strong>baidu</strong></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>![][Github]</code></td>
<td align="left"><img src="https://raw.githubusercontent.com/huangzhiwu98/huangzhiwu98.github.io/master/img/avatar-ny.jpg" alt="img"></td>
</tr>
</tbody></table>
<p>注意 <code>例2</code> 的写法使用了<strong>URL标识符</strong>的形式，在<a href="https://huangzhiwu98.top/posts/15814.html#链接">链接</a>一节有介绍。</p>
<blockquote>
<p>在文末有 <code>Github</code> 的定义：</p>
</blockquote>
<pre><code>[Github]:https://raw.githubusercontent.com/huangzhiwu98/huangzhiwu98.github.io/master/img/avatar-ny.jpg</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="链接外部URL"><a href="#链接外部URL" class="headerlink" title="链接外部URL"></a>链接外部URL</h3><table>
<thead>
<tr>
<th align="left">#</th>
<th align="left">语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>[我的博客](http://huangzhiwu98.top "悬停显示")</code></td>
<td align="left"><a href="https://huangzhiwu98.top/go.html?u=aHR0cDovL3NpdG9pLmNu">我的博客</a></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>[我的知乎][zhihu]</code></td>
<td align="left"><a href="https://huangzhiwu98.top/go.html?u=aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9TaXRvaQ==">我的知乎</a></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>[zhihu](https://www.zhihu.com/people/tabesc"我的知乎，欢迎关注")</code></td>
<td align="left"><a href="https://huangzhiwu98.top/go.html?u=aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9TaXRvaQ==">zhihu</a></td>
</tr>
</tbody></table>
<p>语法2 由两部分组成：</p>
<ul>
<li>第一部分使用两个中括号，[ ]里的标识符（本例中 <code>zhihu</code>），可以是数字，字母等的组合，标识符上下对应就行了（<strong>姑且称之为URL标识符</strong>）</li>
<li>第二部分标记实际 <code>URL</code>。</li>
</ul>
<blockquote>
<p>使用 <code>URL</code> 标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。</p>
</blockquote>
<h3 id="链接本仓库里的URL"><a href="#链接本仓库里的URL" class="headerlink" title="链接本仓库里的URL"></a>链接本仓库里的URL</h3><table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">`[我的简介]</td>
<td align="left">(/example/profile.md)`</td>
</tr>
<tr>
<td align="left">`[Book]</td>
<td align="left">(./Book)`</td>
</tr>
</tbody></table>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>给图片加链接的本质是混合图片显示语法和普通的链接语法。<br>普通的链接中 <code>[ ]</code> 内部是链接要显示的文本，而图片链接 <code>[ ]</code> 里面则是要显示的图片。<br>直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用 <code>URL</code> 标识符的形式。</p>
<table>
<thead>
<tr>
<th align="left">#</th>
<th align="left">语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>[![zhihu-logo]](https://www.zhihu.com/people/tabesc)</code></td>
<td align="left"><a href="https://huangzhiwu98.top/go.html?u=aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9TaXRvaQ=="><img src="https://tabesc.cn/img/zhihu.jpg" alt="zhihu-logo"><strong>zhihu-logo</strong></a></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>[![](/img/zhihu.jpg "我的知乎，欢迎关注")][zhihu]</code></td>
<td align="left"><a href="https://huangzhiwu98.top/go.html?u=aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9TaXRvaQ=="><img src="https://tabesc.cn/img/zhihu.jpg" alt="我的知乎，欢迎关注"><strong>我的知乎，欢迎关注</strong></a></td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><code>[![zhihu-logo]][zhihu]</code></td>
<td align="left"><a href="https://huangzhiwu98.top/go.html?u=aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9TaXRvaQ=="><img src="https://tabesc.cn/img/zhihu.jpg" alt="zhihu-logo"><strong>zhihu-logo</strong></a></td>
</tr>
</tbody></table>
<p>因为图片本身和链接本身都支持 <code>URL</code> 标识符的形式，所以图片链接也可以很简洁（见例3）。</p>
<p>注意，此时鼠标悬停时显示的文字是图片的 <code>title</code>，而非链接本身的 <code>title</code> 了。</p>
<blockquote>
<p>本文 <code>URL</code> 标识符都放置于文末</p>
</blockquote>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>其实呢，每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似，比如我们</p>
<table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[回到顶部](#gfm)</code></td>
<td align="left"><a href="https://huangzhiwu98.top/2020/02/15/markdown-shu-xie-gui-fan/#gfm">回到顶部</a></td>
</tr>
</tbody></table>
<p>不过要注意，标题中的英文字母都被转化为<strong>小写字母</strong>了。</p>
<blockquote>
<p>以前 <code>GitHub</code> 对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li><p>昵称：hzw</p>
</li>
<li><p>别名：hzw</p>
</li>
<li><p>英文名：hzw</p>
</li>
</ul>
<h3 id="多级无序列表"><a href="#多级无序列表" class="headerlink" title="多级无序列表"></a>多级无序列表</h3><ul>
<li>编程语言<ul>
<li>脚本语言<ul>
<li>Python</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><h4 id="一般效果"><a href="#一般效果" class="headerlink" title="一般效果"></a>一般效果</h4><p>就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。<br>面向对象的三个基本特征：</p>
<ol>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ol>
<h4 id="有序列表自动排序"><a href="#有序列表自动排序" class="headerlink" title="有序列表自动排序"></a>有序列表自动排序</h4><p>也可以在第一行指定<code>1.</code>，而接下来的几行用星号<code>*</code>（或者继续用数字1. ）就可以了，它会自动显示成2、3、4……。<br>面向对象的七大原则：</p>
<ol>
<li>开闭原则</li>
</ol>
<ul>
<li>里氏转换原则</li>
<li>依赖倒转原则</li>
<li>接口隔离原则</li>
<li>组合/聚合复用原则</li>
<li>“迪米特”法则</li>
<li>单一职责原则</li>
</ul>
<h4 id="多级有序列表"><a href="#多级有序列表" class="headerlink" title="多级有序列表"></a>多级有序列表</h4><p>和无序列表一样，有序列表也有多级结构：</p>
<ol>
<li>这是一级的有序列表，数字1还是1<ol>
<li>这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字<ol>
<li>这是三级的有序列表，数字在显示的时候变成了英文字母<ol>
<li>四级的有序列表显示效果，就不再变化了，依旧是英文字母</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><ul>
<li>需求分析</li>
<li>系统设计</li>
<li>详细设计</li>
<li>编码</li>
<li>测试</li>
<li>交付</li>
</ul>
<p>您可以使用这个功能来标注某个项目各项任务的完成情况。</p>
<blockquote>
<p>Tip:</p>
<blockquote>
<p>在 <code>GitHub</code> 的<strong>issue</strong>中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改 <code>issue</code> 原文。</p>
</blockquote>
</blockquote>
<h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><h3 id="块引用有多级结构"><a href="#块引用有多级结构" class="headerlink" title="块引用有多级结构"></a>块引用有多级结构</h3><blockquote>
<p>数据结构</p>
<blockquote>
<p>树</p>
<blockquote>
<p>二叉树</p>
<blockquote>
<p>平衡二叉树</p>
<blockquote>
<p>满二叉树</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。</p>
<p>Java</p>
<pre class=" language-Java"><code class="language-Java">public static void main(String[]args){} //Java</code></pre>
<p>C</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//C</span></code></pre>
<p>Bash</p>
<pre class=" language-Bash"><code class="language-Bash">echo "hello GitHub" #Bash</code></pre>
<p>Javascript</p>
<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myH1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"Welcome to my Homepage"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//javascipt</span></code></pre>
<p>Cpp</p>
<pre class=" language-cpp"><code class="language-cpp">string <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> A<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//cpp</span></code></pre>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th align="left">表头1</th>
<th align="left">表头2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">表格单元</td>
<td align="left">表格单元</td>
</tr>
<tr>
<td align="left">表格单元</td>
<td align="left">表格单元</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">表头1</th>
<th align="left">表头2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">表格单元</td>
<td align="left">表格单元</td>
</tr>
<tr>
<td align="left">表格单元</td>
<td align="left">表格单元</td>
</tr>
</tbody></table>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>表格可以指定对齐方式</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="left">居中</th>
<th align="left">右对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col 3 is</td>
<td align="left">some wordy text</td>
<td align="left">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="left">centered</td>
<td align="left">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="left">are neat</td>
<td align="left">$1</td>
</tr>
</tbody></table>
<h3 id="混合其他语法"><a href="#混合其他语法" class="headerlink" title="混合其他语法"></a>混合其他语法</h3><p>表格单元中的内容可以和其他大多数GFM语法配合使用，如：</p>
<h4 id="使用普通文本的删除线，斜体等效果"><a href="#使用普通文本的删除线，斜体等效果" class="headerlink" title="使用普通文本的删除线，斜体等效果"></a>使用普通文本的删除线，斜体等效果</h4><table>
<thead>
<tr>
<th align="left">名字</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Help</td>
<td align="left"><del>Display the</del> help window.</td>
</tr>
<tr>
<td align="left">Close</td>
<td align="left"><em>Closes</em> a window</td>
</tr>
</tbody></table>
<h4 id="表格中嵌入图片（链接）"><a href="#表格中嵌入图片（链接）" class="headerlink" title="表格中嵌入图片（链接）"></a>表格中嵌入图片（链接）</h4><p>其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。</p>
<table>
<thead>
<tr>
<th align="left">图片</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu"><strong>baidu</strong></td>
<td align="left">百度</td>
</tr>
</tbody></table>
<h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p><code>Github</code> 的 <code>Markdown</code> 语法支持添加 <code>emoji</code> 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p>
<p>比如 <code>:blush:</code>，可以显示 😊。</p>
<p>具体每一个表情的符号码，可以查询 <code>GitHub</code> 的官方网页<a href="https://huangzhiwu98.top/go.html?u=aHR0cDovL3d3dy5lbW9qaS1jaGVhdC1zaGVldC5jb20=">http://www.emoji-cheat-sheet.com</a>。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>可以使用Typora和VsCode进行编辑，可以实现实时预览</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>GET与POST的区别</title>
    <url>/2020/02/14/post-he-get/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>下午学习的时候，忽然看到了POST和GET这个话题，但是一回忆，好像印象里只有GET传递参数时，会把参数直接暴露在URL上，还有POST提交表单刷新时，会弹出一个框，再次提交请求。所以在这里对这两个方式进行归纳。</p>
<h2 id="基本区别"><a href="#基本区别" class="headerlink" title="基本区别"></a>基本区别</h2><p>GET请求在URL中传送的参数是有长度限制的，而POST没有。</p>
<p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p>
<p>GET参数通过URL传递，POST放在Request body中。</p>
<p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>
<p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>
<p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>
<h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><p>GET和POST本质上没有区别</p>
<p>GET和POST是HTTP协议中的两种发送请求的方法。</p>
<p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。</p>
<p>这里引用一段话：</p>
<blockquote>
<p>TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。</p>
<p>但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。</p>
<p>为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，</p>
<p>HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。</p>
<p>如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。</p>
<p>HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p>
</blockquote>
<h2 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别"></a>其他区别</h2><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p>
<p>对于GET方式的请求，浏览器会把http header和data一并发送出去。</p>
<p>而对于POST，浏览器先发送header，浏览器再发送data。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>二者的区别主要体现在参数传递、URL长度、安全性、数据包等方面。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>post和get</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中Mybatis的使用-XML</title>
    <url>/2020/02/13/spring-boot-zhong-mybatis-de-shi-yong-zhi-xml/</url>
    <content><![CDATA[<h3 id="Mybatis的两种使用方法："><a href="#Mybatis的两种使用方法：" class="headerlink" title="Mybatis的两种使用方法："></a>Mybatis的两种使用方法：</h3><ul>
<li>1.使用xml的方式</li>
<li>2.使用注解的方式</li>
</ul>
<p>在之前写的那个项目里用的都是xml方式，这里先介绍XML方法。</p>
<h3 id="一：XML方式的整合及增删改查"><a href="#一：XML方式的整合及增删改查" class="headerlink" title="一：XML方式的整合及增删改查"></a>一：XML方式的整合及增删改查</h3><h4 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a>主要步骤：</h4><ul>
<li>添加Mybatis对应的依赖</li>
<li>在application.properties添加配置信息</li>
<li>创建mybatis-config.xml文件</li>
<li>编写mybatis应用</li>
</ul>
<h4 id="Step-1-添加依赖"><a href="#Step-1-添加依赖" class="headerlink" title="Step 1 :添加依赖"></a>Step 1 :添加依赖</h4><p>在pom.xml添加以下依赖：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="Step-2-配置-application"><a href="#Step-2-配置-application" class="headerlink" title="Step 2:配置 application"></a>Step 2:配置 application</h4><p>1.配置DataSource</p>
<pre class=" language-xml"><code class="language-xml">#DataSource
spring.datasource.url=jdbc:mysql://localhost:3306/example?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;allowMultiQueries=true
spring.datasource.username=root
spring.datasource.password=199828
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></pre>
<p>2.mybatis配置：</p>
<pre class=" language-xml"><code class="language-xml">#mybatis相关配置
#mybatis核心配置文件路径
mybatis.config-location=classpath:/mybatis/mybatis-config.xml
#mapper文件
mybatis.mapper-locations=classpath:/mybatis/mapper/*.xml
#json序列化
spring.jackson.serialization.indent-output=true</code></pre>
<p>3.在resources目录下新建mybatis文件夹，在mybatis文件夹中创建mybatis-config.xml，并且按照以下格式编写：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>
<h3 id="Step3：实现增删改查"><a href="#Step3：实现增删改查" class="headerlink" title="Step3：实现增删改查"></a>Step3：实现增删改查</h3><p>在主包下创建mapper包，创建对应一个实体类(Emp)的接口，例如EmpMapper，在resources-&gt;mybatis-&gt;下创建mapper文件夹，并且创建Emp对应的xml文件empMapper.xml</p>
<p>empMapper.xml中：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token comment" spellcheck="true">&lt;!--映射文件配置 namespace指向接口--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yremp.mybatis.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--select:表示查询，id:对应接口中的方法名,parameterType:参数类型--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yremp.mybatis.entity.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         select * from emp where empid=#{value }
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- java.util.Map:将查询到的每一条记录包装成map，key：字段名 value：字段值--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findDeps<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.LinkedHashMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         select * from emp e,dep d where e.depid=d.depid
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dname!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
             and d.depname=#{dname}
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>salary!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            and e.salary>#{salary}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--新增一条数据--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yremp.mybatis.entity.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        INSERT INTO `example`.`emp`( `name`, `age`, `salary`, `depid`)
        VALUES ( #{name}, #{age}, #{salary}, #{depid})
--         将id回填 select Last_INSERT_ID() 获取最新插入的id
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empid<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empid<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          select Last_INSERT_ID()
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--    更新一条数据--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yremp.mybatis.entity.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        UPDATE `example`.`emp` SET `name` = #{name}, `age` = #{age}, `salary` = #{salary}, `depid` = #{depid} WHERE `empid` = #{empid};
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--    删除一条数据--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        delete from emp where empid=#{value}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<p>entity：Emp实体类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer empid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Double salary<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer depid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> Integer <span class="token function">getEmpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> empid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmpid</span><span class="token punctuation">(</span>Integer empid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empid <span class="token operator">=</span> empid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Double <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span>Double salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getDepid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> depid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepid</span><span class="token punctuation">(</span>Integer depid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>depid <span class="token operator">=</span> depid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>mapper：EmpMapper</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> Emp <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">></span><span class="token function">findDeps</span><span class="token punctuation">(</span>Map param<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer empid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>service：EmpService</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Emp <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> empMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">></span><span class="token function">findDeps</span><span class="token punctuation">(</span>String dname<span class="token punctuation">,</span>Double salary<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map param <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dname"</span><span class="token punctuation">,</span>dname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empMapper<span class="token punctuation">.</span><span class="token function">findDeps</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        empMapper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        empMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer empid<span class="token punctuation">)</span><span class="token punctuation">{</span>
        empMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>empid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>controller:EmpController</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
<span class="token comment" spellcheck="true">//    根据id查询员工</span>
<span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/{id}"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> Emp <span class="token function">findByid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> empService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//根据条件查询符合条件的员工列表</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/query"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">></span><span class="token function">findDeps</span><span class="token punctuation">(</span> String dep<span class="token punctuation">,</span> Double salary<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> empService<span class="token punctuation">.</span><span class="token function">findDeps</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//新建一条员工记录</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/create"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> Emp <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Emp emp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"yhy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setDepid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">5000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        empService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> emp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//更新一条员工记录</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/update"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> Emp <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Emp emp<span class="token operator">=</span>empService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"yhy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setDepid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emp<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">6000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        empService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> emp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//删除一条员工记录</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/delete"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>Integer empid<span class="token punctuation">)</span><span class="token punctuation">{</span>
        empService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>empid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Springboot框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>网络传输协议二</title>
    <url>/2020/02/12/http-yu-https-wang-luo-chuan-shu-xie-yi-er/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>承接HTTP与HTTPS网络传输协议一的内容，简述一下其工作流程和安全性，重要性。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><strong>HTTP</strong> （1）首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。</p>
<p>（2）建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。</p>
<p>（3）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。</p>
<p>（4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p>
<p><strong>HTTPS</strong> （1）Client发起一个HTTPS的请求，Client知道需要连接Server的443（默认）端口。</p>
<p>（2）Server把事先配置好的公钥证书（public key certificate）返回给客户端。</p>
<p>（3）Client合法性验证公钥证书。如果验证通过则继续，不通过则显示警告信息。</p>
<p>（4）Client使用伪随机数生成器生成加密所使用的会话密钥，然后用证书的公钥加密这个会话密钥，发给Server。</p>
<p>（5）Server使用自己的私钥（private key）解密这个消息，得到会话密钥。至此，Client和Server双方都持有了相同的会话密钥。</p>
<p>（6）Server使用会话密钥加密“明文内容A”，发送给Client。</p>
<p>（7）Client使用会话密钥解密响应的密文，得到“明文内容A”。</p>
<p>（8）Client再次发起HTTPS的请求，使用会话密钥加密请求的“明文内容B”，然后Server使用会话密钥解密密文，得到“明文内容B”。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><h3 id="HTTP协议更容易发生流量劫持"><a href="#HTTP协议更容易发生流量劫持" class="headerlink" title="HTTP协议更容易发生流量劫持"></a>HTTP协议更容易发生流量劫持</h3><p>1、<strong>http易致在线应用被劫持（篡改风险）</strong></p>
<p>网页技术在近些年里有了很大的发展，但其底层协议HTTP始终没有太大的改进，HTTP是一种使用了20 多年古老协议。在HTTP 里，一切都是明文传输的，流量在途中可随心所欲的被控制。而在线使用的WebApp，流量里既有通信数据，又有程序的界面和代码，劫持简直轻而易举。因此，劫持网页流量成了各路黑客们的钟爱，一种可在任意网页发起XSS的入侵方式。</p>
<p>2、<strong>HTTP 缓存投毒（冒充风险）</strong></p>
<p>HTTP这种简单的纯文本协议，几乎没有一种签名机制，来验证内容的真实性。即使页面被篡改了，浏览器也完全无法得知，甚至连同注入的脚本也一块缓存起来。但凡具备可执行的资源，都可以通过预加载带毒的版本，将其提前缓存起来。</p>
<p>3、<strong>公共场合使用http，不登陆也会被劫持</strong></p>
<p>在自己的设备上，大家都会记住各种账号的登录状态，反正只有自己用，也没什么大不了的。然而，在被劫持的网络里，即使浏览再平常不过的网页，或许一个悄无声息的间谍脚本已暗藏其中，正偷偷访问你那登录着的网页，操控起你的账号了。</p>
<p>4、<strong>http状态下Cookie 记录或浏览器自动填表单，都会导致账号密码被截获（窃听风险）</strong></p>
<p>http状态下，cookie记录的都是明文的账号密码，被劫持泄露后，即使数量不多，也能通过社工获取到用户的更多信息，最终导致更严重的泄露。</p>
<h3 id="网站实现HTTPS访问能有效避免流量劫持"><a href="#网站实现HTTPS访问能有效避免流量劫持" class="headerlink" title="网站实现HTTPS访问能有效避免流量劫持"></a>网站实现HTTPS访问能有效避免流量劫持</h3><p>网站实现Https访问能有效避免流量劫持，但前提是必须用受信任SSL证书。不同于简单的Http代理，HTTPS 服务需要权威CA机构颁发的SSL证书才算有效。自签证书浏览器不认，而且会给予严重的警告提示。而遇到“此网站安全证书存在问题”的警告时，大多用户不明白是什么情况，就点了继续，导致允许了黑客的伪证书，不受信任的HTTPS 流量因此遭到劫持。</p>
<p>如果重要的账户网站遇到这种情况，无论如何都不该点击继续，否则大门钥匙或许就落入黑客之手。</p>
<blockquote>
<p>流量劫持有多种方法，其中一种是DNS劫持。DNS是负责域名解析的服务器，一旦黑客破坏了DNS解析的过程,输入域名后，可能转化为黑客指定的IP地址，用户往往很难看出破绽，但所有的流量都会转向黑客指定的虚假的服务器，黑客不但可以很容易获取各种密码、个人信息等，还可以植入木马病毒，盗窃个人财产。</p>
</blockquote>
<h2 id="全站实现Https访问的重要性"><a href="#全站实现Https访问的重要性" class="headerlink" title="全站实现Https访问的重要性"></a>全站实现Https访问的重要性</h2><ul>
<li><strong>情况一：从http页面跳转访问https页面</strong></li>
</ul>
<p>在 PC 端上网如果首先进入的网站是使用不安全的HTTP 协议。那么在该网站的页面里注入XSS，屏蔽跳转到 HTTPS 的页面访问，用HTTP 取而代之，那么用户也就永远无法进入安全站点了。尽管地址栏里没有出现 HTTPS 的字样，但域名看起来也是正确的，大多用户都会认为不是钓鱼网站，因此也就忽视了。</p>
<p>因此，只要入口页是不安全的，那么之后的页面再安全也无济于事。</p>
<ul>
<li><strong>情况二：http页面重定向到https页面</strong></li>
</ul>
<p>有一些用户通过输网址访问的，他们输入了http+网址就敲回车进入了。然而，浏览器并不知道这是一个HTTPS 的站点，于是使用默认的 HTTP 去访问。不过这个HTTP 版的页面的确也存在，其唯一功能就是重定向到自己HTTPS 站点上。</p>
<p>劫持流量的中间人一旦发现有重定向到HTTPS 站点的，于是拦下重定向的命令，自己去获取重定向后的站点内容，然后再回复给用户。于是，用户始终都是在HTTP 站点上访问，自然就可以无限劫持了。</p>
<p>国外各大知名网站(PayPal,Twitter,Facebook,Gmail,Hotmail等)都通过Always on SSL(全站https)技术措施来保证用户机密信息和交易安全，防止会话攻击和中间人攻击。</p>
<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><ol>
<li>对称加密：即通信双方通过相同的密钥进行信息的加解密。加解密速度快，但是安全性较差，如果其中一方泄露了密钥，那加密过程就会被人破解。</li>
<li>非对称加密：相比对称加密，它一般有公钥和私钥。公钥负责信息加密，私钥负责信息解密。两把密钥分别由发送双发各自保管，加解密过程需两把密钥共同完成。安全性更高，但同时计算量也比对称加密要大很多。</li>
<li>对于网络通信过程，在安全的前提下，还是需要保证响应速度。如何每次都进行非对称计算，通信过程势必会受影响。所以，人们希望的安全传输，最终肯定是以对称加密的方式进行。</li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>网络传输协议一</title>
    <url>/2020/02/11/http-yu-https-wang-luo-chuan-shu-xie-yi-yi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们每天都会打开浏览器搜索信息，</p>
<p>平时有注意就会发现，地址搜索栏开头一般都是HTTP和HTTPS，这时候好奇的人就会想HTTP和HTTPS会有什么却别呢？</p>
<h2 id="地址格式"><a href="#地址格式" class="headerlink" title="地址格式"></a>地址格式</h2><p>HTTP (浏览器情况下显示问号、不安全)</p>
<p>HTTPS（浏览器展示安全，绿色小锁图标）</p>
<p>多了一个S，这个S指的是SSL证书</p>
<h2 id="传输协议概念"><a href="#传输协议概念" class="headerlink" title="传输协议概念"></a>传输协议概念</h2><p><strong>HTTPS(</strong>全称：Hypertext Transfer Protocol over Secure Socket Layer)，</p>
<p>中文名称为超文本传输安全协议，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。</p>
<p>即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<p>它是一个URI scheme(抽象标识符体系)，句法类同<a href="http://thecat.top/index.php/archives/511/体系" target="_blank" rel="noopener">http:体系</a>。用于安全的HTTP数据传输。</p>
<p><strong>HTTP</strong>（全称：HyperText Transfer Protocol)，</p>
<p>中文名称是超文本传输协议，是互联网上应用最为广泛的一种网络协议。</p>
<p>所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>
<p>从名称上很明显就能看出，两者最大的区别不外乎就是安全</p>
<p><strong>HTTP</strong>和<strong>HTTPS</strong>都属于application layer，基于TCP（以及UDP）协议。</p>
<p>HTTP的端口是80，HTTPS的端口是443</p>
<h2 id="通信传输"><a href="#通信传输" class="headerlink" title="通信传输"></a>通信传输</h2><p><strong>HTTP</strong>的信息采用明文传输，客户端和服务器端都无法验证对方的身份，</p>
<p>通过抓包工具Wireshark可以分析其信息内容。HTTP是用于从WWW服务器传输超文本到本地浏览器的传送协议。</p>
<p><strong>HTTPS</strong>是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，利用SSL/TLS来加密数据包。</p>
<blockquote>
<p>HTTPS协议需要Gworg机构颁发SSL（Secure Sockets Layer）证书。</p>
<p>加密安全，不会被劫持，交易传输数据加密。</p>
<p>需要到CA（Certificate Authority）申请证书，一般免费证书很少，需要交费。</p>
<p>HTTPS服务器要求客户的身份认证时，服务器必须检验客户证书和签名随机数的合法性，</p>
<p>具体的合法性验证过程包括：客户的证书使用日期是否有效，为客户提供证书的CA 是否可靠，</p>
<p>发行CA 的公钥能否正确解开客户证书的发行CA 的数字签名，检查客户的证书是否在证书废止列表（CRL）中。</p>
<p>检验如果没有通过，通讯立刻中断；如果验证通过，服务器将用自己的私钥解开加密的“预主密码”，</p>
<p>然后执行一系列步骤来产生主通讯密码（客户端也将通过同样的方法产生相同的主通讯密码）。</p>
</blockquote>
<p><strong>所以</strong>：HTTP网站安全性不高，不需要证书，很容易被复制。很容易被劫持，打开网页可能会直接跳到另一个网站。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>实用的在线网站</title>
    <url>/2020/02/10/shi-yong-de-zai-xian-wang-zhan/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一些实用的在线网站</p>
<h2 id="文档类"><a href="#文档类" class="headerlink" title="文档类"></a>文档类</h2><h3 id="1-轻松玩转PDF"><a href="#1-轻松玩转PDF" class="headerlink" title="1. 轻松玩转PDF"></a>1. 轻松玩转PDF</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9zbWFsbHBkZi5jb20vY24=" target="_blank" rel="noopener">https://smallpdf.com/cn</a></p>
<p>这个网站非常好用，提供了很多的实用功能，如PDF转换Word，PDF转换PPT，PDF编辑，PDF加密，Word转换PDF等等</p>
<h3 id="2-Convertio：在线的文件转换器"><a href="#2-Convertio：在线的文件转换器" class="headerlink" title="2. Convertio：在线的文件转换器"></a>2. Convertio：在线的文件转换器</h3><p>这个网站也提供在线免费的文件转换器，将文件转换为不同的格式，不注册的话也可以使用，限制最大文件的大小为<strong>100MB</strong>，超过这个文件大小的最大限制，需要进行注册，收费。</p>
<h3 id="3-CleverPDF"><a href="#3-CleverPDF" class="headerlink" title="3. CleverPDF"></a>3. CleverPDF</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuY2xldmVycGRmLmNvbS9jbg==" target="_blank" rel="noopener">https://www.cleverpdf.com/cn</a></p>
<p>27个强大的PDF在线工具，完全免费！而且还提供Windows客户端，不过在线的，客户点有一定的限制，网上也有破解的客户端，👉 <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMV9FNmI0MnpobkVOM0FBR0dHRWZmeHc=" target="_blank" rel="noopener">传送门</a>(密钥：bigo)</p>
<h3 id="4-vvv文档在线导出工具"><a href="#4-vvv文档在线导出工具" class="headerlink" title="4. vvv文档在线导出工具"></a>4. vvv文档在线导出工具</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3dlbmt1LmJhaWR1dnZ2LmNvbS9kb2Mv" target="_blank" rel="noopener">http://wenku.baiduvvv.com/doc/</a></p>
<p>免费下载百度文库文档，支持 PDF 和 Word 格式。</p>
<h3 id="5-微信公众号格式化编辑器"><a href="#5-微信公众号格式化编辑器" class="headerlink" title="5. 微信公众号格式化编辑器"></a>5. 微信公众号格式化编辑器</h3><p>可以在线调整公众号文章的格式</p>
<p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9sYWIubHlyaWMuaW0vd3hmb3JtYXQv" target="_blank" rel="noopener">https://lab.lyric.im/wxformat/</a></p>
<h3 id="6-Process-On：免费在线作图，实时协作"><a href="#6-Process-On：免费在线作图，实时协作" class="headerlink" title="6. Process On：免费在线作图，实时协作"></a>6. Process On：免费在线作图，实时协作</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS8=" target="_blank" rel="noopener">https://www.processon.com/</a></p>
<p>Process On 支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等，也支持小程序，很好用，还有模板可以借鉴。</p>
<h3 id="7-ALL-TO-ALL（在线格式转换）"><a href="#7-ALL-TO-ALL（在线格式转换）" class="headerlink" title="7. ALL TO ALL（在线格式转换）"></a>7. ALL TO ALL（在线格式转换）</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5hbGx0b2FsbC5uZXQv" target="_blank" rel="noopener">http://www.alltoall.net/</a></p>
<p>国内最全类型的在线文件转换平台，免费、快速，无须下载安装任何软件。支持文档、视频、压缩包、音频等文件类型格式的转换</p>
<h3 id="8-Office-Converter"><a href="#8-Office-Converter" class="headerlink" title="8. Office-Converter"></a>8. Office-Converter</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9jbi5vZmZpY2UtY29udmVydGVyLmNvbS8=" target="_blank" rel="noopener">https://cn.office-converter.com/</a></p>
<p>网站支持各种文件类型的转换，如音频、视频、压缩包等的转换，虽然免费，但对上传文件的大小有限制，所以文件大小不超过限制的话，还是很好用的！</p>
<h3 id="9-Super-Tools（依奇在线超级转换工具）"><a href="#9-Super-Tools（依奇在线超级转换工具）" class="headerlink" title="9. Super Tools（依奇在线超级转换工具）"></a>9. Super Tools（依奇在线超级转换工具）</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cud2RrdS5uZXQv" target="_blank" rel="noopener">https://www.wdku.net/</a></p>
<p>提供一些文档格式的转换，文字识别转换，在线图片，文档等</p>
<h3 id="10-LightPDF"><a href="#10-LightPDF" class="headerlink" title="10. LightPDF"></a>10. LightPDF</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9saWdodHBkZi5jb20vemgv" target="_blank" rel="noopener">https://lightpdf.com/zh/</a></p>
<p>从名称来看就是关于PDF文档处理的，PDF转PPT，PDF转Word，PDF编辑，加密等等，挺实用的，还提供客户端下载。</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>个人感觉吧，有些在线网站确实非常好用，完全免费，大大方便了人们的办公生活，但有些网站对一些功能，文件大小都有限制，如果要进行使用，需要进行购买付费，毕竟人家做这个多少还是要赚取利益的。如果是经常需要对文档进行处理的人们，我觉得还是付费比较好点，功能好用无限制，可能还有售后服务啥的。当然网上也有破解的相关软件，百度一下，你就知道！先就这样啦！</p>
<h2 id="PPT模板下载（免费）"><a href="#PPT模板下载（免费）" class="headerlink" title="PPT模板下载（免费）"></a>PPT模板下载（免费）</h2><h3 id="1-51PPT模板"><a href="#1-51PPT模板" class="headerlink" title="1. 51PPT模板"></a>1. 51PPT模板</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy41MXBwdG1vYmFuLmNvbS8=" target="_blank" rel="noopener">http://www.51pptmoban.com/</a></p>
<p>想必大家都知道这个网站，免费还非常好用！</p>
<h3 id="2-第一PPT"><a href="#2-第一PPT" class="headerlink" title="2. 第一PPT"></a>2. 第一PPT</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy4xcHB0LmNvbS8=" target="_blank" rel="noopener">http://www.1ppt.com/</a></p>
<h3 id="3-优品PPT"><a href="#3-优品PPT" class="headerlink" title="3. 优品PPT"></a>3. 优品PPT</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy55cHBwdC5jb20v" target="_blank" rel="noopener">http://www.ypppt.com/</a></p>
<p>一个有情怀的免费PPT模板下载网站！</p>
<h3 id="4-pptfans"><a href="#4-pptfans" class="headerlink" title="4. pptfans"></a>4. pptfans</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5wcHRmYW5zLmNuLw==" target="_blank" rel="noopener">http://www.pptfans.cn/</a></p>
<p>PPT设计教程网，提供PPT设计教程，PPT模板、素材等免费下载！今天看到了网站新增一个功能，会员，估计以后可能要收费了！</p>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="1-NICETOOL-：在线工具箱"><a href="#1-NICETOOL-：在线工具箱" class="headerlink" title="1. NICETOOL+：在线工具箱"></a>1. NICETOOL+：在线工具箱</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5uaWNldG9vbC5uZXQv" target="_blank" rel="noopener">http://www.nicetool.net/</a></p>
<p>NiceTool.net 好工具网致力于收集打造各种简单易用在线工具，网友无需注册和下载安装即可使用。</p>
<h3 id="2-Toolfk：在线工具箱"><a href="#2-Toolfk：在线工具箱" class="headerlink" title="2. Toolfk：在线工具箱"></a>2. Toolfk：在线工具箱</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy50b29sZmsuY29tLw==" target="_blank" rel="noopener">http://www.toolfk.com/</a></p>
<p>这是一个在线工具箱，一个为程序员服务并创建价值的在线工具转换网站 - 程序员的工具箱，里面有很多的实用小工具，比如：在线PDF转换图片，在线加密工具，在线Photoshop等等。</p>
<h3 id="3-兔二工具"><a href="#3-兔二工具" class="headerlink" title="3. 兔二工具"></a>3. 兔二工具</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cudG9vbDIuY24v" target="_blank" rel="noopener">https://www.tool2.cn/</a></p>
<p>这是一个工具集合网站，很强大，有很多的使用网站，对网站进行了分类，非常好用。</p>
<h3 id="4-奇迹秀工具箱"><a href="#4-奇迹秀工具箱" class="headerlink" title="4. 奇迹秀工具箱"></a>4. 奇迹秀工具箱</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5xaWppc2hvdy5jb20vZG93bi9pbmRleC5odG1s" target="_blank" rel="noopener">http://www.qijishow.com/down/index.html</a></p>
<p>提供一些好用的创意工具，效率工具，有在线的，也有客户端的。</p>
<h3 id="5-SOOGIF：GIF制作工具"><a href="#5-SOOGIF：GIF制作工具" class="headerlink" title="5. SOOGIF：GIF制作工具"></a>5. SOOGIF：GIF制作工具</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuc29vZ2lmLmNvbQ==" target="_blank" rel="noopener">https://www.soogif.com</a></p>
<p>在这个网站上可以搜到很多有趣的GIF动态图，比如表情包，Loading加载图等等，还可以制作GIF，非常好用！</p>
<h3 id="6-超级简历：在线制作简历"><a href="#6-超级简历：在线制作简历" class="headerlink" title="6. 超级简历：在线制作简历"></a>6. 超级简历：在线制作简历</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cud29uZGVyY3YuY29tLw==" target="_blank" rel="noopener">https://www.wondercv.com/</a></p>
<p>在线制作简历，也有模板免费使用，有些模板好像是收费的，不过其他模板足足够用。</p>
<h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><h3 id="1-在线颜色转换"><a href="#1-在线颜色转换" class="headerlink" title="1. 在线颜色转换"></a>1. 在线颜色转换</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuc2lvZS5jbi95aW5neW9uZy95YW5zZS1yZ2ItMTYv" target="_blank" rel="noopener">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></p>
<p>RGB颜色值与十六进制颜色码相互转换在线工具，还提供颜色对照表。</p>
<h3 id="2-程序员导航"><a href="#2-程序员导航" class="headerlink" title="2. 程序员导航"></a>2. 程序员导航</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL2NvZGUuZ2lmZm94LmNvbS8=" target="_blank" rel="noopener">http://code.giffox.com/</a></p>
<p>整合了有关于程序员的实用工具，比如在线编程教程，程序员社区，开发工具，技术博客等。</p>
<h3 id="3-JSON在线解析"><a href="#3-JSON在线解析" class="headerlink" title="3. JSON在线解析"></a>3. JSON在线解析</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuc29qc29uLmNvbS8=" target="_blank" rel="noopener">https://www.sojson.com/</a></p>
<h3 id="4-在线工具"><a href="#4-在线工具" class="headerlink" title="4. 在线工具"></a>4. 在线工具</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly90b29sLmx1Lw==" target="_blank" rel="noopener">https://tool.lu/</a></p>
<p>程序猿实用的在线网站，看图你就知道啦</p>
<h2 id="在线图片处理"><a href="#在线图片处理" class="headerlink" title="在线图片处理"></a>在线图片处理</h2><h3 id="1-TinyPng（压缩图片）"><a href="#1-TinyPng（压缩图片）" class="headerlink" title="1. TinyPng（压缩图片）"></a>1. TinyPng（压缩图片）</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly90aW55cG5nLmNvbS8=" target="_blank" rel="noopener">https://tinypng.com/</a></p>
<p>在不超过它上传文件的最大限制（5MB），免费使用，进行图片压缩，最多不超过20张，可以免费打包下载。</p>
<h3 id="2-waifu2x（无损放大图片）"><a href="#2-waifu2x（无损放大图片）" class="headerlink" title="2. waifu2x（无损放大图片）"></a>2. waifu2x（无损放大图片）</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3dhaWZ1MngudWRwLmpwLw==" target="_blank" rel="noopener">http://waifu2x.udp.jp/</a></p>
<p>使用卷积神经网络对动漫风格的图片进行放大操作（支持照片）</p>
<h3 id="3-在线PS（稿定设计）"><a href="#3-在线PS（稿定设计）" class="headerlink" title="3. 在线PS（稿定设计）"></a>3. 在线PS（稿定设计）</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cudXVwb29wLmNvbS8=" target="_blank" rel="noopener">https://www.uupoop.com/</a></p>
<p>在线Photoshop，也可以对照片进行编辑，制作手机端海报，公众号封面等等。好像需要用微信扫码进行登录，关注公众，即可进行免费下载。网址旗下还有在线抠图，很实用。</p>
<h3 id="4-iloveimg-图片工具箱"><a href="#4-iloveimg-图片工具箱" class="headerlink" title="4. iloveimg(图片工具箱)"></a>4. iloveimg(图片工具箱)</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuaWxvdmVpbWcuY29tL3poLWNu" target="_blank" rel="noopener">https://www.iloveimg.com/zh-cn</a></p>
<p>可以进行图片的压缩，尺寸调整，裁剪，图片生成器等等</p>
<h3 id="5-U钙网"><a href="#5-U钙网" class="headerlink" title="5. U钙网"></a>5. U钙网</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy51dWdhaS5jb20v" target="_blank" rel="noopener">http://www.uugai.com/</a></p>
<p>完全免费的LOGO在线设计工具</p>
<h2 id="电子书类（免费）"><a href="#电子书类（免费）" class="headerlink" title="电子书类（免费）"></a>电子书类（免费）</h2><h3 id="1-尘宇下载站"><a href="#1-尘宇下载站" class="headerlink" title="1. 尘宇下载站"></a>1. 尘宇下载站</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5jeWRvd24uY24v" target="_blank" rel="noopener">http://www.cydown.cn/</a></p>
<h3 id="2-雅书"><a href="#2-雅书" class="headerlink" title="2. 雅书"></a>2. 雅书</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly95YWJvb2sub3JnLw==" target="_blank" rel="noopener">https://yabook.org/</a></p>
<h3 id="3-PDF之家"><a href="#3-PDF之家" class="headerlink" title="3. PDF之家"></a>3. PDF之家</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5wZGZ6ai5jbi8=" target="_blank" rel="noopener">http://www.pdfzj.cn/</a></p>
<h3 id="4-鸠摩搜书"><a href="#4-鸠摩搜书" class="headerlink" title="4. 鸠摩搜书"></a>4. 鸠摩搜书</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuaml1bW9kaWFyeS5jb20v" target="_blank" rel="noopener">https://www.jiumodiary.com/</a></p>
<p>提供电子书籍的搜索，搜索结果直接是有关你要搜索书名的电子版</p>
<h3 id="5-子午书简"><a href="#5-子午书简" class="headerlink" title="5. 子午书简"></a>5. 子午书简</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly81a2luZGxlLmNvbS8=" target="_blank" rel="noopener">https://5kindle.com/</a></p>
<p>免费电子书交流下载</p>
<h3 id="6-苦瓜书盘"><a href="#6-苦瓜书盘" class="headerlink" title="6. 苦瓜书盘"></a>6. 苦瓜书盘</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9rZ2Jvb2suY29tLw==" target="_blank" rel="noopener">https://kgbook.com/</a></p>
<p>苦瓜书盘是供网友交流适合电纸书阅读的6寸pdf及mobi格式电子书制作技术的网站，这里提供电子书上传及下载。</p>
<h3 id="7-周读"><a href="#7-周读" class="headerlink" title="7. 周读"></a>7. 周读</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5pcmVhZHdlZWsuY29tLw==" target="_blank" rel="noopener">http://www.ireadweek.com/</a></p>
<h3 id="8-计算机书籍控"><a href="#8-计算机书籍控" class="headerlink" title="8. 计算机书籍控"></a>8. 计算机书籍控</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL2Jlc3RjYm9va3MuY29tLw==" target="_blank" rel="noopener">http://bestcbooks.com/</a></p>
<p>免费下载关于计算机有关的书籍。</p>
<h2 id="简洁的搜索导航"><a href="#简洁的搜索导航" class="headerlink" title="简洁的搜索导航"></a>简洁的搜索导航</h2><h3 id="1-某柠檬"><a href="#1-某柠檬" class="headerlink" title="1. 某柠檬"></a>1. 某柠檬</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cubW91bGVtLmNvbS8=" target="_blank" rel="noopener">https://www.moulem.com/</a></p>
<h3 id="2-秘迹搜索"><a href="#2-秘迹搜索" class="headerlink" title="2. 秘迹搜索"></a>2. 秘迹搜索</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9taWppc291LmNvbS8=" target="_blank" rel="noopener">https://mijisou.com/</a></p>
<p>这个搜索引擎也提供APP客户端，<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cubGVha3plcm8uY29tLz9mcm9tPXNlYXJjaA==" target="_blank" rel="noopener">点我</a>进入官网进行下载。</p>
<h3 id="3-简搜"><a href="#3-简搜" class="headerlink" title="3. 简搜"></a>3. 简搜</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9zby5hcHB0cy5jbi8=" target="_blank" rel="noopener">https://so.appts.cn/</a></p>
<p>非常非常简单，正如网站名称，直接上图。有三种主题模式，一种就是图片所显示的，其他两种就是白天与黑夜的效果</p>
<h3 id="4-万花筒"><a href="#4-万花筒" class="headerlink" title="4. 万花筒"></a>4. 万花筒</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93aHQuaW0v" target="_blank" rel="noopener">https://wht.im/</a></p>
<p>素雅、简洁白，可自定义背景、支持学校官方网址导航</p>
<h2 id="导航整合"><a href="#导航整合" class="headerlink" title="导航整合"></a>导航整合</h2><h3 id="1-虫部落·快搜"><a href="#1-虫部落·快搜" class="headerlink" title="1. 虫部落·快搜"></a>1. 虫部落·快搜</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9zZWFyY2guY2hvbmdidWx1by5jb20v" target="_blank" rel="noopener">https://search.chongbuluo.com/</a></p>
<p>整合了很多的好用的导航网站。</p>
<h3 id="2-老司机导航（正规车）"><a href="#2-老司机导航（正规车）" class="headerlink" title="2. 老司机导航（正规车）"></a>2. 老司机导航（正规车）</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuZ2lmZm94LmNvbS8=" target="_blank" rel="noopener">https://www.giffox.com/</a></p>
<p>看到<strong>老司机</strong>这几个字，别想太多了哦，整合了许多的导航网站。</p>
<h3 id="3-优设导航-学设计从这里开始"><a href="#3-优设导航-学设计从这里开始" class="headerlink" title="3. 优设导航 - 学设计从这里开始"></a>3. 优设导航 - 学设计从这里开始</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL2hhby51aXNkYy5jb20v" target="_blank" rel="noopener">http://hao.uisdc.com/</a></p>
<p>学设计必备网站，整合的非常详细，像界面设计、设计教程、字体设计，颜色设计等，应有尽有。</p>
<h3 id="4-AnywhereAnything"><a href="#4-AnywhereAnything" class="headerlink" title="4. AnywhereAnything"></a>4. AnywhereAnything</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL2xhY2thci5jb20vYWEv" target="_blank" rel="noopener">http://lackar.com/aa/</a></p>
<p>界面干净美观，无广告无新闻，而且也整合了很多的网站。</p>
<h3 id="5-小呆导航"><a href="#5-小呆导航" class="headerlink" title="5. 小呆导航"></a>5. 小呆导航</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93ZWJqaWtlLmNvbS8=" target="_blank" rel="noopener">https://webjike.com/</a></p>
<p>界面简洁干净美观，让人看起来很舒心！同时也整合了其他的很多网站！最重要的是无广告！</p>
<h3 id="6-本本啦-笔记本网址导航"><a href="#6-本本啦-笔记本网址导航" class="headerlink" title="6. 本本啦 - 笔记本网址导航"></a>6. 本本啦 - 笔记本网址导航</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuYmVuYmVubGEuY29tLw==" target="_blank" rel="noopener">https://www.benbenla.com/</a></p>
<p>界面简洁干净美观，让人看起来很舒心。同时也整合了其他的很多网站，最重要的是无广告！还支持换主题哦！</p>
<h3 id="8-A网"><a href="#8-A网" class="headerlink" title="8. A网"></a>8. A网</h3><p>官网： <a href="https://yafine-blog.cn/go.html?url=aHR0cDovL2FuZXRzLmNuLw==" target="_blank" rel="noopener">http://anets.cn/</a></p>
<p>界面美观，还有特效，双击鼠标即可隐藏导航列表</p>
<h2 id="音乐网站-免费下载"><a href="#音乐网站-免费下载" class="headerlink" title="音乐网站(免费下载)"></a>音乐网站(免费下载)</h2><p>分享一下可以免费搜索并下载音乐的一些网站</p>
<h3 id="1-果核音乐搜搜"><a href="#1-果核音乐搜搜" class="headerlink" title="1. 果核音乐搜搜"></a>1. 果核音乐搜搜</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9tdXNpYy5naHB5bS5jb20v" target="_blank" rel="noopener">https://music.ghpym.com/</a></p>
<p>支持QQ音乐和酷狗音乐</p>
<h3 id="2-FreeMusic"><a href="#2-FreeMusic" class="headerlink" title="2. FreeMusic"></a>2. FreeMusic</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3kud2ViemN6LmNuLw==" target="_blank" rel="noopener">http://y.webzcz.cn/</a></p>
<p>另外几个网址也是这样的界面</p>
<ul>
<li><a href="https://yafine-blog.cn/go.html?url=aHR0cDovL211c2ljLnpodW9saW4ud2FuZy8=" target="_blank" rel="noopener">http://music.zhuolin.wang/</a></li>
<li><a href="https://yafine-blog.cn/go.html?url=aHR0cDovL211c2ljLmZvb29yLmNuLw==" target="_blank" rel="noopener">http://music.fooor.cn/</a></li>
</ul>
<h3 id="3-全网音乐免费下载工具"><a href="#3-全网音乐免费下载工具" class="headerlink" title="3. 全网音乐免费下载工具"></a>3. 全网音乐免费下载工具</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9tdXNpYy5zb3VubS5jb20v" target="_blank" rel="noopener">https://music.sounm.com/</a></p>
<p>可以下载音乐，也可以使用链接。</p>
<p>还有几个类似的网址：</p>
<ul>
<li><a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy4zMzN0dHQuY29tL3VwL3Rvb2wv" target="_blank" rel="noopener">http://www.333ttt.com/up/tool/</a></li>
<li><a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9tdXNpYy5saXV6aGlqaW4uY24v" target="_blank" rel="noopener">https://music.liuzhijin.cn/</a></li>
<li><a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5senppLmNuLw==" target="_blank" rel="noopener">http://www.lzzi.cn/</a></li>
</ul>
<h3 id="4-歌曲大全-音乐聚合搜索引擎"><a href="#4-歌曲大全-音乐聚合搜索引擎" class="headerlink" title="4. 歌曲大全-音乐聚合搜索引擎"></a>4. 歌曲大全-音乐聚合搜索引擎</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5nZXF1ZGFxdWFuLm5ldC9ncXNzLw==" target="_blank" rel="noopener">http://www.gequdaquan.net/gqss/</a></p>
<h3 id="5-七月辰的工具箱"><a href="#5-七月辰的工具箱" class="headerlink" title="5. 七月辰的工具箱"></a>5. 七月辰的工具箱</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cDovL211c2ljLm9ubHljaGVuLmNuLw==" target="_blank" rel="noopener">http://music.onlychen.cn/</a></p>
<h3 id="6-墨灵音乐"><a href="#6-墨灵音乐" class="headerlink" title="6. 墨灵音乐"></a>6. 墨灵音乐</h3><p>官网：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9tdXNpYy5xdWdlZWsuY29tLw==" target="_blank" rel="noopener">https://music.qugeek.com/</a></p>
<p>可以在线听音乐，听FM电台节目等</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合中List,Set，Map</title>
    <url>/2020/02/09/java-ji-he-zhong-list-set-map/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>List , Set, Map都是接口，前两个继承至Collection接口，Map为独立接口</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="List-有序-可重复"><a href="#List-有序-可重复" class="headerlink" title="List 有序,可重复"></a>List 有序,可重复</h3><p><strong>ArrayList</strong><br>优点: 底层数据结构是数组，查询快，增删慢。<br>缺点: 线程不安全，效率高<br><strong>Vector</strong><br>优点: 底层数据结构是数组，查询快，增删慢。<br>缺点: 线程安全，效率低<br><strong>LinkedList</strong><br>优点: 底层数据结构是链表，查询慢，增删快。<br>缺点: 线程不安全，效率高</p>
<h3 id="Set-无序-唯一"><a href="#Set-无序-唯一" class="headerlink" title="Set 无序,唯一"></a>Set 无序,唯一</h3><p><strong>HashSet</strong><br>底层数据结构是哈希表。(无序,唯一)<br>如何来保证元素唯一性?<br>1.依赖两个方法：hashCode()和equals()</p>
<p><strong>LinkedHashSet</strong><br>底层数据结构是链表和哈希表。(FIFO插入有序,唯一)<br>1.由链表保证元素有序<br>2.由哈希表保证元素唯一</p>
<p><strong>TreeSet</strong><br>底层数据结构是红黑树。(唯一，有序)</p>
<h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>Map接口有三个比较重要的实现类，分别是HashMap、TreeMap和HashTable。</p>
<ul>
<li>TreeMap是有序的，HashMap和HashTable是无序的。</li>
<li>Hashtable的方法是同步的(线程安全)，HashMap的方法不是同步的(线程不安全)。这是两者最主要的区别。</li>
<li>Hashtable不允许null值，HashMap允许null值（key和value都允许）</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>针对Collection集合我们使用谁？</p>
<blockquote>
<p>唯一吗</p>
<blockquote>
<p>是：Set</p>
<blockquote>
<p>排序吗？</p>
<blockquote>
<p>是：TreeSet或LinkedHashSet<br>否：HashSet<br>如果你知道是Set，但是不知道是哪个Set，就用HashSet。</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>唯一吗</p>
<blockquote>
<p>否：List</p>
<blockquote>
<p>安全性？</p>
<blockquote>
<p>是：Vector</p>
<p>否： ArrayList或者LinkedList</p>
<blockquote>
<p>查询多：ArrayList<br>增删多：LinkedList<br>如果你知道是List，但是不知道是哪个List，就用ArrayList。</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果只知道是Collection集合，但是不知道使用谁，就用ArrayList。<br>如果只知道用集合，就用ArrayList。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>list-set-map</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim常用操作</title>
    <url>/2020/02/08/vim-chang-yong-cao-zuo/</url>
    <content><![CDATA[<h3 id="关于Vim"><a href="#关于Vim" class="headerlink" title="关于Vim"></a>关于Vim</h3><p>来自<a href="https://baike.baidu.com/item/VIM/60410?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>
<p>Vim是一个类似于<a href="https://baike.baidu.com/item/Vi/8987313" target="_blank" rel="noopener">Vi</a>的著名的功能强大、高度可定制的<a href="https://baike.baidu.com/item/" target="_blank" rel="noopener">文本编辑器</a>，在Vi的基础上改进和增加了很多特性。VIM是<a href="https://baike.baidu.com/item/" target="_blank" rel="noopener">自由软件</a>。Vim普遍被推崇为类<a href="https://baike.baidu.com/item/Vi" target="_blank" rel="noopener">Vi编辑器</a>中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999 年<a href="https://baike.baidu.com/item/Emacs" target="_blank" rel="noopener">Emacs</a>被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳<a href="https://baike.baidu.com/item/" target="_blank" rel="noopener">开放源代码</a>文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs在文本编辑方面都是非常优秀的。</p>
<p><strong>特点：</strong></p>
<ul>
<li>持久的多级撤消树</li>
<li>扩展插件系统</li>
<li>支持数百种编程语言和文件格式</li>
<li>强大的搜索和替换</li>
<li>多工具集成</li>
</ul>
<h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p><strong>命令模式</strong></p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p><strong>输入模式</strong></p>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>字符按键以及Shift组合</td>
<td>输入字符</td>
</tr>
<tr>
<td>ENTER</td>
<td>回车键，换行</td>
</tr>
<tr>
<td>BACK SPACE</td>
<td>退格键，删除光标前一个字符</td>
</tr>
<tr>
<td>DEL</td>
<td>删除键，删除光标后一个字符</td>
</tr>
<tr>
<td>方向键</td>
<td>在文本中移动光标</td>
</tr>
<tr>
<td>HOME/END</td>
<td>移动光标到行首/行尾</td>
</tr>
<tr>
<td>Page Up/Page Down</td>
<td>上/下翻页</td>
</tr>
<tr>
<td>Insert</td>
<td>切换光标为输入/替换模式，光标将变成竖线/下划线</td>
</tr>
<tr>
<td>ESC</td>
<td>退出输入模式，切换到命令模式</td>
</tr>
</tbody></table>
<p><strong>底线命令模式</strong></p>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><strong>移动光标</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td>j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td>k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td>l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
</tbody></table>
<p>如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td>[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td>+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td>-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td>n<space></space></td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</space></td>
</tr>
<tr>
<td>0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td>$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td>H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td>M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td>L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td>G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td>nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td>gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td>n<enter></enter></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<p><strong>搜索替换</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>响应</th>
</tr>
</thead>
<tbody><tr>
<td>/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！</td>
</tr>
<tr>
<td>?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td>n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td>N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td>:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：<br>『:100,200s/vbird/VBIRD/g』。(常用)</td>
</tr>
<tr>
<td><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
</tbody></table>
<p><strong>删除、复制与贴上</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td>nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td>dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td>ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td>d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td>d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td>d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td>yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td>nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td>y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td>yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td>y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td>p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td>J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td>c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td>u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td>[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td>.</td>
<td>小数点,意思是重复前一个动作的意思。 如果想要重复删除、重复贴上等等动作，按下小数点『.』就好了！</td>
</tr>
</tbody></table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Vim的操作十分，但我在日常使用中却仅仅用到了一点点，还是不够了解啊，在这里做一个总结，多使用，多查询.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架中数据以JSON的形式传递到前端</title>
    <url>/2020/02/07/ssm-kuang-jia-zhong-shu-ju-yi-json-de-xing-shi-chuan-di-dao-qian-duan/</url>
    <content><![CDATA[<p><strong>后台从数据库中获取数据，传递到response中</strong><br>有两种方式可以实现这一步。一是利用注解@ResponseBody,二是利用PrintWriter。通过@ResponseBody成功完成了这一步</p>
<p>相关jar包</p>
<pre class=" language-xml"><code class="language-xml">
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.json-lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>json-lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classifier</span><span class="token punctuation">></span></span>jdk15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>classifier</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p> 然后在spring.xml里添加：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageConverters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token comment" spellcheck="true">&lt;!--   &lt;ref bean="mappingJacksonHttpMessageConverter" />--></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>
<p>再然后是Controller里的测试代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testJson.do"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> User <span class="token function">testjson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        User userjson<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">,</span><span class="token string">"q"</span><span class="token punctuation">,</span><span class="token string">"无"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userjson<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>前端文件：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> val<span class="token punctuation">;</span>
    <span class="token keyword">var</span> val1<span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
        url<span class="token punctuation">:</span> <span class="token string">"testJson.do"</span><span class="token punctuation">,</span>
        dataType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
        success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            val1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#exampleInputName2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>val1<span class="token punctuation">.</span>u_Name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//给input赋值</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#exampleInputName3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>val1<span class="token punctuation">.</span>u_Power<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//给input赋值</span>

        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"系统繁忙,请稍后重试!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>只是说简单了解这个流程，具体内容之后再慢慢学习.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven学习</title>
    <url>/2020/02/06/maven-xue-xi/</url>
    <content><![CDATA[<h3 id="Maven学习及环境搭建"><a href="#Maven学习及环境搭建" class="headerlink" title="Maven学习及环境搭建"></a>Maven学习及环境搭建</h3><h3 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h3><ol>
<li>Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。</li>
<li>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</li>
<li>Maven这个单词来自于意第绪语（犹太语），意为知识的积累，最初在Jakata Turbine项目中用来简化构建过程。当时有一些项目（有各自Ant build文件），仅有细微的差别，而JAR文件都由CVS来维护。于是希望有一种标准化的方式构建项目，一个清晰的方式定义项目的组成，一个容易的方式发布项目的信息，以及一种简单的方式在多个项目中共享JARs。</li>
</ol>
<h3 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h3><p>参考：<a href="https://blog.csdn.net/qq_37904780/article/details/81216179" target="_blank" rel="noopener">Maven环境搭建</a></p>
<h3 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h3><pre><code>src

​        -main

​                -java

​                        -package

​        -test

​                -java

​                        -package</code></pre><p>一般目录会自动创建，如果没有：</p>
<ol>
<li>在<code>src</code>目录下分别创建子目录<code>main</code>和<code>test</code></li>
<li>在<code>main</code>和<code>test</code>目录下各创建一个子目录<code>java</code></li>
</ol>
<h3 id="测试一个HelloMaven"><a href="#测试一个HelloMaven" class="headerlink" title="测试一个HelloMaven"></a>测试一个HelloMaven</h3><p>在<code>main</code>目录的<code>java</code>目录下创建如下目录并创建<code>HellowWorld.java</code>Java类文件</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在<code>test</code>目录的<code>java</code>目录下创建如下目录并创建<code>testHello.java</code>Java类文件</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HellOWorldTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在<code>src</code>根目录下创建<code>pom.xml</code>编写代码如下</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>study-model<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 本项目目前所处的版本号 --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  

    <span class="token comment" spellcheck="true">&lt;!-- 定义本项目的依赖关系 --></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  

        <span class="token comment" spellcheck="true">&lt;!-- 每个dependency都对应这一个jar包 --></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  
            <span class="token comment" spellcheck="true">&lt;!--一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件， 然后引入你的工程。如果别人想引用你现在开发的这个项目（前提是已开发完毕并发布到了远程仓库），--></span>   
            <span class="token comment" spellcheck="true">&lt;!--就需要在他的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入， maven就会把你上传的jar包下载到他的本地 --></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>打开命令提示行，进入到HelloWorld项目的根目录中输入<code>mvn compile</code></li>
</ul>
<blockquote>
<p>对该项目进行编译（如果是第一次运行Maven会在运行之前下载很多第三方的插件和Maven所依赖的jar）.</p>
</blockquote>
<ul>
<li>运行测试例，输入<code>mvn test</code>:</li>
</ul>
<blockquote>
<p>它默认生成了一个<code>target</code>文件夹，打开它，在<code>classes</code>目录下存放着生成的字节码文件;<code>surefire-reports</code>下存放着生成的测试报告；</p>
</blockquote>
<ul>
<li>下面再去命令行键入<code>mvn package</code>：</li>
</ul>
<blockquote>
<p>目录下生成了一个<code>study-model-1.0.0-SNAPSHOT.jar</code>的jar包</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>之前在学习SSM的时候对Maven有过了解，但是还有点陌生，这里是对纯Maven进行学习，了解了大体的步骤及内容.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Git中.gitignore的配置</title>
    <url>/2020/02/05/gitignore/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在日常的开发中，当我们需要将一个项目提交到Git时，并不是所有的文件都需要提交，比如一些自动生成的文件，这时候就可以使用<code>.gitignore</code>来忽略一些不需要提交的文件，本文着重介绍一下<code>.gitignore</code>的配置语法。</p>
<h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><ul>
<li>空行或是以<code>#</code>开头的行即注释行将被忽略。</li>
<li>可以在前面添加正斜杠<code>/</code>来避免递归,下面的例子中可以很明白的看出来与下一条的区别。</li>
<li>可以在后面添加正斜杠<code>/</code>来忽略文件夹，例如<code>build/</code>即忽略build文件夹。</li>
<li>可以使用<code>!</code>来否定忽略，即比如在前面用了<code>*.apk</code>，然后使用<code>!a.apk</code>，则这个a.apk不会被忽略。</li>
<li><code>*</code>用来匹配零个或多个字符，如<code>*.[oa]</code>忽略所有以”.o”或”.a”结尾，<code>*~</code>忽略所有以<code>~</code>结尾的文件（这种文件通常被许多编辑器标记为临时文件）；<code>[]</code>用来匹配括号内的任一字符，如<code>[abc]</code>，也可以在括号内加连接符，如<code>[0-9]</code>匹配0至9的数；<code>?</code>用来匹配单个字符。</li>
</ul>
<p>但是这些太过于抽象，太偏向定义了，下面举例一些Java项目的gitignore模板</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># built application files</span>
*.apk
*.ap_

<span class="token comment" spellcheck="true"># files for the dex VM</span>
*.dex

<span class="token comment" spellcheck="true"># Java class files</span>
*.class

<span class="token comment" spellcheck="true"># generated files</span>
/bin/
/gen/

<span class="token comment" spellcheck="true"># Local configuration file (sdk path, etc)</span>
local.properties

<span class="token comment" spellcheck="true"># Eclipse project files</span>
.classpath
.project
.settings/

<span class="token comment" spellcheck="true"># Proguard folder generated by Eclipse</span>
proguard/

<span class="token comment" spellcheck="true"># Intellij project files</span>
*.iml
*.ipr
*.iws
.idea/

<span class="token comment" spellcheck="true"># Maven</span>
/log/
target/
/target/</code></pre>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有一些其他的环境配置。具体请访问<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">.gitignore</a>网址，这里就不一一列举了.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>.gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL归纳</title>
    <url>/2020/02/04/sql-bi-ji/</url>
    <content><![CDATA[<h1 id="SQL-笔记"><a href="#SQL-笔记" class="headerlink" title="SQL 笔记"></a>SQL 笔记</h1><h2 id="SQL-简介"><a href="#SQL-简介" class="headerlink" title="SQL 简介"></a>SQL 简介</h2><p>SQL = Structured Query Language</p>
<p>总的来说，SQL语言定义了这么几种操作数据库的能力：</p>
<ul>
<li><p>DDL：Data Definition Language</p>
<p>DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</p>
</li>
<li><p>DML：Data Manipulation Language</p>
<p>DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p>
</li>
<li><p>DQL：Data Query Language</p>
<p>DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</p>
</li>
</ul>
<h2 id="数据库类别"><a href="#数据库类别" class="headerlink" title="数据库类别"></a>数据库类别</h2><ul>
<li>关系型数据库(SQL)</li>
<li>非关系型数据库(NoSQL) - MongoDB, Cassandra, Dynamo</li>
</ul>
<h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>主键是关系表中记录的唯一标识。选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。</p>
<pre><code>ALTER TABLE &lt;student&gt;
ADD CONSTRAINT &lt;pk_id&gt;
PRIMARY KEY (&lt;id&gt;);</code></pre><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键是用来关联 2 个表结构的，表直接的约束分为以下 3 种：</p>
<ol>
<li>一对一</li>
<li>一对多 - 外键建立在‘多’的表中(即从表)</li>
<li>多对多 - 需要建立中间表</li>
</ol>
<ul>
<li><p>创建外键</p>
<pre><code>ALTER TABLE &lt;student&gt;
ADD CONSTRAINT &lt;fk_class_id&gt;
FOREIGN KEY (&lt;class_id&gt;)
REFERENCES classes (&lt;id&gt;);</code></pre></li>
<li><p>删除外键</p>
<pre><code>ALTER TABLE &lt;students&gt;
DROP FOREIGN KEY &lt;fk_class_id&gt;;</code></pre></li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p>
<pre><code>ALTER TABLE &lt;students&gt;
ADD INDEX &lt;idx_name_score&gt; (&lt;name&gt;, &lt;score&gt;);</code></pre><ul>
<li><p>唯一索引</p>
<pre><code>ALTER TABLE &lt;students&gt;
ADD UNIQUE INDEX &lt;uni_name&gt; (&lt;name&gt;);</code></pre></li>
</ul>
<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>根据业务要求，像身份号、手机号、邮箱地址等，它们具有业务含义不易作为主键，但是又具有唯一性：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一约束。</p>
<pre><code>ALTER TABLE &lt;students&gt;
ADD CONSTRAINT &lt;uni_name&gt;
UNIQUE (&lt;name&gt;);</code></pre><h3 id="SQL-查询"><a href="#SQL-查询" class="headerlink" title="SQL 查询"></a>SQL 查询</h3><p>不带 <code>FROM</code> 子句的 <code>SELECT</code> 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 <code>SELECT 1;</code> 来测试数据库连接。</p>
<ol>
<li><p>基本查询 - <code>SELECT * FROM</code></p>
</li>
<li><p>条件查询 - <code>SELECT * FROM  WHERE id = 1</code></p>
</li>
<li><p>投影查询 - <code>SELECT id, name FROM</code></p>
</li>
<li><p>排序 - <code>SELECT * FROM  ORDER BY id DESC</code> NOTE: <code>OREDER BY</code> 要在 <code>WHERE</code> 条件后</p>
</li>
<li><p>分页查询 - <code>SELECT * FROM  LIMIT &lt;10&gt; OFFSET &lt;0&gt;</code> <code>pageSize</code> - <code>LIMIT</code> <code>pageIndex</code> - <code>OFFSET</code>=<code>pageSize * (pageIndex - 1)</code>, <code>pageIndex</code> 从 <code>1</code> 开始，而 <code>OFFSET</code> 从 <code>0</code> 开始。</p>
</li>
<li><p>聚合查询 聚合函数：<code>COUNT(), SUM(), AVG(), MAX(), MIN()</code> 通过 <code>GROUP BY</code> 进行分组 <code>SELECT , , COUNT(*) num FROM  GROUP BY , ;</code></p>
</li>
<li><p>多表查询 - <code>SELECT * FROM , ;</code> 获得的集合为 A 表行数 * B 表行数</p>
</li>
<li><p>连接查询</p>
<ul>
<li>内连接(INNER JOIN)</li>
<li>外连接(OUTER JOIN)<ul>
<li>左连接(LEFT OUTER JOIN)</li>
<li>右连接(RIGHT OUTER JOIN)</li>
<li>全连接(FULL OUTER JOIN)</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>INNER JOIN</th>
<th>LEFT OUTER JOIN</th>
<th>RIGHT OUTER JOIN</th>
<th>FULL OUTER JOIN</th>
</tr>
</thead>
<tbody><tr>
<td>两张表都存在的记录</td>
<td>左表存在的记录</td>
<td>右表存在的记录</td>
<td>左右表都存在的记录</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="SQL-修改"><a href="#SQL-修改" class="headerlink" title="SQL 修改"></a>SQL 修改</h3><p>关系数据库的基本操作就是增删改查，即 <code>CRUD：Create、Retrieve、Update、Delete</code>。</p>
<p>对于增、删、改，对应的SQL语句分别是：</p>
<ul>
<li><code>INSERT</code>：插入新记录 - <code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code></li>
<li><code>UPDATE</code>：更新已有记录 - <code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></li>
<li><code>DELETE</code>：删除已有记录 - <code>DELETE FROM &lt;表名&gt; WHERE ...;</code></li>
</ul>
<h2 id="常用-SQL-语句"><a href="#常用-SQL-语句" class="headerlink" title="常用 SQL 语句"></a>常用 SQL 语句</h2><h3 id="数据库-表操作-SQL-语句"><a href="#数据库-表操作-SQL-语句" class="headerlink" title="数据库 + 表操作 SQL 语句"></a>数据库 + 表操作 SQL 语句</h3><table>
<thead>
<tr>
<th>SQL 语句</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SHOW DATABASES</td>
<td>列出所有数据库</td>
</tr>
<tr>
<td>CREATE DATABASE <database_name></database_name></td>
<td>创建数据库</td>
</tr>
<tr>
<td>DROP DATABASE <database_name></database_name></td>
<td>删除数据库</td>
</tr>
<tr>
<td>USE <database_name></database_name></td>
<td>切换当前数据库</td>
</tr>
<tr>
<td>SHOW TABLES</td>
<td>列出所有表</td>
</tr>
<tr>
<td>DESC <table_name></table_name></td>
<td>查看表结构</td>
</tr>
<tr>
<td>SHOW CREATE TABLE <table_name></table_name></td>
<td>查看创建表的 SQL 语句</td>
</tr>
<tr>
<td>DROP TABLE <table_name></table_name></td>
<td>删除表</td>
</tr>
<tr>
<td>ALTER TABLE <table_name> ADD COLUMN <column_name> VARCHAR(10) NOT NULL</column_name></table_name></td>
<td>新增列</td>
</tr>
<tr>
<td>ALTER TABLE <table_name> CHANGE COLUMN <column_name> VARCHAR(20) NOT NULL</column_name></table_name></td>
<td>修改列属性</td>
</tr>
<tr>
<td>ALTER TABLE <table_name> DROP COLUMN <column_name></column_name></table_name></td>
<td>删除列</td>
</tr>
<tr>
<td>EXIT</td>
<td>退出 MYSQL 连接</td>
</tr>
</tbody></table>
<h3 id="实用-SQL-语句"><a href="#实用-SQL-语句" class="headerlink" title="实用 SQL 语句"></a>实用 SQL 语句</h3><ul>
<li>插入或替换 <code>REPLACE INTO  (, , &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;)</code> 若 <code>id=1</code> 记录不存在，插入新纪录； 若 <code>id=1</code> 记录存在，当前 <code>id=1</code> 记录被删除，然后再插入新纪录。</li>
<li>插入或更新 <code>INSERT INTO  (, , , &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;'xiao_min'&gt;, &lt;...&gt;) ON DUPLICATE KEY UPDATE =&lt;'xiao_min'&gt;, &lt;...&gt;;</code> 若 <code>id=1</code> 记录不存在，插入新纪录； 若 <code>id=1</code> 记录存在，当前 <code>id=1</code> 记录被更新，更新字段有 <code>UPDATE</code> 指定。</li>
<li>插入或忽略 <code>INSERT IGNORE INTO  (, , &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;);</code> 若 <code>id=1</code>记录不存在，<code>INSERT</code> 语句将插入新记录，否则，不执行任何操作。</li>
<li>快照 <code>CREATE TABLE  SELECT * FROM  WHERE =&lt;1&gt;;</code> 通过查询集合创建新表</li>
</ul>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。</p>
<ul>
<li><code>BEGIN</code> 开启一个事务</li>
<li><code>COMMIT</code> 提交一个事务</li>
<li><code>ROLLBACK</code> 回滚事务</li>
</ul>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul>
<li><strong>脏读 DIRTY READ</strong>： 查询同一记录，2 次结果<strong>不一样</strong>，读到还未 commit 的数据结果；</li>
<li><strong>不可重复读 NON REPEATABLE READ</strong>： 查询同一记录，2 次结果<strong>不一样</strong>，读到的结果在另一事务 commit/rollback 之间；</li>
<li><strong>幻读 PHANTOM READ</strong>：查询同一记录，2 次结果是<strong>一样</strong>，但是会出现 事务 A 新增的列，事务 B 读不到(<code>SELECT</code>)，但是却可以更新(<code>UPDATE</code>)，更新后才可以读到。</li>
</ul>
<table>
<thead>
<tr>
<th>ISOLATION LEVEL</th>
<th>DIRTY READ</th>
<th>NON REPEATABLE READ</th>
<th>PHANTOM READ</th>
</tr>
</thead>
<tbody><tr>
<td>READ UNCOMMITTED</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>-</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Repeatable Read</td>
<td>-</td>
<td>-</td>
<td>YES</td>
</tr>
<tr>
<td>Serializable</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<p><strong>Serializable</strong> 虽然隔离级别最高，但是效率会大大下降。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之策略模式</title>
    <url>/2020/02/03/she-ji-mo-shi-zhi-ce-lue-mo-shi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在策略模式中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>
<p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>
<h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0/wenzhang/shejimoshi/celuemoshi.jpg" alt=""></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//接口</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationAdd</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationSubstract</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationMultiply</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="Context类"><a href="#Context类" class="headerlink" title="Context类"></a>Context类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> Strategy strategy<span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="查看行为变化"><a href="#查看行为变化" class="headerlink" title="查看行为变化"></a>查看行为变化</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyPatternDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationSubstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 - 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationMultiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 * 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p>
<p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Eclipse和IDEA搭建SSM的一些踩坑</title>
    <url>/2020/01/29/shi-yong-eclipse-da-jian-ssm-de-yi-xie-cai-keng/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在整合SSM框架的时候，发现比Spring Boot麻烦许多，有许多的配置文件问题，在搭建的过程中，也查询了很多版本，在这里对搭建的SSM划分两个版本，基于Maven的和纯XML+Jar包的两种形式.</p>
<p>另外还有许多编译器操作问题，也记录下来.</p>
<h2 id="Eclipse版本"><a href="#Eclipse版本" class="headerlink" title="Eclipse版本"></a>Eclipse版本</h2><h3 id="纯XML-Jar包形式"><a href="#纯XML-Jar包形式" class="headerlink" title="纯XML+Jar包形式"></a>纯XML+Jar包形式</h3><p>Github地址：<a href="https://github.com/1471748102/SSMHzwStudent" target="_blank" rel="noopener">SSMHzw</a></p>
<p>在src文件夹下单独建立一个config文件夹，里面放入配置文件</p>
<p><strong>config/mybatis/mybatis-config.xml</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 暂时不需做任何配置 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>
<p><strong>config/spring/applicationContext.xml</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.student.hzw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>
            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Component<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>
            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>
            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 加载配数据源配置文件 db.properties --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:config/db.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置 C3P0 数据源 --></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.driver_class}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.minPoolSize}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--连接池中保留的最大连接数。Default: 15 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.maxPoolSize}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTime<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.maxIdleTime}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireIncrement<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.acquireIncrement}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.maxStatements}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatementsPerConnection<span class="token punctuation">"</span></span>
                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.maxStatementsPerConnection}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.initialPoolSize}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idleConnectionTestPeriod<span class="token punctuation">"</span></span>
                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.idleConnectionTestPeriod}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span>
                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.acquireRetryAttempts}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breakAfterAcquireFailure<span class="token punctuation">"</span></span>
                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.breakAfterAcquireFailure}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
            等方法来提升连接测试的性能。Default: false --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testConnectionOnCheckout<span class="token punctuation">"</span></span>
                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.testConnectionOnCheckout}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.checkoutTimeout}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testConnectionOnCheckin<span class="token punctuation">"</span></span>
                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.testConnectionOnCheckin}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>automaticTestTable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.automaticTestTable}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryDelay<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.acquireRetryDelay}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--自动超时回收Connection--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unreturnedConnectionTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.unreturnedConnectionTimeout}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!--超时自动断开--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTimeExcessConnections<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.maxIdleTimeExcessConnections}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxConnectionAge<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${datasource.connection.maxConnectionAge}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 事务管理器 （JDBC） --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 启动声明式事务驱动 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>


    <span class="token comment" spellcheck="true">&lt;!-- spring 通过 sqlSessionFactoryBean 获取 sqlSessionFactory 工厂类 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 扫描 po 包，使用别名 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.student.hzw.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 扫描映射文件 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:config/mybatis/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置扫描 dao 包，动态实现 dao 接口，注入到 spring 容器中 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.student.hzw.dao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 注意使用 sqlSessionFactoryBeanName 避免出现spring 扫描组件失效问题 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gson<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.google.gson.Gson<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>
<p><strong>sconfig/springmvc/springmvc.xml</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>task</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/task<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
         http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 只需要扫描包中的 Controller 注解 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.student.hzw.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>
        <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 启动 mvc 注解驱动 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 启动定时任务 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>annotation-driven</span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 静态资源处理 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 文件上传 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> 
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 上传文件大小限制 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10485760<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  
        <span class="token comment" spellcheck="true">&lt;!-- 请求的编码格式, 和 jsp 页面一致 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/get_cpacha<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/h-ui/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/easyui/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.student.hzw.interceptor.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>
<p><strong>config/db.properties</strong></p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">datasource.connection.driver_class</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token attr-name">datasource.connection.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/db_student_ssm_sql?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;nullCatalogMeansCurrent=true</span>
<span class="token attr-name">datasource.connection.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">datasource.connection.password</span><span class="token punctuation">=</span><span class="token attr-value">199828</span>
<span class="token comment" spellcheck="true">#连接池保持的最小连接数,default : 3（建议使用）</span>
<span class="token attr-name">datasource.connection.minPoolSize</span><span class="token punctuation">=</span><span class="token attr-value">3</span>
<span class="token comment" spellcheck="true">#连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大,default : 15（建议使用）</span>
<span class="token attr-name">datasource.connection.maxPoolSize</span><span class="token punctuation">=</span><span class="token attr-value">15</span>
<span class="token comment" spellcheck="true">#连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接。如果为0，则永远不会断开连接,即回收此连接。default : 0 单位 s（建议使用）</span>
<span class="token attr-name">datasource.connection.maxIdleTime</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true">#连接池在无空闲连接可用时一次性创建的新数据库连接数,default : 3（建议使用）</span>
<span class="token attr-name">datasource.connection.acquireIncrement</span><span class="token punctuation">=</span><span class="token attr-value">3</span>
<span class="token comment" spellcheck="true">#连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算。同时maxStatementsPerConnection的配置无效。default : 0（不建议使用）</span>
<span class="token attr-name">datasource.connection.maxStatements</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true">#连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，因为它缓存的服务对象是单个数据连接，如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0（看情况而论）</span>
<span class="token attr-name">datasource.connection.maxStatementsPerConnection</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true">#连接池初始化时创建的连接数,default : 3（建议使用）</span>
<span class="token attr-name">datasource.connection.initialPoolSize</span><span class="token punctuation">=</span><span class="token attr-value">3</span>
<span class="token comment" spellcheck="true">#用来配置测试空闲连接的间隔时间。测试方式还是上面的两种之一，可以用来解决MySQL8小时断开连接的问题。因为它保证连接池会每隔一定时间对空闲连接进行一次测试，从而保证有效的空闲连接能每隔一定时间访问一次数据库，将于MySQL8小时无会话的状态打破。为0则不测试。default : 0(建议使用)</span>
<span class="token attr-name">datasource.connection.idleConnectionTestPeriod</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true">#连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功。default : 30（建议使用）</span>
<span class="token attr-name">datasource.connection.acquireRetryAttempts</span><span class="token punctuation">=</span><span class="token attr-value">30</span>
<span class="token comment" spellcheck="true">#如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。default : false（不建议使用）</span>
<span class="token attr-name">datasource.connection.breakAfterAcquireFailure</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true">#性能消耗大。如果为true，在每次getConnection的时候都会测试，为了提高性能,尽量不要用。default : false（不建议使用）</span>
<span class="token attr-name">datasource.connection.testConnectionOnCheckout</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true">#配置当连接池所有连接用完时应用程序getConnection的等待时间。为0则无限等待直至有其他连接释放或者创建新的连接，不为0则当时间到的时候如果仍没有获得连接，则会抛出SQLException。其实就是acquireRetryAttempts*acquireRetryDelay。default : 0（与上面两个，有重复，选择其中两个都行）</span>
<span class="token attr-name">datasource.connection.checkoutTimeout</span><span class="token punctuation">=</span><span class="token attr-value">30000</span>
<span class="token comment" spellcheck="true">#如果为true，则在close的时候测试连接的有效性。default : false（不建议使用）</span>
<span class="token attr-name">datasource.connection.testConnectionOnCheckin</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true">#配置一个表名，连接池根据这个表名用自己的测试sql语句在这个空表上测试数据库连接,这个表只能由c3p0来使用，用户不能操作。default : null（不建议使用）</span>
<span class="token attr-name">datasource.connection.automaticTestTable</span><span class="token punctuation">=</span><span class="token attr-value">c3p0TestTable</span>
<span class="token comment" spellcheck="true">#连接池在获得新连接时的间隔时间。default : 1000 单位ms（建议使用）</span>
<span class="token attr-name">datasource.connection.acquireRetryDelay</span><span class="token punctuation">=</span><span class="token attr-value">1000</span>
<span class="token comment" spellcheck="true">#为0的时候要求所有的Connection在应用程序中必须关闭。如果不为0，则强制在设定的时间到达后回收Connection，所以必须小心设置，保证在回收之前所有数据库操作都能够完成。这种限制减少Connection未关闭情况的不是很适用。建议手动关闭。default : 0 单位 s（不建议使用）</span>
<span class="token attr-name">datasource.connection.unreturnedConnectionTimeout</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true">#这个配置主要是为了快速减轻连接池的负载，比如连接池中连接数因为某次数据访问高峰导致创建了很多数据连接，但是后面的时间段需要的数据库连接数很少，需要快速释放，必须小于maxIdleTime。其实这个没必要配置，maxIdleTime已经配置了。default : 0 单位 s（不建议使用）</span>
<span class="token attr-name">datasource.connection.maxIdleTimeExcessConnections</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true">#配置连接的生存时间，超过这个时间的连接将由连接池自动断开丢弃掉。当然正在使用的连接不会马上断开，而是等待它close再断开。配置为0的时候则不会对连接的生存时间进行限制。default : 0 单位 s（不建议使用）</span>
<span class="token attr-name">datasource.connection.maxConnectionAge</span><span class="token punctuation">=</span><span class="token attr-value">0</span></code></pre>
<p><strong>web.xml</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>web</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

      <span class="token comment" spellcheck="true">&lt;!-- 中文乱码处理 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>

          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>

      <span class="token comment" spellcheck="true">&lt;!-- Spring配置文件信息 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:config/spring/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- ContextLoaderListener监听器 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 日志配置 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>log4jConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:config/log4j.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.util.Log4jConfigListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>

      <span class="token comment" spellcheck="true">&lt;!-- 配置前端控制器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:config/springmvc/springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/errors/404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/errors/500.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre>
<h3 id="Eclipse操作"><a href="#Eclipse操作" class="headerlink" title="Eclipse操作"></a>Eclipse操作</h3><ul>
<li>缺少Web.xml文件，右键 javaEE tools 第二项</li>
<li>properties格式乱码，右键  properties编码</li>
<li>如果环境没错，但是一直报错，选择project clean</li>
<li>Eclipse的package查看方式</li>
<li>xml报红色 首先可以尝试通过禁用xml的命名空间引用的验证来解决，具体设置是在：Window → Preferences → Validation → XML 将设置里的对勾取消掉即可<br>或者将版本改为和spring相对应的</li>
<li>没有错误，项目上方却有红’色叉号<br>查看项目问题在哪里：windows-show view-problem<br>重新build  clean后如果项目无法正常运行的处理方法：Properties-&gt;Java Compiler-&gt;Building-&gt;Build Path Problems-&gt;Abort Build when Build Path Errors Occur，把这个选项勾选掉就可以运行程序了。</li>
<li>数据库改为8.0，修改以下内容 </li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">datasource.connection.driver_class</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token attr-name">datasource.connection.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/db_student_ssm_sql?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;nullCatalogMeansCurrent=true</span></code></pre>
<ul>
<li>SSM相对应的名字要注意</li>
</ul>
<h2 id="IDEA版本"><a href="#IDEA版本" class="headerlink" title="IDEA版本"></a>IDEA版本</h2><h3 id="采用Maven搭建"><a href="#采用Maven搭建" class="headerlink" title="采用Maven搭建"></a>采用Maven搭建</h3><p>Github项目地址：<a href="https://github.com/1471748102/web_boostore" target="_blank" rel="noopener">webstore</a></p>
<ul>
<li><p>当使用maben搭建项目的的时候，不要使用3.6.3的maven版本，很大程度上会与idea不兼容，导致构建失败，推荐3.6.0版本</p>
</li>
<li><p>在搭建的之前，将conf下的setting.xml修改一下,添加镜像，因为默认仓库是国外的，所以采用阿里云镜像</p>
</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>修改Maven下仓库位置，不然默认是C盘</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>F:\my_maven_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>在搭建的时候，添加DarchetypeCatalog internal这一对数值，提高下载速度</li>
<li>如果忘记添加这一对数值，可以在setting搜索runner即可</li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>pom.xml</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.wu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssmbuildbook<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ssmbuildbook Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- FIXME change it to the project's website --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--Junit--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--数据库驱动--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--Servlet - JSP --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--Mybatis--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--Spring--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>总体搭建下来不是很顺利，中间有很多插曲，但最后都成功的完成了，希望可以注意一点细节方面.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之代理模式</title>
    <url>/2020/01/24/she-ji-mo-shi-zhi-dai-li-mo-shi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在代理模式中，一个类代表另一个类的功能。这种类型的设计模式属于<strong>结构型模式</strong>.</p>
<p>通过代理，控制对对象的访问！使用代理模式可以详细控制某个（某类）对象的方法.</p>
<h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0/wenzhang/shejimoshi/dailimoshi.jpg" alt=""></p>
<h4 id="核心角色"><a href="#核心角色" class="headerlink" title="核心角色"></a>核心角色</h4><ol>
<li>抽象角色：定义代理角色和真实角色的公共对外方法。</li>
<li>真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。主要是关注真正的业务逻辑！</li>
<li>代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以添加自己的操作，即将统一的流程控制放到代理角色中处理。</li>
</ol>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>安全代理：屏蔽对真实角色的直接访问</li>
<li>远程代理：通过代理类处理远程方法调用（RMI）</li>
<li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>比较常用</p>
<h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p> （1）JDK自带的字节码操作库实现</p>
<p> （2）javaassist字节码操作库的实现</p>
<p> （3）CGLIB第三方代理库</p>
<p> （4）ASM（底层使用指令，可维护性较差）</p>
<p>​    等等……</p>
<h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><p>举例：明星和经纪人的关系，大多时候，经纪人可以代理明星做事，但是当需要唱歌，出席活动时，只能是明星出来，这种显式代理的方式就是静态代理模式.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象明星角色</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 面谈
     */</span>
    <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 签合同
     */</span>
    <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 订票
     */</span>
    <span class="token keyword">void</span> <span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 唱歌
     */</span>
    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 收钱
     */</span>
    <span class="token keyword">void</span> <span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//真实明星</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealStar</span> <span class="token keyword">implements</span> <span class="token class-name">Star</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"realStar面谈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"realStar签合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"realStar订票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周杰伦本人唱歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"realStar收钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//明星经纪人</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyStar</span> <span class="token keyword">implements</span> <span class="token class-name">Star</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> Star star<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ProxyStar</span><span class="token punctuation">(</span>Star star<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>star <span class="token operator">=</span> star<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理人面谈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理人签合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理人订票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//唱歌需要真实的明星来唱，其它都可以代理</span>
        star<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理人收钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Star real <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Star proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyStar</span><span class="token punctuation">(</span>real<span class="token punctuation">)</span><span class="token punctuation">;</span>

        proxy<span class="token punctuation">.</span><span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//周杰伦本人唱歌</span>
        proxy<span class="token punctuation">.</span><span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="动态代理模式"><a href="#动态代理模式" class="headerlink" title="动态代理模式"></a>动态代理模式</h2><h4 id="JDK自带的动态代理"><a href="#JDK自带的动态代理" class="headerlink" title="JDK自带的动态代理"></a>JDK自带的动态代理</h4><ul>
<li>java.lang.reflect.Proxy：动态生成代理类和对象</li>
<li>java.lang.reflect.InvocationHandler：处理器接口，可以通过invoke方法实现对真实角色的访问，每次通过proxy生成代理类对象时都要指定对应的处理器对象。</li>
</ul>
<pre class=" language-java"><code class="language-java">Star realStar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
StarHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarHandler</span><span class="token punctuation">(</span>realStar<span class="token punctuation">)</span><span class="token punctuation">;</span>
Star proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Star<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span>getSystemClassLoader<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Star<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
proxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>实现代码：</p>
<p>使用JDK方法实现的动态代理：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    Star realStar<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">StarHandler</span><span class="token punctuation">(</span>Star realStar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realStar <span class="token operator">=</span> realStar<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>

        Object o <span class="token operator">=</span> null<span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真正的方法执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sing"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//真正方法的调用</span>
            o <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>realStar<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真正的方法调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> o<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Star realStar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StarHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarHandler</span><span class="token punctuation">(</span>realStar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Star proxy  <span class="token operator">=</span> <span class="token punctuation">(</span>Star<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Star<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//周杰伦本人唱歌</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p>
<p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</p>
<p>​             2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/2020/01/23/she-ji-mo-shi-zhi-dan-li-mo-shi/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单例设计模式在应用中是很常见的，比如在使用数据库进行连接的时候经常使用，而我们在学习单例模式中，要考虑到和多线程结合起来时可能存在的各种问题以及其解决办法，这样我们才能写出一个在多线程环境下安全、正确的单例模式。</p>
<p>单例模式常见的有六种写法</p>
<ul>
<li><p>懒汉式（线程不安全）</p>
</li>
<li><p>懒汉式（线程安全）</p>
</li>
<li><p>饿汉式</p>
</li>
<li><p>双检锁/双重校验锁</p>
</li>
<li><p>静态内部类</p>
</li>
<li><p>枚举</p>
</li>
</ul>
<h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><ol>
<li><p>单例类只能有一个实例。</p>
</li>
<li><p>单例类必须自己创建自己的唯一实例。</p>
</li>
<li><p>单例类必须给所有其他对象提供这一实例。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.9/wenzhang/shejimoshi/danlimoshi.jpg" alt=""></p>
<h2 id="几种单例模式"><a href="#几种单例模式" class="headerlink" title="几种单例模式"></a>几种单例模式</h2><h4 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这种写法在单线程环境下可以使用，但是多线程环境下显然会产生多个实例。</p>
<h4 id="懒汉式-线程安全）"><a href="#懒汉式-线程安全）" class="headerlink" title="懒汉式 (线程安全）"></a>懒汉式 (线程安全）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这种方法是对上面的线程不安全的懒汉式的改进。</p>
<p>由于每次去获取实例的时候都会进入<code>synchronized</code>代码块而不管实例是否为null，而其实这个方法只需要执行一次实例化代码就可以，因此这样的开销非常大，所以不推荐使用。</p>
<h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span>  <span class="token keyword">static</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//注意构造方法必须私有</span>
    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>优点：写法简单，就是在类加载的时候完成实例化，避免了线程同步问题。</p>
<p>缺点：没有达到懒加载的效果，如果从始至终都未使用过这个实例，会造成内存的浪费。</p>
<h4 id="双检锁-双重校验锁"><a href="#双检锁-双重校验锁" class="headerlink" title="双检锁/双重校验锁"></a>双检锁/双重校验锁</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton singleton<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。getInstance() 的性能对应用程序很关键。</p>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> SingletonInstance<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading（懒加载）的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化</p>
<p>优点：避免了线程不安全，延迟加载，效率高。</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton<span class="token punctuation">{</span>
    INSTANCE<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whateverMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在JDK1.5中才添加，所以在实际项目开发中，使用枚举实现单例模式很少出现。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般情况下，不建议使用懒汉方式，建议使用饿汉方式。在要明确实现 lazy loading 效果时，使用j静态内部类方式。如果涉及到反序列化创建对象时，可以尝试使用枚举方式。如果有其他特殊的需求，可以考虑使用双检锁方式。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之工厂模式</title>
    <url>/2020/01/21/she-ji-mo-shi-zhi-jian-dan-gong-han-mo-shi/</url>
    <content><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式包括三个内容：<strong>简单工厂模式</strong>,<strong>工厂方法模式</strong>,<strong>抽象工厂模式</strong>.</p>
<p>功能循序递进</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0.1/qqcahce/1.gif" alt=""></p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式是最简单的一个设计模式.</p>
<p><strong>定义</strong>：在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p>
<p>简单工厂模式又叫做静态工厂模式，包含三个角色：</p>
<ul>
<li>工厂角色（Creator）</li>
</ul>
<p>这是简单工厂模式的核心，它用来负责创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</p>
<ul>
<li>抽象角色（Product）</li>
</ul>
<p>这是简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。该类可以是接口，也可以是抽象类。</p>
<ul>
<li>具体产品角色（Concrete Product）</li>
</ul>
<p>简单工厂模式所创建的具体的实例对象</p>
<p>这是使用简单模式的UML图</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.9/wenzhang/shejimoshi/20200202220542.jpg" alt=""></p>
<p>当我们使用简单工厂模式设计一个计算器时</p>
<p>其中Operator是一个抽象类，其中包含属性numberA及numberB，以及一个getResult( )方法用于返回计算结果。它的角色就是抽象角色（Product）。</p>
<p>下面的AddOperator、SubOperator、MulOperator、DivOperator是Operator的子类，分别代表加减乘除四种运算，他们的角色是具体产品角色（Concrete Peoduct）。</p>
<p>OperatorFactory是工厂类，其中的createOperator( )方法用于创建计算器对象。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 计算器抽象类
*/</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Operator</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> numberA<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> numberB<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//获取结果的抽象方法</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// getter和setter方法省略</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
*  加法计算类
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddOperator</span> <span class="token keyword">extends</span> <span class="token class-name">Operator</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//实现父类的抽象方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
*  减法计算类
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubOperator</span> <span class="token keyword">extends</span> <span class="token class-name">Operator</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
*  乘法计算类
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MulOperator</span> <span class="token keyword">extends</span> <span class="token class-name">Operator</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
*  除法计算类
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MulOperator</span> <span class="token keyword">extends</span> <span class="token class-name">Operator</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getNmberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 简单工厂类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Operator <span class="token function">createOperator</span><span class="token punctuation">(</span>String operation<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Operator operator <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>
                operator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>
                operator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>
                operator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MulOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>
                operator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DivOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> operator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 测试简单工厂类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Operator operator <span class="token operator">=</span> OperatorFactory<span class="token punctuation">.</span><span class="token function">createOperator</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        operator<span class="token punctuation">.</span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        operator<span class="token punctuation">.</span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这样用户在使用的时候，不必去关心它的生成，只需要使用即可。但是当我们想添加一个新的计算方法时，我们就要打开源代码进行修改，违背了开闭原则.</p>
<p><strong>总结：</strong></p>
<ul>
<li>在简单工厂模式中，工厂类是整个模式的关键，它包含了必要的逻辑判断，能够根据外界给定的条件去判断应该创建哪个具体类的实例，用户使用时可以直接根据工厂类去创建所需的实例，而无需关心这些对象是如何组织并创建的，从这一点来说，这有利于整个软件体系结构的优化。</li>
<li>但是，简单工厂模式的缺点也正体现在工厂类上，<strong>由于工厂类集中了所有实例的创建逻辑</strong>，当我们增加一个新的具体类时，需要同时修改工厂类（多加几个if判断），这违反了”开闭原则“。</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>定义</strong>：定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p>
<p>工厂方法模式又称<strong>多态性工厂模式</strong>，是对普通工厂方法模式的改进，在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做。该核心类成为一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。</p>
<p>我们对OperatorFactory类更改如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Operator <span class="token function">createAddOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Operator <span class="token function">createSubOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Operator <span class="token function">createMulOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MulOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Operator <span class="token function">createDivOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DivOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>总结</strong>：</p>
<p>与简单工厂模式相比，工厂方法模式避免了因为传入字符串错误而导致无法正常创建对象的问题，并且由于多态的存在，客户端代码可以做到与特定应用无关，适用于任何实体类。缺点是每次增加一个产品时，都需要增加一个具体产品类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>定义</strong>：提供一个接口，用于创建相关的对象家族 。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.9/wenzhang/shejimoshi/uml.jpg" alt=""></p>
<p>具体代码太繁琐就不往这里贴了</p>
<p><strong>总结：</strong></p>
<p>抽象工厂模式具备的一个特点就是它支持的工厂具备生产多种产品族的能力，而工厂方法模式只能创造出来一类产品，这是两者之间的最大区别。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因此将简单工厂模式看为是工厂方法模式的一种特例，两者归为一类。</p>
<p><strong>工厂方法模式</strong></p>
<p>（1）一个抽象产品类，可以派生出多个具体产品类。</p>
<p>（2）一个抽象工厂类，可以派生出多个具体工厂类。</p>
<p>每个具体工厂类只能创建一个具体产品类的实例。</p>
<p><strong>抽象工厂模式</strong></p>
<p>（1）多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。</p>
<p>（2）一个抽象工厂类，每个可以派生出多个具体工厂类。</p>
<p>（3）每个具体工厂类可以创建多个具体产品类的实例。</p>
<p><strong>区别</strong></p>
<p>（1）工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。</p>
<p>（2）工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>简单工厂模式</tag>
        <tag>工厂方法模式</tag>
        <tag>抽象工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式简介</title>
    <url>/2020/01/17/she-ji-mo-shi-jian-jie/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>大学的时候学过软件设计模式这门课，但是在Github上学习开源项目的时候，发现有使用到了设计模式的相关知识，而我感觉都忘了，用的比较少，所以在这里对几个常使用的设计模式进行复习，分几篇博客来写吧.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0.1/qqcahce/3.png" alt=""></p>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>设计模式共有23种，分为三大类：<code>创建型模式</code>，<code>结构性模式</code>，<code>行为型模式</code>.</p>
<ul>
<li><p>创建型（creational）：主要用于处理对象的创建，实例化对象.</p>
</li>
<li><p>结构型（structural）：处理类或对象间的组合.</p>
</li>
<li><p>行为型（behavioral）：描述类或对象怎样进行交互和职责分配.</p>
</li>
</ul>
<h2 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>设计模式要使软件更加的健壮，对开发来说，要尽量做到高内聚，低耦合.</p>
<h3 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h3><ol>
<li><p><strong>开闭原则</strong>：对扩展开放，对修改关闭.</p>
<p>就是说我们在对程序进行扩展的时候，不能去修改原本的代码，通过接口和抽象类进行操作，实现一个热插拔的效果.</p>
</li>
<li><p><strong>里氏代换原则</strong>：任何基类可以出现的地方，子类一定可以出现.</p>
<p>解释一下，定义的意思是说，当派生类代替了子类，整体的功能不受影响.。此时，基类可以复用，里氏代换原则是对开闭原则的补充，在抽象的基础上进一步定义.</p>
</li>
<li><p><strong>依赖倒转原则</strong>：针对接口编程，依赖于抽象而不依赖于具体.</p>
</li>
<li><p><strong>接口隔离原则</strong>：降低耦合度，接口单独设计，互相隔离.</p>
</li>
<li><p><strong>迪米特法则，又称最少知道原则</strong>：各个模块应该相互独立，尽少与其他实体发生相互作用.</p>
</li>
<li><p><strong>合成复用原则</strong>：尽量使用聚合的方式，而不是使用继承.</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里先简单陈述一下设计模式的基本思想，之后挑几个代表性的设计模式看看.</p>
<p>![](<a href="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0/qqcahce/1" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0/qqcahce/1</a> (7).jpg)</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>学习路线</title>
    <url>/2020/01/16/xue-xi-lu-xian/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这里记录一下程序员的学习路线，学无止境.</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0.1/qqcahce/17.jpg" style="zoom:50%;">

<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li>编程语言：C/Java等</li>
</ul>
<blockquote>
<p>语法基础 OO编程思想：类、对象、封装、继承、多态、接口 容器 异常 泛型 I/O 反射 注解</p>
</blockquote>
<ul>
<li>基本网络知识：</li>
</ul>
<blockquote>
<p>ARP协议、IP协议、ICMP协议、TCP和UDP协议、DNS协议、HTTP协议、 HTTPS协议等等</p>
</blockquote>
<ul>
<li>设计模式</li>
</ul>
<blockquote>
<p>倒不需要23种设计模式全部很熟悉，常见的几个，比如：单例模式、工厂模式、代理模 式、策略模式、模板方法模式等几个熟练于心即可</p>
</blockquote>
<ul>
<li>数据库和SQL</li>
</ul>
<blockquote>
<p>数据库基本原理了解，SQL语句熟练书写</p>
</blockquote>
<hr>
<h3 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h3><ul>
<li>操作系统：linux (CentOS\Ubuntu\Fe..)</li>
<li>代码管理：svn/git</li>
<li>持续集成(CI/CD):jenkins</li>
<li>java的项目管理工具：maven/gradle </li>
</ul>
<hr>
<h3 id="框架方面"><a href="#框架方面" class="headerlink" title="框架方面"></a>框架方面</h3><ul>
<li>ssh (spring+structs+hibernate)(已过时)</li>
<li>ssm:spring +springmvc+mybatis(流行)</li>
<li>spring boot</li>
</ul>
<hr>
<h3 id="各种中间件"><a href="#各种中间件" class="headerlink" title="各种中间件"></a>各种中间件</h3><ul>
<li>MQ 消息队列</li>
<li>RPC 通讯框架 gRPC thrift dubbo springcloud</li>
<li>elasticsearch 收索引擎 数据库</li>
</ul>
<hr>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>SQL：mysql/postgre sql</li>
<li>Nosql:redis memcached mongodb elasticsearch</li>
</ul>
<hr>
<h3 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h3><ul>
<li>分布式/微服务架构</li>
<li>spring cloud</li>
<li>dubbo</li>
<li>rpc通信</li>
</ul>
<hr>
<h3 id="虚拟化-容器化的技术"><a href="#虚拟化-容器化的技术" class="headerlink" title="虚拟化/容器化的技术"></a>虚拟化/容器化的技术</h3><ul>
<li>Docker 容器化</li>
<li>k8s kubernetes</li>
</ul>
<hr>
<h3 id="关注源码-性能"><a href="#关注源码-性能" class="headerlink" title="关注源码/性能"></a>关注源码/性能</h3><ul>
<li>jdk源码以及部分设计思想</li>
<li>Spring 源码</li>
<li>JVM细节与排错</li>
<li>高并发/高可用</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习路线</category>
      </categories>
      <tags>
        <tag>学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>github上HTML显示和yml修改</title>
    <url>/2020/01/15/github-shang-html-xian-shi-he-yml-xiu-gai/</url>
    <content><![CDATA[<h2 id="全文"><a href="#全文" class="headerlink" title="全文"></a>全文</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>今天下午写了一个HTML文件介绍自己的信息，但是将他部署到Github的时候却发现在使用的时候，只能看到源代码，却不能直接看到HTML渲染后的界面，这就很悲伤了.</p>
<p>上百度一查，百度上全是说在HTML文件的地址前面加上一个前缀</p>
<p>例如：htmlpreview.github.io/?文件地址</p>
<p><code>htmlpreview.github.io/?1471748102/LeetCode-OJ/master/about.html</code></p>
<p>但我用了之后发现，访问不到？？？</p>
<p>WTF？</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103213013.jpg" style="zoom:200%;">



<p>失败！非常失败！！！</p>
<p>查了查发现，这个是私人设置的，不是官方设计的，不知道为啥失效了.</p>
<p>然后我去搜了搜，发现一个网站可以使用</p>
<p>如下：</p>
<p><code>https://raw.githack.com/</code></p>
<p><a href="https://raw.githack.com/1471748102/LeetCode-OJ/master/about.html" target="_blank" rel="noopener">我的简历界面</a></p>
<h3 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h3><p>在yml里面修改sociallink的时候，发现不知道在哪里改了，发现在layout文件下下，找相对应的文件即可，有点傻了，这都没看出来.</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103213122.jpg" style="zoom:50%;"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库查询语句</title>
    <url>/2020/01/14/shu-ju-ku-cha-xun-yu-ju/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在重看数据库的时候，想起来之前数据库查询一个实验，在此把数据库的查询语句汇总一下.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0/xiaokonglong/20200102193241.jpg" alt=""></p>
<h2 id="首先建立三个表"><a href="#首先建立三个表" class="headerlink" title="首先建立三个表"></a>首先建立三个表</h2><p>学生表：Student(Sno,Sname,Ssex,Sage,Sdept)</p>
<p>课程表：Course(Cno,Cname,Cpno,Ccredit)，其中Cpno为外码</p>
<p>学生选课表：SC(Sno,Cno,Grade)，其中Sno为外码，Cno为外码</p>
<pre class=" language-sql"><code class="language-sql">创建stu数据库
<span class="token keyword">create</span> <span class="token keyword">database</span> stu
创建三个表
<span class="token keyword">create</span> <span class="token keyword">table</span> Student
<span class="token punctuation">(</span>
Sno char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
Sname  char<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>
Ssex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
Sage <span class="token keyword">smallint</span><span class="token punctuation">,</span>
Sdept char<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> Course
<span class="token punctuation">(</span>
Cno char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
Cname char<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
Cpno char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
Ccredit <span class="token keyword">smallint</span><span class="token punctuation">,</span>
<span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>Cpno<span class="token punctuation">)</span><span class="token keyword">references</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> Sc
<span class="token punctuation">(</span>
Sno char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
Cno char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
Grade <span class="token keyword">smallint</span><span class="token punctuation">,</span>
<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Cno<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">FOREIGN</span> <span class="token keyword">key</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token keyword">REFERENCES</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">FOREIGN</span> <span class="token keyword">key</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token keyword">REFERENCES</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>插入数据后进行操作</p>
<h2 id="多表查询和单表查询"><a href="#多表查询和单表查询" class="headerlink" title="多表查询和单表查询"></a>多表查询和单表查询</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><ul>
<li>查询计算机系学生的信息</li>
</ul>
<p><code>select Sno,Sname,Ssex,Ssex,Sage,Sdept from Studentx where Sdept='CZ'</code></p>
<ul>
<li>查询全体学生的人数</li>
</ul>
<p><code>select COUNT(*) as avg from Studentx</code></p>
<ul>
<li>查询全体男生人数和女生人数</li>
</ul>
<p><code>select COUNT(*) as 男 from Studentx where Ssex='男'</code></p>
<p><code>select COUNT(*) as 女 from Studentx where Ssex='女'</code></p>
<ul>
<li>查询每个系中的男生人数并按人数的降序排列</li>
</ul>
<p><code>select Sdept,COUNT(Ssex) from Studentx group by Sdept,Ssex having Ssex='男' order by COUNT(Ssex) desc</code></p>
<ul>
<li>查询名字中带“阳”的学生信息</li>
</ul>
<p><code>select * from Studentx where Sname LIKE '%阳%'</code></p>
<ul>
<li>求被选修的各门课程的平均成绩和选修该课程的人数</li>
</ul>
<p><code>select Cno,COUNT(Sno),AVG(Grade) from scx group by Cno</code></p>
<ul>
<li>查找选修课程超过2门且成绩都在80分以上的学生的学号</li>
</ul>
<p><code>select Sno from Scx group by Sno having COUNT(Cno)&gt;2 and MIN(Grade)&gt;80</code></p>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul>
<li>查询未选课的学生情况包含学生学号、姓名和所在系</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Sdept
<span class="token keyword">from</span> Studentx
<span class="token keyword">where</span> Studentx<span class="token punctuation">.</span>Sno <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span>
<span class="token keyword">select</span> Sno
<span class="token keyword">from</span> Scx
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>查询已选课学生的选课情况包含学生学号、姓名、所选课程、成绩</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Studentx<span class="token punctuation">.</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Cname<span class="token punctuation">,</span>Grade
<span class="token keyword">from</span> Studentx<span class="token punctuation">,</span>Scx<span class="token punctuation">,</span>Coursex
<span class="token keyword">where</span> Studentx<span class="token punctuation">.</span>Sno<span class="token operator">=</span>Scx<span class="token punctuation">.</span>Sno <span class="token operator">AND</span> Scx<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Coursex<span class="token punctuation">.</span>Cno</code></pre>
<ul>
<li>查询所有学生的选课情况包含学生学号、姓名、课程号、课程名、成绩；（包含选课和未选课所有学生）</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Studentx<span class="token punctuation">.</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Coursex<span class="token punctuation">.</span>Cname<span class="token punctuation">,</span>Grade<span class="token punctuation">,</span>Ccredit 
<span class="token keyword">from</span> Studentx
<span class="token keyword">left</span> <span class="token keyword">join</span> Scx 
<span class="token keyword">on</span> Studentx<span class="token punctuation">.</span>Sno<span class="token operator">=</span>Scx<span class="token punctuation">.</span>Sno 
<span class="token keyword">left</span> <span class="token keyword">join</span> Coursex 
<span class="token keyword">on</span> Scx<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Coursex<span class="token punctuation">.</span>Cno<span class="token punctuation">;</span></code></pre>
<ul>
<li>查询没有学生选的课程信息包含课程号、课程名</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Cno<span class="token punctuation">,</span>Cname<span class="token punctuation">,</span>Cpno<span class="token punctuation">,</span>Ccredit 
<span class="token keyword">from</span> Coursex 
<span class="token keyword">where</span> Coursex<span class="token punctuation">.</span>Cno <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span> 
<span class="token keyword">select</span> Cno 
<span class="token keyword">from</span> Scx 
<span class="token punctuation">)</span></code></pre>
<ul>
<li>查询已被选择课程的课程信息包含课程号、课程名、学生学号、姓名、成绩</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Cname<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Studentx<span class="token punctuation">.</span>Sno<span class="token punctuation">,</span>Grade<span class="token punctuation">,</span>Coursex<span class="token punctuation">.</span>Cno
<span class="token keyword">from</span> Studentx<span class="token punctuation">,</span>Scx<span class="token punctuation">,</span>Coursex
whereStudentx<span class="token punctuation">.</span>Sno<span class="token operator">=</span>Scx<span class="token punctuation">.</span>Sno    <span class="token operator">AND</span>    Scx<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Coursex<span class="token punctuation">.</span>Cno </code></pre>
<ul>
<li>查询所有课程的选课情况包含课程号、课程名、学生学号、姓名、成绩；（包含没有学生选课的课程）</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Coursex<span class="token punctuation">.</span>Cname<span class="token punctuation">,</span>Coursex<span class="token punctuation">.</span>Cno<span class="token punctuation">,</span>Studentx<span class="token punctuation">.</span>Sname<span class="token punctuation">,</span>Studentx<span class="token punctuation">.</span>Sno<span class="token punctuation">,</span>Grade
<span class="token keyword">from</span> Coursex
<span class="token keyword">left</span> <span class="token keyword">join</span> Scx 
<span class="token keyword">on</span> Coursex<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Scx<span class="token punctuation">.</span>Cno 
<span class="token keyword">left</span> <span class="token keyword">join</span> Studentx 
<span class="token keyword">on</span> Scx<span class="token punctuation">.</span>Sno<span class="token operator">=</span>Studentx<span class="token punctuation">.</span>Sno<span class="token punctuation">;</span>
</code></pre>
<ul>
<li>查询每个学生选课的总学分，并按总学分的降序排列</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Sno<span class="token punctuation">,</span><span class="token function">Sum</span><span class="token punctuation">(</span>Ccredit<span class="token punctuation">)</span>
<span class="token keyword">from</span> Coursex<span class="token punctuation">,</span>Scx
<span class="token keyword">where</span> Scx<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Coursex<span class="token punctuation">.</span>Cno
<span class="token keyword">group</span> <span class="token keyword">by</span> Sno
<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">sum</span><span class="token punctuation">(</span>Ccredit<span class="token punctuation">)</span> <span class="token keyword">desc</span></code></pre>
<ul>
<li>查询选修了数据库课程且成绩在60分以下的学生的学号、姓名、课程名及成绩</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Scx<span class="token punctuation">.</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Grade
<span class="token keyword">from</span> Scx<span class="token punctuation">,</span>Studentx<span class="token punctuation">,</span>Coursex
<span class="token keyword">where</span> Scx<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Studentx<span class="token punctuation">.</span>Sno <span class="token operator">and</span> Scx<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Coursex<span class="token punctuation">.</span>Cno <span class="token operator">and</span> Cname<span class="token operator">=</span><span class="token string">'数据库'</span> <span class="token operator">and</span> grade<span class="token operator">&lt;</span><span class="token number">60</span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好多语句已经想不起来了，还是要多使用才能记住.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接优化</title>
    <url>/2020/01/13/shu-ju-ku-lian-jie-you-hua/</url>
    <content><![CDATA[<h2 id="全文"><a href="#全文" class="headerlink" title="全文"></a>全文</h2><p>在做二手车交易系统的时候，发现直接将数据库信息写在代码里不安全，所以将数据库连接的驱动，链接，账号，密码抽取出来放入资源文件，使用<strong>类加载器加载配置文件</strong>，大大提升安全性，也便于修改.</p>
<p>同时，使用<strong>单例模式</strong>控制连接池，避免重复多次的打开数据库连接而造成的性能的下降和系统资源的浪费.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.8.0/xiaokonglong/20200102193253.jpg" alt=""></p>
<p>但是现在看起来好low，用了SSM框架，发现这些就是个小儿科.</p>
<p><strong>db. properties</strong></p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">db.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span>
<span class="token attr-name">db.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost</span>
<span class="token attr-name">db.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">199828</span></code></pre>
<p><strong>connect.java</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> conn<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">connect</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String dirver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> connect conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            InputStream inputStream <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

            dirver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dirver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>dirver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            conn<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        connect<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Github查询技巧</title>
    <url>/2020/01/12/github-cha-xun-ji-qiao/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上网浏览的时候偶尔看到github使用的小技巧，在这里简单记录下来</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaokonglong/20200102193220.jpg" style="zoom: 200%;">

<h2 id="在github搜索的时候"><a href="#在github搜索的时候" class="headerlink" title="在github搜索的时候"></a><strong>在github搜索的时候</strong></h2><ul>
<li>搜索名字中带有”爬虫”的</li>
</ul>
<p><code>in:name 爬虫</code></p>
<ul>
<li>搜索readme中带有”爬虫”的</li>
</ul>
<p><code>in:readme 爬虫</code></p>
<ul>
<li>搜索描述中带有”爬虫”的</li>
</ul>
<p><code>in:description 爬虫</code></p>
<ul>
<li>搜索stars&gt;1000的</li>
</ul>
<p><code>stars:&gt;1000</code></p>
<ul>
<li>搜索forks&gt;1000的</li>
</ul>
<p><code>forks:&gt;1000</code> </p>
<ul>
<li>搜索最近更新于2019年9月1日之后的</li>
</ul>
<p><code>pushed:&gt;2019-09-01</code></p>
<ul>
<li>搜索Python的项目</li>
</ul>
<p><code>language:Python</code></p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a><strong>管理</strong></h2><p>github有个<code>Project</code>选项，可以在此协同管理项目,在企业中协同管理十分方便.</p>
<h2 id="几个不错的项目"><a href="#几个不错的项目" class="headerlink" title="几个不错的项目"></a><strong>几个不错的项目</strong></h2><p>8个开源的Spring Boot 前后端分离项目</p>
<ol>
<li>美人鱼</li>
<li>微人事</li>
<li>bootshiro</li>
<li>open-capacity-platform</li>
<li>V部落</li>
<li>悟空CRM</li>
<li>paascloud-master</li>
<li><a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">macrozheng/mall</a></li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>暂时就这么多，之后有别的知识再补充.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>DAO开发模式</title>
    <url>/2020/01/12/dao-kai-fa-mo-shi/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DAO模式就实现了把数据库表的操作转化对Java类的操作，从而提高程序的可读性，并实现更改数据库的方便性。其架构图如下图</p>


<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><p><strong>jsp提交界面</strong></p>
<pre class=" language-html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>添加信息提交页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
<span class="token selector">body</span><span class="token punctuation">{</span>  
     <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(src.img/6.jpg)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*图片地址*/</span>                             
     <span class="token property">background-origin</span><span class="token punctuation">:</span>content<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*从content区域开始显示背景*/</span>  
     <span class="token property">background-position</span><span class="token punctuation">:</span><span class="token number">50%</span> <span class="token number">5%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*             图片上下左右居中  */</span>
     <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*           保持图像本身的宽高比例，将图片缩放到宽度或高度正好适应定义背景的区域  */</span>
     <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*         图像不重复显示  */</span>
<span class="token punctuation">}</span>
    <span class="token selector">td</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector">h2</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">}</span>
    <span class="token selector">table </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token selector">td.</span><span class="token punctuation">{</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> 微软雅黑<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token selector">input<span class="token class">.submit</span> </span><span class="token punctuation">{</span>
    <span class="token property">align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#0080ff</span><span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> 
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span> 
    <span class="token property">font-family</span><span class="token punctuation">:</span>微软雅黑<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jsreg<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>238<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>252<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateteacher.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>忘记密码？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p><strong>Struts.xml的配置</strong></p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jsreg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Action.ther<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/index_student_left.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span></code></pre>
<p><strong>JavaBean</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String ps<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getPs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ps<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPs</span><span class="token punctuation">(</span>String ps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ps <span class="token operator">=</span> ps<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>接口类型</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String ps<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getPs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ps<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPs</span><span class="token punctuation">(</span>String ps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ps <span class="token operator">=</span> ps<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>DAO</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> dao<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> db<span class="token punctuation">.</span>DbConnect<span class="token punctuation">;</span>
<span class="token keyword">import</span> domain<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span>

<span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">TeacherDAO</span> <span class="token keyword">implements</span> <span class="token class-name">Iteacher</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FIELDS_INSERT<span class="token operator">=</span><span class="token string">"username,ps"</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> String SELECT_SQL<span class="token operator">=</span><span class="token string">"select "</span><span class="token operator">+</span>FIELDS_INSERT<span class="token operator">+</span><span class="token string">" from Teacher where username=?"</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> String UPDATE_SQL<span class="token operator">=</span><span class="token string">"update Teacher set "</span><span class="token operator">+</span><span class="token string">"username=?,ps=? where username=?"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Teacher <span class="token function">find</span><span class="token punctuation">(</span>Teacher te<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Connection con<span class="token operator">=</span>null<span class="token punctuation">;</span>
        PreparedStatement prepStmt<span class="token operator">=</span>null<span class="token punctuation">;</span>
        ResultSet rs<span class="token operator">=</span>null<span class="token punctuation">;</span>
        Teacher te2<span class="token operator">=</span>null<span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            con<span class="token operator">=</span>DbConnect<span class="token punctuation">.</span><span class="token function">getDBconnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            prepStmt<span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>SELECT_SQL<span class="token punctuation">)</span><span class="token punctuation">;</span>
            prepStmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> te<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rs<span class="token operator">=</span>prepStmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                te2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                te2<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                te2<span class="token punctuation">.</span><span class="token function">setPs</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            DbConnect<span class="token punctuation">.</span><span class="token function">closeDB</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> prepStmt<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> te2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>v</code></pre>
<p><strong>连接数据库</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> db<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbConnect</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String driverName<span class="token operator">=</span><span class="token string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String userName<span class="token operator">=</span><span class="token string">"sa"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String userpwd<span class="token operator">=</span><span class="token string">"13481195624q"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String dbName<span class="token operator">=</span><span class="token string">"Student"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span>    <span class="token keyword">static</span> Connection <span class="token function">getDBconnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String dbURL<span class="token operator">=</span><span class="token string">"jdbc:sqlserver://localhost:1433;DatabaseName=Student"</span><span class="token punctuation">;</span>
         <span class="token keyword">try</span> <span class="token punctuation">{</span>
              Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>
              Connection con<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dbURL<span class="token punctuation">,</span>userName<span class="token punctuation">,</span>userpwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span> con<span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
                     <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeDB</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> PreparedStatement pstm<span class="token punctuation">,</span> ResultSet rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span>null<span class="token punctuation">)</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>pstm<span class="token operator">!=</span>null<span class="token punctuation">)</span>pstm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">!=</span>null<span class="token punctuation">)</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>执行Action</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Action<span class="token punctuation">;</span>

<span class="token keyword">import</span> dao<span class="token punctuation">.</span>TeacherDAO<span class="token punctuation">;</span>
<span class="token keyword">import</span> domain<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>ActionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>ActionSupport<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>struts2<span class="token punctuation">.</span>ServletActionContext<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ther</span> <span class="token keyword">extends</span> <span class="token class-name">ActionSupport</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> HttpServletRequest request<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    request<span class="token operator">=</span>ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Teacher te<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    te<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    te<span class="token punctuation">.</span><span class="token function">setPs</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TeacherDAO te2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TeacherDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        te<span class="token operator">=</span>te2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"teacher"</span><span class="token punctuation">,</span> te<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>数据访问和业务逻辑分离，便于数据维护，业务逻辑不需要了解访问细节，这是大三写的一个项目，感觉Jsp以后应该用不到了，前后端耦合太严重了.不太符合现在前后端分离的要求.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>DAO</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作(三)</title>
    <url>/2020/01/11/git-cao-zuo-san/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用Git的时候，并没有很注意过Git分支管理的使用，今天来对分支管理进行一些总结.</p>
<p>非常感谢廖雪峰老师的讲解.</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103213056.jpg" style="zoom:50%;">

<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>HEAD指向<code>master</code>,其实<code>maste</code>r才是指向提交的.</p>
<p>当我们创建了一个分支时候，例如<code>dev</code>,知道<code>dev</code>指向和<code>maste</code>r相同的提交</p>
<p>HEAD的指向就是当前所在的分支</p>
<p>两个分支是独立的，可以合并，合并起来很容易，只需要改变HEAD指向即可</p>
<p><strong>示例：</strong></p>
<ol>
<li>创建并转到新的<code>dev</code>分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> switch -c dev


<span class="token function">git</span> branch dev
<span class="token function">git</span> switch dev</code></pre>
<p>也可以使用</p>
<p><del><code>git checkout -b dev</code></del></p>
<p>但是并不推荐，容易和<code>git checkout --file</code>弄混</p>
<ol start="2">
<li>单纯的转换分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> switch master</code></pre>
<ol start="3">
<li>查看当前分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch</code></pre>
<ol start="4">
<li>把另一个分支的内容合并到这个分支上</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> merge dev</code></pre>
<ol start="5">
<li>删除某个分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>name<span class="token operator">></span></code></pre>
<p>这个操作没有发生冲突.</p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>当我们两个分支都发生了改动，合并的时候发现有冲突怎么办？</p>
<p><code>dev</code>分支下加了一句话，提交正常</p>
<p><code>master</code>分支下加了一句话，提交正常</p>
<p>把<code>dev</code>合并到<code>master</code>，失败！</p>
<p>此时会出现失败原因，冲突，此时需要手动修改内容.</p>
<h2 id="BUG分支"><a href="#BUG分支" class="headerlink" title="BUG分支"></a>BUG分支</h2><p>当你的工作做到一半，临时发现<code>master</code>分支上有BUG，你又不想提交手头工作怎么办？</p>
<ul>
<li><p>使用<code>git stash</code>暂时保存下</p>
</li>
<li><p>查看的时候使用<code>git stash list</code>查看</p>
</li>
<li><p>恢复时有两种方法</p>
</li>
</ul>
<ol>
<li>使用<code>git stash apply</code>，恢复后不删除，如果你要删除，使用<code>git stash drop</code></li>
<li>使用<code>git stash pop</code>,恢复后就删除</li>
</ol>
<h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>当你想要开发一个新功能，你需要新开辟一个分支，开发好后在融合进去</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch  feature
<span class="token function">git</span> checkout feature
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>//开发过程</code></pre>
<p>当你准备合并时，老板忽然说，不要了，你只能就地销毁</p>
<p><code>git branch -d feature</code>  删除</p>
<p><strong>显示：没有融合，删除不掉</strong></p>
<ul>
<li>要用大写的<code>D</code>进行删除</li>
</ul>
<p><code>git branch -D feature</code> </p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Git的操作有非常多，但常用的就那么几个，多加练习即可.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作(二)</title>
    <url>/2020/01/11/git-cao-zuo-er/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前简单汇总过一些简单的git命令，但是不够完整，这里进行一点补充</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/img2/20200102193341.jpg" style="zoom:50%;">

<ul>
<li><p>需要注意的是git不能记录二进制文件，微软下的Word是属于二进制文件</p>
</li>
<li><p>尽量使用UTF-8</p>
</li>
</ul>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><ul>
<li>git status 查看当前文件夹下的状态</li>
</ul>
<p>包括是否commit？是否add？</p>
<ul>
<li><p>git diff 查看文件的区别</p>
</li>
<li><p>git log 查看记录</p>
</li>
</ul>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol>
<li><strong>如果你对文件进行了操作，但是你后悔了，想要进行回退版本</strong></li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^</code></pre>
<p>如果想要回退多个版本</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD~3 </code></pre>
<p>或者使用下面方法</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard 版本号</code></pre>
<p>但是此时又有意外，你忘记了版本号:sob:</p>
<p>使用下面的命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reflog</code></pre>
<ol start="2">
<li><strong>如果你不小心修改错了文件</strong></li>
</ol>
<p>你先查看一下是否add或者commit了？若果没有</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout --file</code></pre>
<p>如果不小心add了，但是还没有commit</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset HEAD <span class="token function">file</span></code></pre>
<p>然后执行上一步<code>git checkout --file</code></p>
<p>如果你更不小心commit了之后才发现</p>
<p>那你直接回退版本就行了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>暂时这么多，想到再补充</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaokonglong/1.jpg" style="zoom:200%;"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>分页查询和下拉框</title>
    <url>/2020/01/09/fen-ye-cha-xun-he-xia-la-kuang/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大三下学习了struts2，并基于此设计了一个二手车交易系统，在分页查询和动态下拉框的时候有点模糊，记录一下实现过程.</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103213122.jpg" style="zoom:50%;">

<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ol>
<li>为什么会用到分页呢，因为列表内容太多了，所以使用分页进行显示。</li>
<li>分页要考虑每页的记录和总页数、第几页</li>
</ol>
<p><strong>SQL语句</strong>：</p>
<pre class=" language-sql"><code class="language-sql">String sql<span class="token operator">=</span><span class="token string">"select * from student order by userid limit ?,?"</span><span class="token punctuation">;</span></code></pre>
<p><strong>预编译:</strong></p>
<pre class=" language-sql"><code class="language-sql"> PreparedStatement ps <span class="token operator">=</span> con<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>设置好第几页：</strong></p>
<pre class=" language-sql"><code class="language-sql">ps<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>pagenow<span class="token operator">*</span>pagesize<span class="token operator">-</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>StuDAO.java</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> dao<span class="token punctuation">;</span>

<span class="token keyword">import</span> bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StuDAO</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">inter</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span>String userid<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String userroom<span class="token punctuation">,</span>String userage<span class="token punctuation">,</span>String usergrade<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    User <span class="token function">mlz</span><span class="token punctuation">(</span>User uk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    List <span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String xuehao<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    User <span class="token function">update</span><span class="token punctuation">(</span>User uz<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    List <span class="token function">selectbyname</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    List <span class="token function">selectbyid</span><span class="token punctuation">(</span>String userid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">ShowByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pagenow<span class="token punctuation">,</span><span class="token keyword">int</span> pagesize<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>


<span class="token punctuation">}</span></code></pre>
<p><strong>StuDAOImp.java</strong></p>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">ShowByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pagenow<span class="token punctuation">,</span><span class="token keyword">int</span> pagesize<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>drivers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> users<span class="token punctuation">,</span> passs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String sql<span class="token operator">=</span><span class="token string">"select * from student order by userid limit ?,?"</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            PreparedStatement ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>pagenow<span class="token operator">*</span>pagesize<span class="token operator">-</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                User ut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ut<span class="token punctuation">.</span><span class="token function">setUserid</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ut<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ut<span class="token punctuation">.</span><span class="token function">setUserroom</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userroom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ut<span class="token punctuation">.</span><span class="token function">setUserage</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ut<span class="token punctuation">.</span><span class="token function">setUsergrade</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"usergrade"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ut<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//记录总个数</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">int</span>  count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>drivers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> users<span class="token punctuation">,</span> passs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String sql<span class="token operator">=</span><span class="token string">"select count(*) from student"</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Statement stmt<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ResultSet rs<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>ShowByPage.java</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> control<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> bean<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> dao<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>ActionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>ActionSupport<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShowByPage</span> <span class="token keyword">extends</span> <span class="token class-name">ActionSupport</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> pagenow<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化为1，默认从第一页开始显示</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> pagesize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每页显示6条记录</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPagenow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pagenow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPagesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pagesize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPagenow</span><span class="token punctuation">(</span><span class="token keyword">int</span> pagenow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pagenow <span class="token operator">=</span> pagenow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPagesize</span><span class="token punctuation">(</span><span class="token keyword">int</span> pagesize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pagesize <span class="token operator">=</span> pagesize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        <span class="token keyword">int</span> current_page<span class="token operator">=</span><span class="token function">getPagenow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//System.out.println(getPagenow());</span>
        ActionContext context<span class="token operator">=</span>ActionContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StuDAO stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StuDAOImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token operator">=</span>stu<span class="token punctuation">.</span><span class="token function">ShowByPage</span><span class="token punctuation">(</span>pagenow<span class="token punctuation">,</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pages<span class="token operator">=</span>stu<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StringBuffer s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token punctuation">(</span>pages<span class="token operator">/</span>pagesize<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token comment" spellcheck="true">// System.out.println(temp);</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>temp<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>current_page<span class="token punctuation">)</span><span class="token punctuation">{</span>
                s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//System.out.println("ERROR");</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;a href='myaction?pagenow="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"'>"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">// System.out.println("YES");</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>ShowByPage.jsp</strong></p>
<pre class=" language-html"><code class="language-html">&lt;%--
  Created by IntelliJ IDEA.
  User: Hzw
  Date: 2019/4/24
  Time: 17:58
  To change this template use File | Settings | File Templates.
--%>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myaction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分页显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p><strong>ShowByPageSuc.jsp</strong></p>
<pre class=" language-html"><code class="language-html">&lt;%--
  Created by IntelliJ IDEA.
  User: Hzw
  Date: 2019/4/24
  Time: 17:55
  To change this template use File | Settings | File Templates.
--%>
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8"%>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">import</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.*,bean.*<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FF00CC<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>所有学生信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>班级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>JAVA成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span>
        <span class="token attr-name">List&lt;User</span><span class="token punctuation">></span></span> list=(List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span><span class="token punctuation">></span></span>)request.getAttribute("list");
        for(User p:list){
    %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=p.getUserid() %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=p.getUsername() %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=p.getUserroom() %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=p.getUserage()%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=p.getUsergrade() %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            &lt;%=request.getAttribute("s") %>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h2 id="动态下拉框"><a href="#动态下拉框" class="headerlink" title="动态下拉框"></a>动态下拉框</h2><ol>
<li>在写下拉框的时候，发现展开列表总是静态的，不能根据数据库的内容而进行改变，所以在此设计一下，遍历数据库所有类型，并返回列表到下拉框，这样就可以动态显示所有内容.</li>
</ol>
<p><strong>下拉框分类查询界面</strong></p>
<pre class=" language-html"><code class="language-html">&lt;%--
  Created by IntelliJ IDEA.
  User: Hzw
  Date: 2019/6/29
  Time: 23:06
  To change this template use File | Settings | File Templates.
--%>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/struts-tags<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>op<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opselect.action<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    请选择您的查询类型：
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>depart<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>iterator</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WareGroup<span class="token punctuation">"</span></span>  <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WareGroup<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            &lt;option value="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#WareGroup.getCartype()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#WareGroup.getCartype()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>iterator</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p><strong>下拉框分类查询action</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> control<span class="token punctuation">.</span>opion<span class="token punctuation">;</span>



<span class="token keyword">import</span> bean<span class="token punctuation">.</span>CarInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>ActionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>ActionSupport<span class="token punctuation">;</span>
<span class="token keyword">import</span> dao<span class="token punctuation">.</span>DataDAO<span class="token punctuation">;</span>
<span class="token keyword">import</span> dao<span class="token punctuation">.</span>DataDAOImp<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpSelect</span> <span class="token keyword">extends</span> <span class="token class-name">ActionSupport</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String depart<span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>CarInfo<span class="token operator">></span> TypeSelect<span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getDepart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> depart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepart</span><span class="token punctuation">(</span>String depart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>depart <span class="token operator">=</span> depart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CarInfo<span class="token operator">></span> <span class="token function">getTypeSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> TypeSelect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTypeSelect</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>CarInfo<span class="token operator">></span> typeSelect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TypeSelect <span class="token operator">=</span> typeSelect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        DataDAO stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataDAOImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TypeSelect<span class="token operator">=</span>stu<span class="token punctuation">.</span><span class="token function">selectbytype</span><span class="token punctuation">(</span>depart<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ActionContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"TypeSelect"</span><span class="token punctuation">,</span>TypeSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>depart<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>下拉框查询成功界面</strong></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/struts-tags<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">import</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean.CarInfo<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">import</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>&lt;%--
  Created by IntelliJ IDEA.
  User: Hzw
  Date: 2019/6/29
  Time: 23:07
  To change this template use File | Settings | File Templates.
--%>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FF00CC<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>所有车辆信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>车型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>修理次数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>磨损程度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>金额<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>联系电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>状态<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>iterator</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TypeSelect<span class="token punctuation">"</span></span>  <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getCarid()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getCartype()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getCarfix()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getWorn()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getContent()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getMoney()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getNumber()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getEmail()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>property</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ts.getState()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>iterator</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../Index/ViewNormal.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>返回用户界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>学无止境.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>分页查询</tag>
        <tag>动态下拉框</tag>
        <tag>struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作(一)</title>
    <url>/2020/01/08/git-cao-zuo-yi/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用git的时候出现了一些遗忘，这里暂时记录一些随笔，加深影响.</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/img2/20200102193341.jpg" style="zoom:50%;">

<h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2><ol>
<li>远程仓库： 在<code>github</code>中新建<code>New repository</code> 输入仓库名</li>
<li>在自己电脑上创建一个相同名称的文件夹</li>
</ol>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p><code>mkdir learngit</code>  创建目录</p>
<p><code>cd learngit</code> 转到此目录下</p>
<p>使用<code>git init</code>初始化仓库</p>
<p><code>ls -ah</code> 会发现一个隐藏的目录<code>.git</code></p>
<h2 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h2><p>连接远程仓库，复制远程仓库的地址信息</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin 地址链接</code></pre>
<h2 id="从远程度仓库clone仓库-本地没有"><a href="#从远程度仓库clone仓库-本地没有" class="headerlink" title="从远程度仓库clone仓库(本地没有)"></a>从远程度仓库clone仓库(本地没有)</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone </code></pre>
<h2 id="从远程仓库pull文件（本地有，融合）"><a href="#从远程仓库pull文件（本地有，融合）" class="headerlink" title="从远程仓库pull文件（本地有，融合）"></a>从远程仓库pull文件（本地有，融合）</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master</code></pre>
<h2 id="将本地文件push到远程仓库"><a href="#将本地文件push到远程仓库" class="headerlink" title="将本地文件push到远程仓库"></a>将本地文件push到远程仓库</h2><p><code>git status</code>         查看工作目录的状态</p>
<p><code>git add .</code>            将文件添加到暂存区</p>
<p><code>git commit -m "message"</code>  提交更改，添加备注信息</p>
<p><code>git push origin master</code>     将本地仓库信息push到远程</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><strong>git pull origin master 出现如下提示：</strong></li>
</ol>
<pre class=" language-bash"><code class="language-bash">fatal: refusing to merge unrelated histories</code></pre>
<p><strong>解决：</strong>如下操作即可解决</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories</code></pre>
<ol start="2">
<li><p>.<strong>每次git push origin master 时都需要输入用户名和密码：</strong></p>
<p>　因为配置的时候使用的是https协议，所以每次都需要输入</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote -v  查看远程连接

<span class="token function">git</span> remote <span class="token function">rm</span> origin  删除远程连接

<span class="token function">git</span> remote add origin git@github.com:yourName/repositoryname.git</code></pre>
</li>
</ol>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>本地创建了一个project<br>并在GitHub上创建了一个仓库，想要将本地的仓库链接到远程仓库<br>我用的是如下方法：</p>
<p><code>git init</code>    初始化本地仓库<br><code>git remote add origin XXX</code>     添加远程仓库地址</p>
<p>如果你在这之后就执行</p>
<p><code>git add -A</code><br><code>git commit -m "XXX"</code></p>
<p><code>git push origin master</code>,那么就会出现问题(被拒绝)</p>
<p>所以在<code>remote add</code>后不要着急<code>git add</code>，一定要<code>git pull origin master</code></p>
<p>出现这个的原因<br>是因为你在码云创建的仓库有README文件，而本地没有，造成本地和远程的不同步，<br>那么有两种方案可以解决：</p>
<p><strong>one ：</strong><br>本地没有ReadMe文件，那么就在本地生成一个</p>
<p><code>git pull --rebase origin master</code>     本地生成ReadMe文件<br><code>git push origin master</code></p>
<p><strong>two：</strong><br>那我就强制上传覆盖远程文件，<br><code>git push -f origin master</code></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><font color="red">学而不思则罔，思而不学则殆.</font></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome插件推荐</title>
    <url>/2020/01/04/you-hou-onetab/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>可能我用Chrome浏览器的主要原因是它丰富的插件，感觉用起来特别的人性化，看起来更舒服.主要其它浏览器用的不多<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8">😟</span></p>
<p>广告屏蔽插件什么的就不说了，推荐两个我觉得值得安装的插件吧.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaokonglong/20200102193258.jpg" alt=""></p>
<ul>
<li><strong>OneTab</strong></li>
</ul>
<p>号称可以减少95%的内存占用的插件</p>
<ul>
<li><strong>油猴子</strong></li>
</ul>
<p>一个顶一万个，浏览器装个油猴子，真的什么都能搞</p>
<h3 id="OneTab"><a href="#OneTab" class="headerlink" title="OneTab"></a>OneTab</h3><p>Chrome浏览器每打开一个标签就相当于多独立运行了一个程序，所以每个网页标签都是占用内存的。当我们在搜集资料的时候，往往很短的时间，Chrome的标签页就变成下面的情形：</p>


<p>为了解决这种情况，除了在搜集资料的时候“多总结，快总结”并及时关闭标签页之外，也可以使用Chrome插件OneTab来解决。</p>
<p>OneTab安装后，点击一下Onetab插件的图标，OneTab就会将当前打开的所有标签关闭，并将其显示在扩展页的标签列表中，相当于只打开一个标签。</p>


<p>用起来十分方便，我觉得对于我这种大量浏览查询信息的人来说，算是一个神器</p>
<h3 id="油猴子"><a href="#油猴子" class="headerlink" title="油猴子"></a>油猴子</h3><p>Tampermonkey，中文名油猴</p>
<p>如果一个浏览器没有安装油猴，那可以说是没有灵魂的。</p>
<p>它具有大量的插件，适用于各个方面</p>
<p>我觉得比较实用的有：百度文档复制，VIP破解，防止运营商劫持，资源下载，自动比价等等.</p>
<p><a href="https://www.crx4chrome.com/crx/755/" target="_blank" rel="noopener">下载地址</a></p>
<p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">插件安装地址</a></p>
<p>我推荐的油猴插件：</p>




<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103212904.jpg" style="zoom:200%;"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA设计模式之适配器模式</title>
    <url>/2020/01/03/java-she-ji-mo-shi-zhi-gua-pei-qi-mo-shi/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习JAVA编程的时候，忽然想起23种设计模式，影响不是很深刻了，复习一下.</p>
<p>总体来说设计模式分为三大类：</p>
<p><strong>创建型模式</strong>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p><strong>结构型模式</strong>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p><strong>行为型模式</strong>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p>好多，但大多用不着，重点还是那几个</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193213.jpg" alt=""></p>
<h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><ul>
<li>在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。</li>
<li>通常情况下，客户端可以通过目标类的接口访问它所提供的服务。有时，现有的类可以满足客户类的功能需要，但是它所提供的接口不一定是客户类所期望的，这可能是因为现有类中方法名与目标类中定义的方法名不一致等原因所导致的。</li>
<li>在这种情况下，现有的接口需要转化为客户类期望的接口，这样保证了对现有类的重用。如果不进行这样的转化，客户类就不能利用现有类所提供的功能，适配器模式可以完成这样的转化。</li>
<li>在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(<code>Adapter</code>)，它所包装的对象就是适配者(<code>Adaptee</code>)，即被适配的类。</li>
<li>适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。</li>
</ul>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><blockquote>
<p><strong>适配器模式</strong>(<code>Adapter Pattern</code>) ：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(<code>Wrapper</code>)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。适配器模式是一种<strong>结构型模式</strong>。</p>
</blockquote>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><ol>
<li><strong>参与角色</strong></li>
</ol>
<p>适配器模式包含如下角色：</p>
<ul>
<li><code>Target</code>：目标抽象类</li>
<li><code>Adapter</code>：适配器类</li>
<li><code>Adaptee</code>：适配者类</li>
<li><code>Client</code>：客户类</li>
</ul>
<ol start="2">
<li><strong>UML类图</strong></li>
</ol>
<p><img src="http://static.blinkfox.com/java-design-adapter.jpg" alt="适配器模式UML"></p>
<p><strong>适配器模式UML</strong></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>首先，是目标角色接口和具体目标实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Target 目标角色类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 目标角色自己的方法.
     */</span>
    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * 具体的目标角色实现类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 目标角色自己的方法.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, I'm concrete target method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>其次，是适配者类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 适配者类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 这是原有的业务逻辑方法.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, I'm Adaptee method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>然后，是适配器角色类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 适配器类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 适配了目标角色自己的方法.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配器适配了目标角色方法."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>最后，是客户端场景类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 客户端场景类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * main方法.
     *
     * @param args 数组参数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 原有业务逻辑.</span>
        Target target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 增加了适配器角色后的业务逻辑.</span>
        Target adaptTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        adaptTarget<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><ol>
<li><strong>适用环境</strong></li>
</ol>
<p>在以下情况下可以使用适配器模式：</p>
<ul>
<li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li>
<li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li>
<li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li>
<li>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p>
<h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>Sun公司在1996年公开了Java语言的数据库连接工具JDBC，JDBC使得Java语言程序能够与数据库连接，并使用SQL语言来查询和操作数据。JDBC给出一个客户端通用的抽象接口，每一个具体数据库引擎（如SQL Server、Oracle、MySQL等）的JDBC驱动软件都是一个介于JDBC接口和数据库引擎接口之间的适配器软件。抽象的JDBC接口和各个数据库引擎API之间都需要相应的适配器软件，这就是为各个不同数据库引擎准备的驱动程序。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>结构型模式描述如何将类或者对象结合在一起形成更大的结构。</p>
</li>
<li><p>适配器模式用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
</li>
<li><p>适配器模式包含四个角色：目标抽象类定义客户要用的特定领域的接口；适配器类可以调用另一个接口，作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心；适配者类是被适配的角色，它定义了一个已经存在的接口，这个接口需要适配；在客户类中针对目标抽象类进行编程，调用在目标抽象类中定义的业务方法。</p>
</li>
<li><p>在类适配器模式中，适配器类实现了目标抽象类接口并继承了适配者类，并在目标抽象类的实现方法中调用所继承的适配者类的方法；在对象适配器模式中，适配器类继承了目标抽象类并定义了一个适配者类的对象实例，在所继承的目标抽象类方法中调用适配者类的相应业务方法。</p>
</li>
<li><p>适配器模式的主要优点是将目标类和适配者类解耦，增加了类的透明性和复用性，同时系统的灵活性和扩展性都非常好，更换适配器或者增加新的适配器都非常方便，符合“开闭原则”；类适配器模式的缺点是适配器类在很多编程语言中不能同时适配多个适配者类，对象适配器模式的缺点是很难置换适配者类的方法。</p>
</li>
<li><p>适配器模式适用情况包括：系统需要使用现有的类，而这些类的接口不符合系统的需要；想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类一起工作。</p>
<p>累了，到此为止.</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193233.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>适配器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>预加载与懒加载</title>
    <url>/2020/01/03/yu-jia-zai-yu-lan-jia-zai/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在网页打开的时候，对网页有这两种处理方式–预加载和懒加载.</p>
<p>什么是<code>预加载</code> 和 <code>懒加载</code>（废话时间）。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103212732.jpg" style="zoom:200%;">

<h3 id="什么是预加载"><a href="#什么是预加载" class="headerlink" title="什么是预加载"></a>什么是预加载</h3><p><strong>预加载</strong>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p>
<ul>
<li>缺点：会增加服务器压力</li>
</ul>
<h3 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h3><p><strong>懒加载</strong>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p>
<ul>
<li>优点：对服务器有一定的缓解压力作用</li>
</ul>
<h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p><strong>懒加载</strong>的意义：很多页面内容丰富页面较长图片较多例如商城网站，而且还比较大多说能上兆，要是页面第一次载入就全部加载完毕的话估计黄花菜都凉了。对于这种页面有很多静态资源的情况下，为了节省用户流量和提高页面性能，可以在用户浏览到当前资源的时候，再对资源进行请求和加载。</p>
<p><strong>预加载</strong>的意义：图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。</p>
<p>现在对前端不是很了解，在这里我先简单学一点，具体的之后再说，这里主要是对博客进行优化.</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>博客现在使用的是预加载模式，如果想要使用懒加载，请按照下列操作</p>
<ol>
<li>在根目录实行</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre>
<ol start="2">
<li>在_config.yml插入下面信息：</li>
</ol>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>
  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span></code></pre>
<ol start="3">
<li>但是懒加载会和gallery插件发生冲突，左右都是loading，解决方案如下</li>
</ol>
<p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p>
<p>在第108行加上：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p>
<p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand-logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for() %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waves-effect waves-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 
            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length > 0) { %> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.logo %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span> 
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">config.title</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h3><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</p>
<p>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span> 
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载 </span>
    <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>图片</category>
      </categories>
      <tags>
        <tag>主题</tag>
        <tag>图片</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>个性化修改</title>
    <url>/2020/01/03/ge-xing-hua-xiu-gai/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当使用个人博客的时候 ，发现有很多的地方不合心意，所以对这些地方进行修改，下面简单记录一下更改时出现疑惑的几点.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193241.jpg" alt=""></p>
<h3 id="主题代码块"><a href="#主题代码块" class="headerlink" title="主题代码块"></a><strong>主题代码块</strong></h3><p>在使用主题的代码块时，发现代码行号很冲突，不美观，所以对此处进行修改，增加代码高亮效果。使用 <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==" target="_blank" rel="noopener">hexo-prism-plugin</a> 插件来做，具体操作如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre>
<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span> <span class="token comment" spellcheck="true"># realtime/preprocess </span>
    <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span> 
    <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># default false custom_css:</span></code></pre>
<h3 id="导航栏透明效果及渐变色"><a href="#导航栏透明效果及渐变色" class="headerlink" title="导航栏透明效果及渐变色"></a>导航栏透明效果及渐变色</h3><p>打开<code>themes/matery/source/css/matery.css</code>文件，大约在250行，有一个<code>.bg-color</code>属性，修改属性即可</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span> 
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //修改成自己喜欢的颜色值 
    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span> //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span>，看情况自己修改
<span class="token punctuation">}</span></code></pre>
<h3 id="修改主体颜色"><a href="#修改主体颜色" class="headerlink" title="修改主体颜色"></a>修改主体颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>
<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span> 
<span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span> <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token comment" spellcheck="true">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span> 
<span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span> 
<span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span> 
<span class="token punctuation">}</span> 
<span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span> 
<span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span> 
<span class="token punctuation">}</span></code></pre>
<h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL3dpbGxpbi9oZXhvLXdvcmRjb3VudA==" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p>
<p>安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre>
<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span> 
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可. </span>
    <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<h3 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h3><p>首先在<code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开这个网址<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9jZG5AMi41L3NvdXJjZS9qcy9maXJld29ya3MuanM=" target="_blank" rel="noopener">传送门</a>，将内容复制粘贴到<code>fireworks.js</code>即可。</p>
<p>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fireworks"</span> style<span class="token operator">=</span><span class="token string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span> 

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> 

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/fireworks.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>即可，就可以看到效果了.</p>
<h3 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon"></a>配置基本菜单导航的名称、路径url和图标icon</h3><ul>
<li><p>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)</p>
</li>
<li><p>图标icon 可以在<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9mb250YXdlc29tZS5jb20vaWNvbnM=" target="_blank" rel="noopener">Font Awesome</a> 中查找</p>
</li>
</ul>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle
  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre>
<h3 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h3><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> TabEscHzw
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> 
<span class="token key atrule">img</span><span class="token punctuation">:</span> 
<span class="token key atrule">password</span><span class="token punctuation">:</span>
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
categories<span class="token punctuation">:</span></code></pre>
<h3 id="添加404界面"><a href="#添加404界面" class="headerlink" title="添加404界面"></a>添加404界面</h3><p>先在source文件夹下，创建一个404目录，命令如下：</p>
<p><code>hexo new page "4040"</code></p>
<p>打开文件夹下的<code>index.html</code></p>
<p>写入内容如下：</p>
<pre><code>---
title: 404
date: 2020-01-08 19:52:55
type: "404"
layout: "404"
description: "你来到了没有知识的荒原 :("

---</code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>
    <span class="token comment" spellcheck="true">/* don't remove. */</span>
    <span class="token punctuation">.</span>about<span class="token operator">-</span>cover <span class="token punctuation">{</span>
        height<span class="token punctuation">:</span> 75vh<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bg-cover pd-header about-cover"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s10 offset-s1 m8 offset-m2 l8 offset-l2"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>
                        <span class="token number">404</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"description center-align"</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> page<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>还有些修改忘记了，暂时就这么多吧 .</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193327.gif" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>diy</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>优化博客访问速度</title>
    <url>/2020/01/03/you-hua-bo-ke-fang-wen-su-du/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当我部署好个人博客之后，为了更加便于使用，就去阿里云购买了个域名，但是，部署域名之后，发现访问速度变得很缓慢，为了解决这个问题，上网查了很多方法，从以下几个地方来讲述，但我的方法并不是最好的那个，只是感觉比较便捷，记录下来。</p>
<h3 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h3><p>因为我的博客是部署在Github上的，由于墙的原因，国内访问的速度很慢，所以可以使用CDN进行加快访问，<a href="https://baike.baidu.com/item/CDN/420951?fr=aladdin" target="_blank" rel="noopener">CDN</a>简单来说就是增加了 一个缓存机制，访问速度加快。<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。</p>
<p><strong>步骤如下</strong></p>
<ol>
<li>在Github上建立一个仓库</li>
<li>克隆到本地仓库</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token string">"仓库地址"</span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/2019.1.3/1.jpg" style="zoom:50%;">

<ol start="3">
<li><p>将你本地的图片复制到这里</p>
<p>执行下述命令，就会上传至Github</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>

<span class="token function">git</span> commit -m <span class="token string">"标记信息"</span>

<span class="token function">git</span> push origin master</code></pre>
</li>
<li><p>上传图片之后，更改releases来确定版本号，当你多次上传图片后，版本后不断更新，但你只用记住最新那个即可.</p>
</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/2019.1.3/2.jpg" style="zoom:50%;">

<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/2019.1.3/3.jpg" style="zoom:50%;">

<ol start="5">
<li>当你想引用图片时</li>
</ol>
<p>用法：</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre>
<p>例如：</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/1471748102/cdn@1.0/loading4.gif</code></pre>
<h3 id="全站优化"><a href="#全站优化" class="headerlink" title="全站优化"></a>全站优化</h3><p>这个不止可以作用于图片，可以像这样把所有的css、js等文件的加载路径都修改下，从而让全站使用CDN加速！</p>
<p>方法与图片是一样的，只是文件名不同而已</p>
<p>例如：</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/1471748102/cdn@1.7/libs/awesome/css/all.css</code></pre>
<p>经过这些操作，访问速度确实快了好多。</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193307.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐获取方法</title>
    <url>/2019/12/31/wang-yi-yun-yin-le-huo-qu-fang-fa/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在构建主题的音乐播放时出现了两个问题，因为主题的音乐播放是在saorce/musics.json文件下存储的，但是如果想播放音乐，就要有相关的资源。但是我在获取音乐封面和歌曲链接时，却不知道如何下手。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.2/img/cuiruo.jpg" style="zoom:67%;">

<p>在musics.json文件里，有<strong>name</strong> ,<strong>artist</strong>,<strong>url</strong>,<strong>cover</strong>四个属性，分别是歌曲名字，作者，歌曲链接，歌曲封面，因为我不打算将他放在本地，所以直接从 <a href="https://music.163.com/#" target="_blank" rel="noopener">网易云音乐</a> 里面获取，开整！</p>
<p>PS:本方法是要手动配置的，估计学了Python之后就会智能很多，等我学了Python之后再来更新这篇文章。</p>
<h3 id="一、封面搜索"><a href="#一、封面搜索" class="headerlink" title="一、封面搜索"></a>一、封面搜索</h3><ol>
<li><strong>在网易云搜索想要导入的歌曲</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/songmoon.jpg" alt=""></p>
<ol start="2">
<li><strong>查询</strong></li>
</ol>
<p>点击F12，然后在键盘上<strong>ctrl+f</strong>同时摁住，打开搜索功能，在搜索框输入<strong>img</strong></p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/img.jpg" style="zoom:80%;">

<p>此时出现的搜索内容就是封面内容,以jpg结尾</p>
<blockquote>
<p><a href="https://p1.music.126.net/0AYWra9rCzgeprGp6OUyUw==/868614185993997.jpg二" target="_blank" rel="noopener">https://p1.music.126.net/0AYWra9rCzgeprGp6OUyUw==/868614185993997.jpg二</a></p>
</blockquote>
<h3 id="二、歌曲搜索"><a href="#二、歌曲搜索" class="headerlink" title="二、歌曲搜索"></a>二、歌曲搜索</h3><p>将网址栏的内容中最后的<strong>数字</strong>复制下来</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/163link.jpg" alt=""></p>
<blockquote>
<p>例如：1645064</p>
<p><a href="http://music.163.com/song/media/outer/url?id=temp.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=temp.mp3</a></p>
<p>temp就是你上面复制的数字</p>
<p>歌曲链接就是：<a href="http://music.163.com/song/media/outer/url?id=1645064.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=1645064.mp3</a></p>
</blockquote>
<h3 id="三、导入"><a href="#三、导入" class="headerlink" title="三、导入"></a>三、导入</h3><p>最后将你得到的信息都导入musics.json即可</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span>
    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"To The Moon"</span><span class="token punctuation">,</span>
    <span class="token key atrule">"artist"</span><span class="token punctuation">:</span> <span class="token string">"Kan R. Gao"</span><span class="token punctuation">,</span>
    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://music.163.com/song/media/outer/url?id=1645064.mp3"</span><span class="token punctuation">,</span>
    <span class="token key atrule">"cover"</span><span class="token punctuation">:</span> <span class="token string">"https://p1.music.126.net/0AYWra9rCzgeprGp6OUyUw==/868614185993997.jpg"</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>方法有点出乎意料之外，但是解决了问题<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>,虽然不够智能，之后再改进.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/not.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>网易云音乐链接</tag>
        <tag>主题搭建</tag>
        <tag>音乐播放</tag>
      </tags>
  </entry>
  <entry>
    <title>插入本地图片不能显示</title>
    <url>/2019/12/31/cha-ru-ben-di-tu-pian-bu-neng-xian-shi/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当我开始写博客的时候</p>
<pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"主题"</span></code></pre>
<p>当插入本地图片的时候发现图片竟然不显示，插入链接的时候就是正常的，所以我去查询了这个问题。</p>
<h3 id="插件的安装与配置"><a href="#插件的安装与配置" class="headerlink" title="插件的安装与配置"></a>插件的安装与配置</h3><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre>
<p>安装成功后需要修改/node_modules/hexo-asset-image/index.js文件，将内容更换</p>
<pre><code>---
'use strict';
var cheerio = require('cheerio');

// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string
function getPosition(str, m, i) {
  return str.split(m, i).join(m).length;
}

var version = String(hexo.version).split('.');
hexo.extend.filter.register('after_post_render', function(data){
  var config = hexo.config;
  if(config.post_asset_folder){
        var link = data.permalink;
    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)
       var beginPos = getPosition(link, '/', 1) + 1;
    else
       var beginPos = getPosition(link, '/', 3) + 1;
    // In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".
    var endPos = link.lastIndexOf('/') + 1;
    link = link.substring(beginPos, endPos);

    var toprocess = ['excerpt', 'more', 'content'];
    for(var i = 0; i &lt; toprocess.length; i++){
      var key = toprocess[i];

      var $ = cheerio.load(data[key], {
        ignoreWhitespace: false,
        xmlMode: false,
        lowerCaseTags: false,
        decodeEntities: false
      });

      $('img').each(function(){
        if ($(this).attr('src')){
            // For windows style path, we replace '\' to '/'.
            var src = $(this).attr('src').replace('\\', '/');
            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
               !/^\s*\//.test(src)) {
              // For "about" page, the first part of "src" can't be removed.
              // In addition, to support multi-level local directory.
              var linkArray = link.split('/').filter(function(elem){
                return elem != '';
              });
              var srcArray = src.split('/').filter(function(elem){
                return elem != '' &amp;&amp; elem != '.';
              });
              if(srcArray.length &gt; 1)
                srcArray.shift();
              src = srcArray.join('/');
              $(this).attr('src', config.root + link + src);
              console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src);
            }
        }else{
            console.info&amp;&amp;console.info("no src attr, skipped...");
            console.info&amp;&amp;console.info($(this));
        }
      });
      data[key] = $.html();
    }
  }
});

---</code></pre><h3 id="更改-config-yml文件"><a href="#更改-config-yml文件" class="headerlink" title="更改_config.yml文件"></a>更改_config.yml文件</h3><p>找到更改false为true，如下</p>
<pre class=" language-yml"><code class="language-yml">post_asset_folder: true</code></pre>
<p>这样就会在_posts文件夹下创建一个同名的文件夹，将你需要的图片放在这个文件夹下，</p>
<h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p>然后在你的.md文件里引用图片时候，用</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token operator">%</span> asset_img example<span class="token punctuation">.</span>jpg This is 
an example image <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>
<p>example.jpg是你的图片名称。</p>
<p>This is an example image是你的图片描述。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>解决后当你使用hexo d时，会出现</p>
<blockquote>
<p>$ hexo d<br>ERROR Deployer not found: git</p>
</blockquote>
<p>输入以下命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token variable"><span class="token variable">`</span>--<span class="token variable">`</span></span>save hexo-deployer-git</code></pre>
<p>就可以解决了！</p>
<p>参考以下链接：</p>
<ul>
<li><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></li>
<li><a href="https://blog.csdn.net/Strong997/article/details/97767929" target="_blank" rel="noopener">https://blog.csdn.net/Strong997/article/details/97767929</a></li>
<li><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></li>
<li><a href="https://blog.csdn.net/weixin_36401046/article/details/52940313" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36401046/article/details/52940313</a></li>
</ul>
<p>解决完这个问题之后，我发现个人博客不用插入本地图片，使用图床，将图片部署到远端，使用的时候引入链接就行，我枯了，人不学不知道啊！</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/crycat.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>主题美化</title>
    <url>/2019/12/31/zhu-ti-mei-hua/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>刚开始的默认界面其实还不错，但有的同学希望更美观一些，hexo有许多的主题，为了看起来更加赏心悦目，功能也更丰富，接下来我就先介绍一下怎么更换主题，然后推荐几款我比较喜欢的主题。</p>
<h3 id="主题搭建"><a href="#主题搭建" class="headerlink" title="主题搭建"></a>主题搭建</h3><p>比如我想用indigo这个主题，可以在Git Bsah输入以下代码：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/yscoder/hexo-theme-indigo.git  themes/indigo</code></pre>
<p>因为主题大多是国外的，下载比较慢，所以要等一会。</p>
<p>根据主题不同，所以修改主题名就行。</p>
<p>下载完成之后</p>
<p>切换到themes文件夹下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> themes</code></pre>
<p>查看所有文件：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -l</code></pre>
<p>返回到文件夹下，找到_config.yml文件，修改theme后的主题名，然后重新部署即可。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token punctuation">..</span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/theme.jpg" style="zoom: 50%;">

<h3 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h3><p>推荐以下几个还不错的主题</p>
<blockquote>
<ol>
<li><p>Sakura 非常炫，缺点加载慢 <a href="https://github.com/honjun/hexo-theme-sakura" target="_blank" rel="noopener">https://github.com/honjun/hexo-theme-sakura</a> </p>
</li>
<li><p>Matery 预加载，强推 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a> </p>
</li>
<li><p>3-hexo 三段式，适合博文多的 <a href="https://github.com/yelog/hexo-theme-3-hexo" target="_blank" rel="noopener">https://github.com/yelog/hexo-theme-3-hexo</a> </p>
</li>
<li><p>Butterfly 也是个好看的  </p>
</li>
<li><p>Next 功能集成多，简洁</p>
</li>
</ol>
</blockquote>
<p>来自于哔哩哔哩UP主<a href="https://space.bilibili.com/157360395" target="_blank" rel="noopener">wallleap</a></p>
<p>视频来自于<a href="https://www.bilibili.com/video/av74851669?t=202" target="_blank" rel="noopener">网址</a></p>
<p>估计还有很多不错的主题，多多发现学习！</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.3/img/wink.jpg" style="zoom: 50%;">

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>主题更改</tag>
        <tag>主题推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>连接Github与本地</title>
    <url>/2019/12/31/lian-jie-github-yu-ben-di/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>上一篇文章讲了怎么在本地部署Hexo，但仅仅部署在本地不够酷，我们需要将他部署到远端，Github是一个很好的托管网站，但是网速有点慢，也可以选择Coding，Gitee等网站，步骤都是一样的。</p>
<p>下面就开始吧</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/jienihui.jpg" alt="憨憨敬礼" style="zoom: 50%;">

<h3 id="配置Github仓库"><a href="#配置Github仓库" class="headerlink" title="配置Github仓库"></a>配置Github仓库</h3><ol>
<li><strong>创建仓库</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/cangku.png" alt=""></p>
<p>新建仓库名必须和自己的用户名保持一致，结尾以github.io结尾，如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/cangkuming.jpg" alt=""></p>
<p>因为我的已经注册过了，所以才报错！</p>
<ol start="2">
<li><strong>添加Git工具</strong></li>
</ol>
<p>在Git Bash终端输入</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>
<ol start="3">
<li><strong>添加公钥</strong></li>
</ol>
<p>这个过程的目的是在你的电脑和Github之间建立联系，保证安全性，，只有你可以操作。</p>
<p>首先查看<strong>C:Users\用户名</strong>下是否有.ssh文件</p>
<p>若是没有，输入</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span></code></pre>
<p>之后 一直回车即可，大约三个就行</p>
<p>然后会出现.ssh文件，打开这个文件，找到id_rsa.pub，复制里面的内容（用<a href="https://notepad-plus.en.softonic.com/" target="_blank" rel="noopener">Notepad++</a>打开）</p>
<p>打开github网页，在右上方头像那里会展开一系列选项，选择settings，点击<strong>SSH and GPG keys</strong>，将你刚在复制的内容黏贴，名字随便取。</p>
<h3 id="部署-config-yml"><a href="#部署-config-yml" class="headerlink" title="部署_config.yml"></a>部署_config.yml</h3><p>先打开你的仓库，将你仓库的网络地址复制下来</p>
<p>打开_config.ynl文件，划到最下方，部署以下内容</p>
<blockquote>
<p>deploy:<br>  type: git<br>  repo: “黏贴你刚才复制的仓库地址”<br>  branch: master</p>
</blockquote>
<p>使用 hexo d部署</p>
<p>这样就基本完成了。</p>
<p>记住以下命令：</p>
<blockquote>
<p>hexo clean 清理缓存文件</p>
<p>hexo g         生成</p>
<p>hexo s          启动服务</p>
<p>hexo d          部署到远端</p>
</blockquote>
<p>在本地看一眼，没有问题使用</p>
<blockquote>
<p>hexo d</p>
</blockquote>
<p>部署到远端。</p>
<p>这一切都是在你建立的那个文件夹下运行的，如果想要运行看看自己的博客，只需要在网站上输入你的个人网址就行，一般是你的用户名+github.io，这是我的个人博客<a href="https://1471748102.github.io" target="_blank" rel="noopener">https://1471748102.github.io</a>,欢迎来指教！</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/reshui.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>本地个人博客搭建</title>
    <url>/2019/12/30/ben-di-ge-ren-bo-ke-da-jian/</url>
    <content><![CDATA[<h2 id="本文简单介绍Hexo博客搭建流程"><a href="#本文简单介绍Hexo博客搭建流程" class="headerlink" title="本文简单介绍Hexo博客搭建流程"></a>本文简单介绍Hexo博客搭建流程</h2><p>主要是来记录自己的搭建时候出现的问题，以后再搭建的时候回顾，也希望可以对想搭建Hexo博客的同学有一些帮助。</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/1.jpg" alt=""></p>
<p>大体介绍一下我所了解的博客，分为静态博客和动态博客</p>
<p><strong>目录结构</strong></p>
<ul>
<li>安装Node.js</li>
<li>安装Git</li>
<li>安装Hexo</li>
<li>连接Github与本地</li>
<li>写文章，发布文章</li>
</ul>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>打开<a href="https://nodejs.org" target="_blank" rel="noopener">官方网站</a></p>
<p>下载LTS版本，如下图所示</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.2/img/nodejs.png" style="zoom:50%;">

<p>下载完成后，一路Next即可。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>打开<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官方网站</a></p>
<p>根据系统选择版本，这里建议先学习一下廖雪峰老师的Git教程 <a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">链接</a>，讲得非常好。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/git.png" style="zoom:80%;">

<p>下载完成后就一路Next即可，之后在开始菜单栏就会看到Git Bash，我们将会在这里操作。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li>建立一个文件夹，用来存放自己的博客文件，在该目录下右键运行Git Bash Here</li>
</ol>
<p>可以先测试是否安装成功,在终端执行以下命令</p>
<pre class=" language-bash"><code class="language-bash">node -v
<span class="token function">npm</span> -v</code></pre>
<p>如果正常出现<strong>版本号</strong>就代表成功安装，可以继续以下的步骤，否则就要重新安装。</p>
<ol start="2">
<li>使用淘宝镜像可以提高下载速度</li>
</ol>
<p>终端输入</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre>
<p>会出现以下界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/npm.png" alt=""></p>
<ol start="3">
<li>安装Hexo</li>
</ol>
<p>终端输入</p>
<pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli</code></pre>
<p>验证是否成功</p>
<pre class=" language-bash"><code class="language-bash">hexo -v</code></pre>
<p>出现下述文字就说明成功</p>
<pre class=" language-bash"><code class="language-bash">hexo: 3.8.0
hexo-cli: 1.1.0
os: Windows_NT 10.0.17134 win32 x64
http_parser: 2.8.0
node: 10.15.3
v8: 6.8.275.32-node.51
uv: 1.23.2
zlib: 1.2.11
ares: 1.15.0
modules: 64
nghttp2: 1.34.0
napi: 3
openssl: 1.1.0j
icu: 62.1
unicode: 11.0
cldr: 33.1
tz: 2018e</code></pre>
<p>如果出现失败，一般是环境变量出现错误，编辑一下环境变量。</p>
<ol start="4">
<li>初始化Hexo</li>
</ol>
<pre class=" language-bash"><code class="language-bash">hexo init</code></pre>
<p>需要等待一段时间，他会在文件夹里部署一些文件</p>
<p>这样本地的网站配置就部署好了，输入</p>
<pre class=" language-bash"><code class="language-bash">hexo g </code></pre>
<p>将会生成静态网页</p>
<p>然后输入</p>
<pre class=" language-bash"><code class="language-bash">hexo s</code></pre>
<p>将会打开本地服务器，在浏览器输入  <a href="localhost:4000/">localhost:4000/</a> ,就可以看到我们的博客了。</p>
<h3 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h3><p>环境变量问题，Mac下部署一般不会出现错误，但是在Windows下环境变量会出现命令不可识别的问题，需要在Path添加变量，如果实在不行，可以把Nodejs下的文件复制到你新建的文件夹下，但是要在<strong>hexo.init</strong>命令之后。</p>
<p>下一篇文章介绍一下<a href="https://huangzhiwu98.top/2019/12/31/lian-jie-github-yu-ben-di/">Hexo如何与Github相结合</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/xianyu.gif" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World！</title>
    <url>/2019/12/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<p>逐步将之前的文件按上传到这里，记录学习，生活。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.2/img/t11.jpg" style="zoom:50%;">





<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
