<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chrome插件推荐</title>
    <url>/2020/01/04/you-hou-onetab/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>可能我用Chrome浏览器的主要原因是它丰富的插件，感觉用起来特别的人性化，看起来更舒服.主要其它浏览器用的不多<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8">😟</span></p>
<p>广告屏蔽插件什么的就不说了，推荐两个我觉得值得安装的插件吧.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaokonglong/20200102193258.jpg" alt=""></p>
<ul>
<li><strong>OneTab</strong></li>
</ul>
<p>号称可以减少95%的内存占用的插件</p>
<ul>
<li><strong>油猴子</strong></li>
</ul>
<p>一个顶一万个，浏览器装个油猴子，真的什么都能搞</p>
<h3 id="OneTab"><a href="#OneTab" class="headerlink" title="OneTab"></a>OneTab</h3><p>Chrome浏览器每打开一个标签就相当于多独立运行了一个程序，所以每个网页标签都是占用内存的。当我们在搜集资料的时候，往往很短的时间，Chrome的标签页就变成下面的情形：</p>
<img src="/2020/01/04/you-hou-onetab/20200104141608.jpg" class="">

<p>为了解决这种情况，除了在搜集资料的时候“多总结，快总结”并及时关闭标签页之外，也可以使用Chrome插件OneTab来解决。</p>
<p>OneTab安装后，点击一下Onetab插件的图标，OneTab就会将当前打开的所有标签关闭，并将其显示在扩展页的标签列表中，相当于只打开一个标签。</p>
<img src="/2020/01/04/you-hou-onetab/20200104142053.jpg" class="">

<p>用起来十分方便，我觉得对于我这种大量浏览查询信息的人来说，算是一个神器</p>
<h3 id="油猴子"><a href="#油猴子" class="headerlink" title="油猴子"></a>油猴子</h3><p>Tampermonkey，中文名油猴</p>
<p>如果一个浏览器没有安装油猴，那可以说是没有灵魂的。</p>
<p>它具有大量的插件，适用于各个方面</p>
<p>我觉得比较实用的有：百度文档复制，VIP破解，防止运营商劫持，资源下载，自动比价等等.</p>
<p><a href="https://www.crx4chrome.com/crx/755/" target="_blank" rel="noopener">下载地址</a></p>
<p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">插件安装地址</a></p>
<p>我推荐的油猴插件：</p>
<img src="/2020/01/04/you-hou-onetab/20200104143056.jpg" class="">



<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103212904.jpg" style="zoom:200%;"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA设计模式之适配器模式</title>
    <url>/2020/01/03/java-she-ji-mo-shi-zhi-gua-pei-qi-mo-shi/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习JAVA编程的时候，忽然想起23种设计模式，影响不是很深刻了，复习一下.</p>
<p>总体来说设计模式分为三大类：</p>
<p><strong>创建型模式</strong>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p><strong>结构型模式</strong>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p><strong>行为型模式</strong>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p>好多，但大多用不着，重点还是那几个</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193213.jpg" alt=""></p>
<h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><ul>
<li>在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。</li>
<li>通常情况下，客户端可以通过目标类的接口访问它所提供的服务。有时，现有的类可以满足客户类的功能需要，但是它所提供的接口不一定是客户类所期望的，这可能是因为现有类中方法名与目标类中定义的方法名不一致等原因所导致的。</li>
<li>在这种情况下，现有的接口需要转化为客户类期望的接口，这样保证了对现有类的重用。如果不进行这样的转化，客户类就不能利用现有类所提供的功能，适配器模式可以完成这样的转化。</li>
<li>在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(<code>Adapter</code>)，它所包装的对象就是适配者(<code>Adaptee</code>)，即被适配的类。</li>
<li>适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。</li>
</ul>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><blockquote>
<p><strong>适配器模式</strong>(<code>Adapter Pattern</code>) ：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(<code>Wrapper</code>)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。适配器模式是一种<strong>结构型模式</strong>。</p>
</blockquote>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><ol>
<li><strong>参与角色</strong></li>
</ol>
<p>适配器模式包含如下角色：</p>
<ul>
<li><code>Target</code>：目标抽象类</li>
<li><code>Adapter</code>：适配器类</li>
<li><code>Adaptee</code>：适配者类</li>
<li><code>Client</code>：客户类</li>
</ul>
<ol start="2">
<li><strong>UML类图</strong></li>
</ol>
<p><img src="http://static.blinkfox.com/java-design-adapter.jpg" alt="适配器模式UML"></p>
<p><strong>适配器模式UML</strong></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>首先，是目标角色接口和具体目标实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Target 目标角色类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 目标角色自己的方法.
     */</span>
    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * 具体的目标角色实现类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 目标角色自己的方法.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, I'm concrete target method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>其次，是适配者类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 适配者类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 这是原有的业务逻辑方法.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, I'm Adaptee method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>然后，是适配器角色类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 适配器类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 适配了目标角色自己的方法.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配器适配了目标角色方法."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>最后，是客户端场景类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 客户端场景类.
 *
 * @author blinkfox on 2018-12-11.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * main方法.
     *
     * @param args 数组参数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 原有业务逻辑.</span>
        Target target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 增加了适配器角色后的业务逻辑.</span>
        Target adaptTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        adaptTarget<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><ol>
<li><strong>适用环境</strong></li>
</ol>
<p>在以下情况下可以使用适配器模式：</p>
<ul>
<li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li>
<li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li>
<li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li>
<li>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p>
<h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>Sun公司在1996年公开了Java语言的数据库连接工具JDBC，JDBC使得Java语言程序能够与数据库连接，并使用SQL语言来查询和操作数据。JDBC给出一个客户端通用的抽象接口，每一个具体数据库引擎（如SQL Server、Oracle、MySQL等）的JDBC驱动软件都是一个介于JDBC接口和数据库引擎接口之间的适配器软件。抽象的JDBC接口和各个数据库引擎API之间都需要相应的适配器软件，这就是为各个不同数据库引擎准备的驱动程序。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>结构型模式描述如何将类或者对象结合在一起形成更大的结构。</p>
</li>
<li><p>适配器模式用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
</li>
<li><p>适配器模式包含四个角色：目标抽象类定义客户要用的特定领域的接口；适配器类可以调用另一个接口，作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心；适配者类是被适配的角色，它定义了一个已经存在的接口，这个接口需要适配；在客户类中针对目标抽象类进行编程，调用在目标抽象类中定义的业务方法。</p>
</li>
<li><p>在类适配器模式中，适配器类实现了目标抽象类接口并继承了适配者类，并在目标抽象类的实现方法中调用所继承的适配者类的方法；在对象适配器模式中，适配器类继承了目标抽象类并定义了一个适配者类的对象实例，在所继承的目标抽象类方法中调用适配者类的相应业务方法。</p>
</li>
<li><p>适配器模式的主要优点是将目标类和适配者类解耦，增加了类的透明性和复用性，同时系统的灵活性和扩展性都非常好，更换适配器或者增加新的适配器都非常方便，符合“开闭原则”；类适配器模式的缺点是适配器类在很多编程语言中不能同时适配多个适配者类，对象适配器模式的缺点是很难置换适配者类的方法。</p>
</li>
<li><p>适配器模式适用情况包括：系统需要使用现有的类，而这些类的接口不符合系统的需要；想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类一起工作。</p>
<p>累了，到此为止.</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193233.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>适配器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>预加载与懒加载</title>
    <url>/2020/01/03/yu-jia-zai-yu-lan-jia-zai/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在网页打开的时候，对网页有这两种处理方式–预加载和懒加载.</p>
<p>什么是<code>预加载</code> 和 <code>懒加载</code>（废话时间）。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.5/xiaoren/20200103212732.jpg" style="zoom:200%;">

<h3 id="什么是预加载"><a href="#什么是预加载" class="headerlink" title="什么是预加载"></a>什么是预加载</h3><p><strong>预加载</strong>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p>
<ul>
<li>缺点：会增加服务器压力</li>
</ul>
<h3 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h3><p><strong>懒加载</strong>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p>
<ul>
<li>优点：对服务器有一定的缓解压力作用</li>
</ul>
<h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p><strong>懒加载</strong>的意义：很多页面内容丰富页面较长图片较多例如商城网站，而且还比较大多说能上兆，要是页面第一次载入就全部加载完毕的话估计黄花菜都凉了。对于这种页面有很多静态资源的情况下，为了节省用户流量和提高页面性能，可以在用户浏览到当前资源的时候，再对资源进行请求和加载。</p>
<p><strong>预加载</strong>的意义：图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。</p>
<p>现在对前端不是很了解，在这里我先简单学一点，具体的之后再说，这里主要是对博客进行优化.</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>博客现在使用的是预加载模式，如果想要使用懒加载，请按照下列操作</p>
<ol>
<li>在根目录实行</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre>
<ol start="2">
<li>在_config.yml插入下面信息：</li>
</ol>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>
  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span></code></pre>
<ol start="3">
<li>但是懒加载会和gallery插件发生冲突，左右都是loading，解决方案如下</li>
</ol>
<p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p>
<p>在第108行加上：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p>
<p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand-logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for() %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waves-effect waves-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 
            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length > 0) { %> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.logo %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span> 
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">config.title</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h3><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</p>
<p>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span> 
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载 </span>
    <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>主题</tag>
        <tag>图片</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>个性化修改</title>
    <url>/2020/01/03/ge-xing-hua-xiu-gai/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当使用个人博客的时候 ，发现有很多的地方不合心意，所以对这些地方进行修改，下面简单记录一下更改时出现疑惑的几点.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193241.jpg" alt=""></p>
<ol>
<li><strong>主题代码块</strong></li>
</ol>
<p>在使用主题的代码块时，发现代码行号很冲突，不美观，所以对此处进行修改，增加代码高亮效果。使用 <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==" target="_blank" rel="noopener">hexo-prism-plugin</a> 插件来做，具体操作如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre>
<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span> <span class="token comment" spellcheck="true"># realtime/preprocess </span>
    <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span> 
    <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># default false custom_css:</span></code></pre>
<ol start="2">
<li><strong>导航栏透明效果及渐变色</strong></li>
</ol>
<p>打开<code>themes/matery/source/css/matery.css</code>文件，大约在250行，有一个<code>.bg-color</code>属性，修改属性即可</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span> 
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //修改成自己喜欢的颜色值 
    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span> //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span>，看情况自己修改
<span class="token punctuation">}</span></code></pre>
<ol start="3">
<li><strong>修改主体颜色</strong></li>
</ol>
<p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>
<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span> 
<span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span> <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token comment" spellcheck="true">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span> 
<span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span> 
<span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span> 
<span class="token punctuation">}</span> 
<span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span> 
<span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span> 
<span class="token punctuation">}</span></code></pre>
<ol start="4">
<li><strong>文章字数统计插件</strong></li>
</ol>
<p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL3dpbGxpbi9oZXhvLXdvcmRjb3VudA==" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p>
<p>安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre>
<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span> 
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可. </span>
    <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<ol start="5">
<li><strong>鼠标点击特效</strong></li>
</ol>
<p>首先在<code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开这个网址<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9jZG5AMi41L3NvdXJjZS9qcy9maXJld29ya3MuanM=" target="_blank" rel="noopener">传送门</a>，将内容复制粘贴到<code>fireworks.js</code>即可。</p>
<p>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fireworks"</span> style<span class="token operator">=</span><span class="token string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span> 

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> 

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/fireworks.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>即可，就可以看到效果了.</p>
<ol start="6">
<li><strong>配置基本菜单导航的名称、路径url和图标icon</strong></li>
</ol>
<ul>
<li><p>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)</p>
</li>
<li><p>图标icon 可以在<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9mb250YXdlc29tZS5jb20vaWNvbnM=" target="_blank" rel="noopener">Font Awesome</a> 中查找</p>
</li>
</ul>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle
  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre>
<ol start="7">
<li>文章头设置</li>
</ol>
<p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> TabEscHzw
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> 
<span class="token key atrule">img</span><span class="token punctuation">:</span> 
<span class="token key atrule">password</span><span class="token punctuation">:</span>
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
categories<span class="token punctuation">:</span></code></pre>
<p>还有些修改忘记了，暂时就这么多吧 .</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193327.gif" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>diy</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>优化博客访问速度</title>
    <url>/2020/01/03/you-hua-bo-ke-fang-wen-su-du/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当我部署好个人博客之后，为了更加便于使用，就去阿里云购买了个域名，但是，部署域名之后，发现访问速度变得很缓慢，为了解决这个问题，上网查了很多方法，从以下几个地方来讲述，但我的方法并不是最好的那个，只是感觉比较便捷，记录下来。</p>
<h3 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h3><p>因为我的博客是部署在Github上的，由于墙的原因，国内访问的速度很慢，所以可以使用CDN进行加快访问，<a href="https://baike.baidu.com/item/CDN/420951?fr=aladdin" target="_blank" rel="noopener">CDN</a>简单来说就是增加了 一个缓存机制，访问速度加快。<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。</p>
<p><strong>步骤如下</strong></p>
<ol>
<li>在Github上建立一个仓库</li>
<li>克隆到本地仓库</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token string">"仓库地址"</span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/2019.1.3/1.jpg" style="zoom:50%;">

<ol start="3">
<li><p>将你本地的图片复制到这里</p>
<p>执行下述命令，就会上传至Github</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>

<span class="token function">git</span> commit -m <span class="token string">"标记信息"</span>

<span class="token function">git</span> push origin master</code></pre>
</li>
<li><p>上传图片之后，更改releases来确定版本号，当你多次上传图片后，版本后不断更新，但你只用记住最新那个即可.</p>
</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/2019.1.3/2.jpg" style="zoom:50%;">

<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/2019.1.3/3.jpg" style="zoom:50%;">

<ol start="5">
<li>当你想引用图片时</li>
</ol>
<p>用法：</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre>
<p>例如：</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/1471748102/cdn@1.0/loading4.gif</code></pre>
<h3 id="全站优化"><a href="#全站优化" class="headerlink" title="全站优化"></a>全站优化</h3><p>这个不止可以作用于图片，可以像这样把所有的css、js等文件的加载路径都修改下，从而让全站使用CDN加速！</p>
<p>方法与图片是一样的，只是文件名不同而已</p>
<p>例如：</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/1471748102/cdn@1.7/libs/awesome/css/all.css</code></pre>
<p>经过这些操作，访问速度确实快了好多。</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.3/img2/20200102193307.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐获取方法</title>
    <url>/2019/12/31/wang-yi-yun-yin-le-huo-qu-fang-fa/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在构建主题的音乐播放时出现了两个问题，因为主题的音乐播放是在saorce/musics.json文件下存储的，但是如果想播放音乐，就要有相关的资源。但是我在获取音乐封面和歌曲链接时，却不知道如何下手。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.2/img/cuiruo.jpg" style="zoom:67%;">

<p>在musics.json文件里，有<strong>name</strong> ,<strong>artist</strong>,<strong>url</strong>,<strong>cover</strong>四个属性，分别是歌曲名字，作者，歌曲链接，歌曲封面，因为我不打算将他放在本地，所以直接从 <a href="https://music.163.com/#" target="_blank" rel="noopener">网易云音乐</a> 里面获取，开整！</p>
<p>PS:本方法是要手动配置的，估计学了Python之后就会智能很多，等我学了Python之后再来更新这篇文章。</p>
<h3 id="一、封面搜索"><a href="#一、封面搜索" class="headerlink" title="一、封面搜索"></a>一、封面搜索</h3><ol>
<li><strong>在网易云搜索想要导入的歌曲</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/songmoon.jpg" alt=""></p>
<ol start="2">
<li><strong>查询</strong></li>
</ol>
<p>点击F12，然后在键盘上<strong>ctrl+f</strong>同时摁住，打开搜索功能，在搜索框输入<strong>img</strong></p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/img.jpg" style="zoom:80%;">

<p>此时出现的搜索内容就是封面内容,以jpg结尾</p>
<blockquote>
<p><a href="https://p1.music.126.net/0AYWra9rCzgeprGp6OUyUw==/868614185993997.jpg二" target="_blank" rel="noopener">https://p1.music.126.net/0AYWra9rCzgeprGp6OUyUw==/868614185993997.jpg二</a></p>
</blockquote>
<h3 id="二、歌曲搜索"><a href="#二、歌曲搜索" class="headerlink" title="二、歌曲搜索"></a>二、歌曲搜索</h3><p>将网址栏的内容中最后的<strong>数字</strong>复制下来</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/163link.jpg" alt=""></p>
<blockquote>
<p>例如：1645064</p>
<p><a href="http://music.163.com/song/media/outer/url?id=temp.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=temp.mp3</a></p>
<p>temp就是你上面复制的数字</p>
<p>歌曲链接就是：<a href="http://music.163.com/song/media/outer/url?id=1645064.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=1645064.mp3</a></p>
</blockquote>
<h3 id="三、导入"><a href="#三、导入" class="headerlink" title="三、导入"></a>三、导入</h3><p>最后将你得到的信息都导入musics.json即可</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span>
    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"To The Moon"</span><span class="token punctuation">,</span>
    <span class="token key atrule">"artist"</span><span class="token punctuation">:</span> <span class="token string">"Kan R. Gao"</span><span class="token punctuation">,</span>
    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://music.163.com/song/media/outer/url?id=1645064.mp3"</span><span class="token punctuation">,</span>
    <span class="token key atrule">"cover"</span><span class="token punctuation">:</span> <span class="token string">"https://p1.music.126.net/0AYWra9rCzgeprGp6OUyUw==/868614185993997.jpg"</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>方法有点出乎意料之外，但是解决了问题<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>,虽然不够智能，之后再改进.</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/not.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>网易云音乐链接</tag>
        <tag>主题搭建</tag>
        <tag>音乐播放</tag>
      </tags>
  </entry>
  <entry>
    <title>插入本地图片不能显示</title>
    <url>/2019/12/31/cha-ru-ben-di-tu-pian-bu-neng-xian-shi/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当我开始写博客的时候</p>
<pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"主题"</span></code></pre>
<p>当插入本地图片的时候发现图片竟然不显示，插入链接的时候就是正常的，所以我去查询了这个问题。</p>
<h3 id="插件的安装与配置"><a href="#插件的安装与配置" class="headerlink" title="插件的安装与配置"></a>插件的安装与配置</h3><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre>
<p>安装成功后需要修改/node_modules/hexo-asset-image/index.js文件，将内容更换</p>
<pre><code>---
'use strict';
var cheerio = require('cheerio');

// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string
function getPosition(str, m, i) {
  return str.split(m, i).join(m).length;
}

var version = String(hexo.version).split('.');
hexo.extend.filter.register('after_post_render', function(data){
  var config = hexo.config;
  if(config.post_asset_folder){
        var link = data.permalink;
    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)
       var beginPos = getPosition(link, '/', 1) + 1;
    else
       var beginPos = getPosition(link, '/', 3) + 1;
    // In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".
    var endPos = link.lastIndexOf('/') + 1;
    link = link.substring(beginPos, endPos);

    var toprocess = ['excerpt', 'more', 'content'];
    for(var i = 0; i &lt; toprocess.length; i++){
      var key = toprocess[i];

      var $ = cheerio.load(data[key], {
        ignoreWhitespace: false,
        xmlMode: false,
        lowerCaseTags: false,
        decodeEntities: false
      });

      $('img').each(function(){
        if ($(this).attr('src')){
            // For windows style path, we replace '\' to '/'.
            var src = $(this).attr('src').replace('\\', '/');
            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
               !/^\s*\//.test(src)) {
              // For "about" page, the first part of "src" can't be removed.
              // In addition, to support multi-level local directory.
              var linkArray = link.split('/').filter(function(elem){
                return elem != '';
              });
              var srcArray = src.split('/').filter(function(elem){
                return elem != '' &amp;&amp; elem != '.';
              });
              if(srcArray.length &gt; 1)
                srcArray.shift();
              src = srcArray.join('/');
              $(this).attr('src', config.root + link + src);
              console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src);
            }
        }else{
            console.info&amp;&amp;console.info("no src attr, skipped...");
            console.info&amp;&amp;console.info($(this));
        }
      });
      data[key] = $.html();
    }
  }
});

---</code></pre><h3 id="更改-config-yml文件"><a href="#更改-config-yml文件" class="headerlink" title="更改_config.yml文件"></a>更改_config.yml文件</h3><p>找到更改false为true，如下</p>
<pre class=" language-yml"><code class="language-yml">post_asset_folder: true</code></pre>
<p>这样就会在_posts文件夹下创建一个同名的文件夹，将你需要的图片放在这个文件夹下，</p>
<h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p>然后在你的.md文件里引用图片时候，用</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token operator">%</span> asset_img example<span class="token punctuation">.</span>jpg This is 
an example image <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>
<p>example.jpg是你的图片名称。</p>
<p>This is an example image是你的图片描述。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>解决后当你使用hexo d时，会出现</p>
<blockquote>
<p>$ hexo d<br>ERROR Deployer not found: git</p>
</blockquote>
<p>输入以下命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token variable"><span class="token variable">`</span>--<span class="token variable">`</span></span>save hexo-deployer-git</code></pre>
<p>就可以解决了！</p>
<p>参考以下链接：</p>
<ul>
<li><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></li>
<li><a href="https://blog.csdn.net/Strong997/article/details/97767929" target="_blank" rel="noopener">https://blog.csdn.net/Strong997/article/details/97767929</a></li>
<li><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></li>
<li><a href="https://blog.csdn.net/weixin_36401046/article/details/52940313" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36401046/article/details/52940313</a></li>
</ul>
<p>解决完这个问题之后，我发现个人博客不用插入本地图片，使用图床，将图片部署到远端，使用的时候引入链接就行，我枯了，人不学不知道啊！</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/crycat.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World！</title>
    <url>/2019/12/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<p>逐步将之前的文件按上传到这里，记录学习，生活。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.2/img/t11.jpg" style="zoom:50%;">





<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>主题美化</title>
    <url>/2019/12/31/zhu-ti-mei-hua/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>刚开始的默认界面其实还不错，但有的同学希望更美观一些，hexo有许多的主题，为了看起来更加赏心悦目，功能也更丰富，接下来我就先介绍一下怎么更换主题，然后推荐几款我比较喜欢的主题。</p>
<h3 id="主题搭建"><a href="#主题搭建" class="headerlink" title="主题搭建"></a>主题搭建</h3><p>比如我想用indigo这个主题，可以在Git Bsah输入以下代码：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/yscoder/hexo-theme-indigo.git  themes/indigo</code></pre>
<p>因为主题大多是国外的，下载比较慢，所以要等一会。</p>
<p>根据主题不同，所以修改主题名就行。</p>
<p>下载完成之后</p>
<p>切换到themes文件夹下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> themes</code></pre>
<p>查看所有文件：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -l</code></pre>
<p>返回到文件夹下，找到_config.yml文件，修改theme后的主题名，然后重新部署即可。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token punctuation">..</span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/theme.jpg" style="zoom: 50%;">

<h3 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h3><p>推荐以下几个还不错的主题</p>
<blockquote>
<ol>
<li><p>Sakura 非常炫，缺点加载慢 <a href="https://github.com/honjun/hexo-theme-sakura" target="_blank" rel="noopener">https://github.com/honjun/hexo-theme-sakura</a> </p>
</li>
<li><p>Matery 预加载，强推 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a> </p>
</li>
<li><p>3-hexo 三段式，适合博文多的 <a href="https://github.com/yelog/hexo-theme-3-hexo" target="_blank" rel="noopener">https://github.com/yelog/hexo-theme-3-hexo</a> </p>
</li>
<li><p>Butterfly 也是个好看的  </p>
</li>
<li><p>Next 功能集成多，简洁</p>
</li>
</ol>
</blockquote>
<p>来自于哔哩哔哩UP主<a href="https://space.bilibili.com/157360395" target="_blank" rel="noopener">wallleap</a></p>
<p>视频来自于<a href="https://www.bilibili.com/video/av74851669?t=202" target="_blank" rel="noopener">网址</a></p>
<p>估计还有很多不错的主题，多多发现学习！</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.3/img/wink.jpg" style="zoom: 50%;">

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>主题更改</tag>
        <tag>主题推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>连接Github与本地</title>
    <url>/2019/12/31/lian-jie-github-yu-ben-di/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>上一篇文章讲了怎么在本地部署Hexo，但仅仅部署在本地不够酷，我们需要将他部署到远端，Github是一个很好的托管网站，但是网速有点慢，也可以选择Coding，Gitee等网站，步骤都是一样的。</p>
<p>下面就开始吧</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/jienihui.jpg" alt="憨憨敬礼" style="zoom: 50%;">

<h3 id="配置Github仓库"><a href="#配置Github仓库" class="headerlink" title="配置Github仓库"></a>配置Github仓库</h3><ol>
<li><strong>创建仓库</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/cangku.png" alt=""></p>
<p>新建仓库名必须和自己的用户名保持一致，结尾以github.io结尾，如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/cangkuming.jpg" alt=""></p>
<p>因为我的已经注册过了，所以才报错！</p>
<ol start="2">
<li><strong>添加Git工具</strong></li>
</ol>
<p>在Git Bash终端输入</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>
<ol start="3">
<li><strong>添加公钥</strong></li>
</ol>
<p>这个过程的目的是在你的电脑和Github之间建立联系，保证安全性，，只有你可以操作。</p>
<p>首先查看<strong>C:Users\用户名</strong>下是否有.ssh文件</p>
<p>若是没有，输入</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span></code></pre>
<p>之后 一直回车即可，大约三个就行</p>
<p>然后会出现.ssh文件，打开这个文件，找到id_rsa.pub，复制里面的内容（用<a href="https://notepad-plus.en.softonic.com/" target="_blank" rel="noopener">Notepad++</a>打开）</p>
<p>打开github网页，在右上方头像那里会展开一系列选项，选择settings，点击<strong>SSH and GPG keys</strong>，将你刚在复制的内容黏贴，名字随便取。</p>
<h3 id="部署-config-yml"><a href="#部署-config-yml" class="headerlink" title="部署_config.yml"></a>部署_config.yml</h3><p>先打开你的仓库，将你仓库的网络地址复制下来</p>
<p>打开_config.ynl文件，划到最下方，部署以下内容</p>
<blockquote>
<p>deploy:<br>  type: git<br>  repo: “黏贴你刚才复制的仓库地址”<br>  branch: master</p>
</blockquote>
<p>使用 hexo d部署</p>
<p>这样就基本完成了。</p>
<p>记住以下命令：</p>
<blockquote>
<p>hexo clean 清理缓存文件</p>
<p>hexo g         生成</p>
<p>hexo s          启动服务</p>
<p>hexo d          部署到远端</p>
</blockquote>
<p>在本地看一眼，没有问题使用</p>
<blockquote>
<p>hexo d</p>
</blockquote>
<p>部署到远端。</p>
<p>这一切都是在你建立的那个文件夹下运行的，如果想要运行看看自己的博客，只需要在网站上输入你的个人网址就行，一般是你的用户名+github.io，这是我的个人博客<a href="https://1471748102.github.io" target="_blank" rel="noopener">https://1471748102.github.io</a>,欢迎来指教！</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/reshui.jpg" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>本地个人博客搭建</title>
    <url>/2019/12/30/ben-di-ge-ren-bo-ke-da-jian/</url>
    <content><![CDATA[<h2 id="本文简单介绍Hexo博客搭建流程"><a href="#本文简单介绍Hexo博客搭建流程" class="headerlink" title="本文简单介绍Hexo博客搭建流程"></a>本文简单介绍Hexo博客搭建流程</h2><p>主要是来记录自己的搭建时候出现的问题，以后再搭建的时候回顾，也希望可以对想搭建Hexo博客的同学有一些帮助。</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/1.jpg" alt=""></p>
<p>大体介绍一下我所了解的博客，分为静态博客和动态博客</p>
<p><strong>目录结构</strong></p>
<ul>
<li>安装Node.js</li>
<li>安装Git</li>
<li>安装Hexo</li>
<li>连接Github与本地</li>
<li>写文章，发布文章</li>
</ul>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>打开<a href="https://nodejs.org" target="_blank" rel="noopener">官方网站</a></p>
<p>下载LTS版本，如下图所示</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.7.2/img/nodejs.png" style="zoom:50%;">

<p>下载完成后，一路Next即可。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>打开<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官方网站</a></p>
<p>根据系统选择版本，这里建议先学习一下廖雪峰老师的Git教程 <a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">链接</a>，讲得非常好。</p>
<img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/git.png" style="zoom:80%;">

<p>下载完成后就一路Next即可，之后在开始菜单栏就会看到Git Bash，我们将会在这里操作。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li>建立一个文件夹，用来存放自己的博客文件，在该目录下右键运行Git Bash Here</li>
</ol>
<p>可以先测试是否安装成功,在终端执行以下命令</p>
<pre class=" language-bash"><code class="language-bash">node -v
<span class="token function">npm</span> -v</code></pre>
<p>如果正常出现<strong>版本号</strong>就代表成功安装，可以继续以下的步骤，否则就要重新安装。</p>
<ol start="2">
<li>使用淘宝镜像可以提高下载速度</li>
</ol>
<p>终端输入</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre>
<p>会出现以下界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/npm.png" alt=""></p>
<ol start="3">
<li>安装Hexo</li>
</ol>
<p>终端输入</p>
<pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli</code></pre>
<p>验证是否成功</p>
<pre class=" language-bash"><code class="language-bash">hexo -v</code></pre>
<p>出现下述文字就说明成功</p>
<pre class=" language-bash"><code class="language-bash">hexo: 3.8.0
hexo-cli: 1.1.0
os: Windows_NT 10.0.17134 win32 x64
http_parser: 2.8.0
node: 10.15.3
v8: 6.8.275.32-node.51
uv: 1.23.2
zlib: 1.2.11
ares: 1.15.0
modules: 64
nghttp2: 1.34.0
napi: 3
openssl: 1.1.0j
icu: 62.1
unicode: 11.0
cldr: 33.1
tz: 2018e</code></pre>
<p>如果出现失败，一般是环境变量出现错误，编辑一下环境变量。</p>
<ol start="4">
<li>初始化Hexo</li>
</ol>
<pre class=" language-bash"><code class="language-bash">hexo init</code></pre>
<p>需要等待一段时间，他会在文件夹里部署一些文件</p>
<p>这样本地的网站配置就部署好了，输入</p>
<pre class=" language-bash"><code class="language-bash">hexo g </code></pre>
<p>将会生成静态网页</p>
<p>然后输入</p>
<pre class=" language-bash"><code class="language-bash">hexo s</code></pre>
<p>将会打开本地服务器，在浏览器输入  <a href="localhost:4000/">localhost:4000/</a> ,就可以看到我们的博客了。</p>
<h3 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h3><p>环境变量问题，Mac下部署一般不会出现错误，但是在Windows下环境变量会出现命令不可识别的问题，需要在Path添加变量，如果实在不行，可以把Nodejs下的文件复制到你新建的文件夹下，但是要在<strong>hexo.init</strong>命令之后。</p>
<p>下一篇文章介绍一下<a href="https://huangzhiwu98.top/2019/12/31/lian-jie-github-yu-ben-di/">Hexo如何与Github相结合</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/1471748102/cdn@1.6/img/xianyu.gif" alt=""></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>问题</tag>
      </tags>
  </entry>
</search>
